
slave1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000014c6  0000155a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005f  00800066  00800066  00001560  2**0
                  ALLOC
  3 .stab         000030cc  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ad5  00000000  00000000  0000462c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00005108  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001353  00000000  00000000  000052c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a4  00000000  00000000  0000661b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae4  00000000  00000000  00006cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000540  00000000  00000000  000077a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000594  00000000  00000000  00007ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bbd  00000000  00000000  00008278  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
       4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_1>
       8:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_2>
       c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_10>
      2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_13>
      38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      54:	08 4a       	sbci	r16, 0xA8	; 168
      56:	d7 3b       	cpi	r29, 0xB7	; 183
      58:	3b ce       	rjmp	.-906    	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
      5a:	01 6e       	ori	r16, 0xE1	; 225
      5c:	84 bc       	out	0x24, r8	; 36
      5e:	bf fd       	.word	0xfdbf	; ????
      60:	c1 2f       	mov	r28, r17
      62:	3d 6c       	ori	r19, 0xCD	; 205
      64:	74 31       	cpi	r23, 0x14	; 20
      66:	9a bd       	out	0x2a, r25	; 42
      68:	56 83       	std	Z+6, r21	; 0x06
      6a:	3d da       	rcall	.-2950   	; 0xfffff4e6 <__eeprom_end+0xff7ef4e6>
      6c:	3d 00       	.word	0x003d	; ????
      6e:	c7 7f       	andi	r28, 0xF7	; 247
      70:	11 be       	out	0x31, r1	; 49
      72:	d9 e4       	ldi	r29, 0x49	; 73
      74:	bb 4c       	sbci	r27, 0xCB	; 203
      76:	3e 91       	ld	r19, -X
      78:	6b aa       	sts	0x9b, r22
      7a:	aa be       	out	0x3a, r10	; 58
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	3f 00       	.word	0x003f	; ????

00000082 <__ctors_end>:
      82:	11 24       	eor	r1, r1
      84:	1f be       	out	0x3f, r1	; 63
      86:	cf e5       	ldi	r28, 0x5F	; 95
      88:	d8 e0       	ldi	r29, 0x08	; 8
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
      8e:	10 e0       	ldi	r17, 0x00	; 0
      90:	a0 e6       	ldi	r26, 0x60	; 96
      92:	b0 e0       	ldi	r27, 0x00	; 0
      94:	e6 ec       	ldi	r30, 0xC6	; 198
      96:	f4 e1       	ldi	r31, 0x14	; 20
      98:	02 c0       	rjmp	.+4      	; 0x9e <__do_copy_data+0x10>
      9a:	05 90       	lpm	r0, Z+
      9c:	0d 92       	st	X+, r0
      9e:	a6 36       	cpi	r26, 0x66	; 102
      a0:	b1 07       	cpc	r27, r17
      a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0xc>

000000a4 <__do_clear_bss>:
      a4:	10 e0       	ldi	r17, 0x00	; 0
      a6:	a6 e6       	ldi	r26, 0x66	; 102
      a8:	b0 e0       	ldi	r27, 0x00	; 0
      aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
      ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
      ae:	a5 3c       	cpi	r26, 0xC5	; 197
      b0:	b1 07       	cpc	r27, r17
      b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
      b4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <main>
      b8:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <_exit>

000000bc <__bad_interrupt>:
      bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <__vector_10>:



/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
      c0:	1f 92       	push	r1
      c2:	0f 92       	push	r0
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	0f 92       	push	r0
      c8:	11 24       	eor	r1, r1
      ca:	2f 93       	push	r18
      cc:	3f 93       	push	r19
      ce:	4f 93       	push	r20
      d0:	5f 93       	push	r21
      d2:	6f 93       	push	r22
      d4:	7f 93       	push	r23
      d6:	8f 93       	push	r24
      d8:	9f 93       	push	r25
      da:	af 93       	push	r26
      dc:	bf 93       	push	r27
      de:	ef 93       	push	r30
      e0:	ff 93       	push	r31
	g_tick++;
      e2:	80 91 69 00 	lds	r24, 0x0069
      e6:	8f 5f       	subi	r24, 0xFF	; 255
      e8:	80 93 69 00 	sts	0x0069, r24
	if(g_tick == NUMBER_OF_OVERFLOWS_PER_SECOND)
      ec:	84 30       	cpi	r24, 0x04	; 4
      ee:	11 f4       	brne	.+4      	; 0xf4 <__vector_10+0x34>
	{
		TIMER0_IncTick();
      f0:	0e 94 a0 06 	call	0xd40	; 0xd40 <TIMER0_IncTick>
	}
}
      f4:	ff 91       	pop	r31
      f6:	ef 91       	pop	r30
      f8:	bf 91       	pop	r27
      fa:	af 91       	pop	r26
      fc:	9f 91       	pop	r25
      fe:	8f 91       	pop	r24
     100:	7f 91       	pop	r23
     102:	6f 91       	pop	r22
     104:	5f 91       	pop	r21
     106:	4f 91       	pop	r20
     108:	3f 91       	pop	r19
     10a:	2f 91       	pop	r18
     10c:	0f 90       	pop	r0
     10e:	0f be       	out	0x3f, r0	; 63
     110:	0f 90       	pop	r0
     112:	1f 90       	pop	r1
     114:	18 95       	reti

00000116 <__vector_13>:


/* Interrupt Service Routine for uart */
ISR(USART_RXC_vect)
{
     116:	1f 92       	push	r1
     118:	0f 92       	push	r0
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	0f 92       	push	r0
     11e:	11 24       	eor	r1, r1
     120:	2f 93       	push	r18
     122:	3f 93       	push	r19
     124:	4f 93       	push	r20
     126:	5f 93       	push	r21
     128:	6f 93       	push	r22
     12a:	7f 93       	push	r23
     12c:	8f 93       	push	r24
     12e:	9f 93       	push	r25
     130:	af 93       	push	r26
     132:	bf 93       	push	r27
     134:	ef 93       	push	r30
     136:	ff 93       	push	r31
	u8 val = 0;
	 val = UART_recieveByte();
     138:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_recieveByte>
	 
	 if(val == '@')
     13c:	80 34       	cpi	r24, 0x40	; 64
     13e:	21 f4       	brne	.+8      	; 0x148 <__vector_13+0x32>
	 {
		 flag_startBuffer = 1;
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	90 93 68 00 	sts	0x0068, r25
     146:	04 c0       	rjmp	.+8      	; 0x150 <__vector_13+0x3a>
	 }
	 
	 if(flag_startBuffer == 1)
     148:	90 91 68 00 	lds	r25, 0x0068
     14c:	91 30       	cpi	r25, 0x01	; 1
     14e:	51 f4       	brne	.+20     	; 0x164 <__vector_13+0x4e>
	 {
		 recivedBuffer[bufferCounter] = val;
     150:	90 91 66 00 	lds	r25, 0x0066
     154:	ec eb       	ldi	r30, 0xBC	; 188
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	e9 0f       	add	r30, r25
     15a:	f1 1d       	adc	r31, r1
     15c:	80 83       	st	Z, r24
		 bufferCounter++;
     15e:	9f 5f       	subi	r25, 0xFF	; 255
     160:	90 93 66 00 	sts	0x0066, r25
	 }
	 
	 if(val == ';')
     164:	8b 33       	cpi	r24, 0x3B	; 59
     166:	39 f4       	brne	.+14     	; 0x176 <__vector_13+0x60>
	 {
		 flag_startBuffer = 0;
     168:	10 92 68 00 	sts	0x0068, r1
		 flag_newBufferComplete = 1;
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	80 93 67 00 	sts	0x0067, r24
		 bufferCounter = 0;
     172:	10 92 66 00 	sts	0x0066, r1
	 }
	
}
     176:	ff 91       	pop	r31
     178:	ef 91       	pop	r30
     17a:	bf 91       	pop	r27
     17c:	af 91       	pop	r26
     17e:	9f 91       	pop	r25
     180:	8f 91       	pop	r24
     182:	7f 91       	pop	r23
     184:	6f 91       	pop	r22
     186:	5f 91       	pop	r21
     188:	4f 91       	pop	r20
     18a:	3f 91       	pop	r19
     18c:	2f 91       	pop	r18
     18e:	0f 90       	pop	r0
     190:	0f be       	out	0x3f, r0	; 63
     192:	0f 90       	pop	r0
     194:	1f 90       	pop	r1
     196:	18 95       	reti

00000198 <__vector_1>:


/* External INT0 Interrupt Service Routine */
ISR(INT0_vect)
{
     198:	1f 92       	push	r1
     19a:	0f 92       	push	r0
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	0f 92       	push	r0
     1a0:	11 24       	eor	r1, r1
     1a2:	2f 93       	push	r18
     1a4:	3f 93       	push	r19
     1a6:	4f 93       	push	r20
     1a8:	5f 93       	push	r21
     1aa:	6f 93       	push	r22
     1ac:	7f 93       	push	r23
     1ae:	8f 93       	push	r24
     1b0:	9f 93       	push	r25
     1b2:	af 93       	push	r26
     1b4:	bf 93       	push	r27
     1b6:	ef 93       	push	r30
     1b8:	ff 93       	push	r31
	Encoder_IncPulse(Encoder_one);
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Encoder_IncPulse>
}
     1c0:	ff 91       	pop	r31
     1c2:	ef 91       	pop	r30
     1c4:	bf 91       	pop	r27
     1c6:	af 91       	pop	r26
     1c8:	9f 91       	pop	r25
     1ca:	8f 91       	pop	r24
     1cc:	7f 91       	pop	r23
     1ce:	6f 91       	pop	r22
     1d0:	5f 91       	pop	r21
     1d2:	4f 91       	pop	r20
     1d4:	3f 91       	pop	r19
     1d6:	2f 91       	pop	r18
     1d8:	0f 90       	pop	r0
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	0f 90       	pop	r0
     1de:	1f 90       	pop	r1
     1e0:	18 95       	reti

000001e2 <__vector_2>:


/* External INT1 Interrupt Service Routine */
ISR(INT1_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	2f 93       	push	r18
     1ee:	3f 93       	push	r19
     1f0:	4f 93       	push	r20
     1f2:	5f 93       	push	r21
     1f4:	6f 93       	push	r22
     1f6:	7f 93       	push	r23
     1f8:	8f 93       	push	r24
     1fa:	9f 93       	push	r25
     1fc:	af 93       	push	r26
     1fe:	bf 93       	push	r27
     200:	ef 93       	push	r30
     202:	ff 93       	push	r31
	Encoder_IncPulse(Encoder_two);
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	0e 94 6e 01 	call	0x2dc	; 0x2dc <Encoder_IncPulse>
}
     20a:	ff 91       	pop	r31
     20c:	ef 91       	pop	r30
     20e:	bf 91       	pop	r27
     210:	af 91       	pop	r26
     212:	9f 91       	pop	r25
     214:	8f 91       	pop	r24
     216:	7f 91       	pop	r23
     218:	6f 91       	pop	r22
     21a:	5f 91       	pop	r21
     21c:	4f 91       	pop	r20
     21e:	3f 91       	pop	r19
     220:	2f 91       	pop	r18
     222:	0f 90       	pop	r0
     224:	0f be       	out	0x3f, r0	; 63
     226:	0f 90       	pop	r0
     228:	1f 90       	pop	r1
     22a:	18 95       	reti

0000022c <CheckForCommand>:
}


void CheckForCommand()
{
	if (recivedBuffer[1] == 'C')
     22c:	80 91 bd 00 	lds	r24, 0x00BD
     230:	83 34       	cpi	r24, 0x43	; 67
     232:	f1 f1       	breq	.+124    	; 0x2b0 <CheckForCommand+0x84>
	{
		
	}
	else if (recivedBuffer[1] == 'N')
     234:	8e 34       	cpi	r24, 0x4E	; 78
     236:	e1 f1       	breq	.+120    	; 0x2b0 <CheckForCommand+0x84>
	{
		
	}
	else if (recivedBuffer[1] == 'E')
     238:	85 34       	cpi	r24, 0x45	; 69
     23a:	41 f5       	brne	.+80     	; 0x28c <CheckForCommand+0x60>
	{
		if (recivedBuffer[2] == 'B')
     23c:	80 91 be 00 	lds	r24, 0x00BE
     240:	82 34       	cpi	r24, 0x42	; 66
     242:	b1 f5       	brne	.+108    	; 0x2b0 <CheckForCommand+0x84>
		{
			u16 val = 0;
			
			val = recivedBuffer[5] - 48;
     244:	20 91 c1 00 	lds	r18, 0x00C1
			
			val += (recivedBuffer[4] - 48) * 10;
     248:	80 91 c0 00 	lds	r24, 0x00C0
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	88 0f       	add	r24, r24
     250:	99 1f       	adc	r25, r25
     252:	bc 01       	movw	r22, r24
     254:	66 0f       	add	r22, r22
     256:	77 1f       	adc	r23, r23
     258:	66 0f       	add	r22, r22
     25a:	77 1f       	adc	r23, r23
     25c:	86 0f       	add	r24, r22
     25e:	97 1f       	adc	r25, r23
     260:	bc 01       	movw	r22, r24
     262:	62 0f       	add	r22, r18
     264:	71 1d       	adc	r23, r1
			
			val += (recivedBuffer[3] - 48) * 100;
     266:	60 5d       	subi	r22, 0xD0	; 208
     268:	74 41       	sbci	r23, 0x14	; 20
     26a:	20 91 bf 00 	lds	r18, 0x00BF
     26e:	30 e0       	ldi	r19, 0x00	; 0
     270:	44 e6       	ldi	r20, 0x64	; 100
     272:	50 e0       	ldi	r21, 0x00	; 0
     274:	24 9f       	mul	r18, r20
     276:	c0 01       	movw	r24, r0
     278:	25 9f       	mul	r18, r21
     27a:	90 0d       	add	r25, r0
     27c:	34 9f       	mul	r19, r20
     27e:	90 0d       	add	r25, r0
     280:	11 24       	eor	r1, r1
			
			Encoder_ChangeBlockSize(val);
     282:	86 0f       	add	r24, r22
     284:	97 1f       	adc	r25, r23
     286:	0e 94 a2 01 	call	0x344	; 0x344 <Encoder_ChangeBlockSize>
     28a:	08 95       	ret
		}
	}
	else if (recivedBuffer[1] == 'A')
     28c:	81 34       	cpi	r24, 0x41	; 65
     28e:	81 f4       	brne	.+32     	; 0x2b0 <CheckForCommand+0x84>
	{
		if (recivedBuffer[3] == 'H')
     290:	80 91 bf 00 	lds	r24, 0x00BF
     294:	88 34       	cpi	r24, 0x48	; 72
     296:	61 f4       	brne	.+24     	; 0x2b0 <CheckForCommand+0x84>
		{
			if (recivedBuffer[4] == 'S')
     298:	80 91 c0 00 	lds	r24, 0x00C0
     29c:	83 35       	cpi	r24, 0x53	; 83
     29e:	21 f4       	brne	.+8      	; 0x2a8 <CheckForCommand+0x7c>
			{
				flag_harvestingProcess = 1;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	80 93 6a 00 	sts	0x006A, r24
     2a6:	08 95       	ret
			}
			else if (recivedBuffer[4] == 'E')
     2a8:	85 34       	cpi	r24, 0x45	; 69
     2aa:	11 f4       	brne	.+4      	; 0x2b0 <CheckForCommand+0x84>
			{
				flag_harvestingProcess = 0;
     2ac:	10 92 6a 00 	sts	0x006A, r1
     2b0:	08 95       	ret

000002b2 <main>:

void CheckForCommand();

int main(void)
{
	TIMER0_init_CTC_mode();
     2b2:	0e 94 97 06 	call	0xd2e	; 0xd2e <TIMER0_init_CTC_mode>
	UART_init();
     2b6:	0e 94 bd 06 	call	0xd7a	; 0xd7a <UART_init>
	Encoder_Init();
     2ba:	0e 94 69 01 	call	0x2d2	; 0x2d2 <Encoder_Init>
	
    while(1)
    {
        if (flag_newBufferComplete == 1)
     2be:	80 91 67 00 	lds	r24, 0x0067
     2c2:	81 30       	cpi	r24, 0x01	; 1
     2c4:	29 f4       	brne	.+10     	; 0x2d0 <main+0x1e>
        {
			CheckForCommand();
     2c6:	0e 94 16 01 	call	0x22c	; 0x22c <CheckForCommand>
			flag_newBufferComplete = 0;
     2ca:	10 92 67 00 	sts	0x0067, r1
     2ce:	f7 cf       	rjmp	.-18     	; 0x2be <main+0xc>
     2d0:	ff cf       	rjmp	.-2      	; 0x2d0 <main+0x1e>

000002d2 <Encoder_Init>:



void Encoder_Init()
{
	INT1_Init();
     2d2:	0e 94 c9 05 	call	0xb92	; 0xb92 <INT1_Init>
	INT0_Init();
     2d6:	0e 94 bb 05 	call	0xb76	; 0xb76 <INT0_Init>
}
     2da:	08 95       	ret

000002dc <Encoder_IncPulse>:


void Encoder_IncPulse(Encoder_Numb encoderNumb)
{
	if(encoderNumb == Encoder_one)
     2dc:	88 23       	and	r24, r24
     2de:	a9 f4       	brne	.+42     	; 0x30a <Encoder_IncPulse+0x2e>
	{
		EncoderOnePulse++;
     2e0:	20 91 6f 00 	lds	r18, 0x006F
     2e4:	2f 5f       	subi	r18, 0xFF	; 255
     2e6:	20 93 6f 00 	sts	0x006F, r18
		
		if (EncoderOnePulse == BlockToPulse)
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	80 91 60 00 	lds	r24, 0x0060
     2f0:	90 91 61 00 	lds	r25, 0x0061
     2f4:	28 17       	cp	r18, r24
     2f6:	39 07       	cpc	r19, r25
     2f8:	f1 f4       	brne	.+60     	; 0x336 <Encoder_IncPulse+0x5a>
		{
			EncoderOneBlock++;
     2fa:	80 91 6d 00 	lds	r24, 0x006D
     2fe:	8f 5f       	subi	r24, 0xFF	; 255
     300:	80 93 6d 00 	sts	0x006D, r24
			EncoderOnePulse = 0;
     304:	10 92 6f 00 	sts	0x006F, r1
     308:	08 95       	ret
		}
	}
	else if(encoderNumb == Encoder_two)
     30a:	81 30       	cpi	r24, 0x01	; 1
     30c:	a1 f4       	brne	.+40     	; 0x336 <Encoder_IncPulse+0x5a>
	{
		EncoderTwoPulse++;
     30e:	20 91 6e 00 	lds	r18, 0x006E
     312:	2f 5f       	subi	r18, 0xFF	; 255
     314:	20 93 6e 00 	sts	0x006E, r18
		
		if (EncoderTwoPulse == BlockToPulse)
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	80 91 60 00 	lds	r24, 0x0060
     31e:	90 91 61 00 	lds	r25, 0x0061
     322:	28 17       	cp	r18, r24
     324:	39 07       	cpc	r19, r25
     326:	39 f4       	brne	.+14     	; 0x336 <Encoder_IncPulse+0x5a>
		{
			EncoderTwoBlock++;
     328:	80 91 6c 00 	lds	r24, 0x006C
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	80 93 6c 00 	sts	0x006C, r24
			EncoderTwoPulse = 0;
     332:	10 92 6e 00 	sts	0x006E, r1
     336:	08 95       	ret

00000338 <Encoder_AddBlocks>:
}


void Encoder_AddBlocks(u8 blocksNumb)
{
	g_blocksNumbers = blocksNumb;
     338:	80 93 6b 00 	sts	0x006B, r24
}
     33c:	08 95       	ret

0000033e <Encoder_DeleteBlocks>:


void Encoder_DeleteBlocks()
{
	g_blocksNumbers = 0;
     33e:	10 92 6b 00 	sts	0x006B, r1
}
     342:	08 95       	ret

00000344 <Encoder_ChangeBlockSize>:


void Encoder_ChangeBlockSize(u16 pulsesNumb)
{
	BlockToPulse = pulsesNumb;
     344:	90 93 61 00 	sts	0x0061, r25
     348:	80 93 60 00 	sts	0x0060, r24
}
     34c:	08 95       	ret

0000034e <Encoder_IsEncodersEqual>:

u8 Encoder_IsEncodersEqual()
{
	if (EncoderTwoPulse == g_blocksNumbers)
	{
		return SUCCESS;
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	20 91 6e 00 	lds	r18, 0x006E
     354:	90 91 6b 00 	lds	r25, 0x006B
     358:	29 13       	cpse	r18, r25
     35a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		return ERROR;
	}
	
}
     35c:	08 95       	ret

0000035e <Encoder_IsBlocksFinished>:


u8 Encoder_IsBlocksFinished()
{
	if ((EncoderOneBlock == EncoderOnePulse) && (EncoderTwoBlock == EncoderOnePulse))
     35e:	90 91 6d 00 	lds	r25, 0x006D
     362:	80 91 6f 00 	lds	r24, 0x006F
     366:	98 17       	cp	r25, r24
     368:	39 f4       	brne	.+14     	; 0x378 <Encoder_IsBlocksFinished+0x1a>
	}
	
}


u8 Encoder_IsBlocksFinished()
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	20 91 6c 00 	lds	r18, 0x006C
     370:	92 17       	cp	r25, r18
     372:	19 f0       	breq	.+6      	; 0x37a <Encoder_IsBlocksFinished+0x1c>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	08 95       	ret
	{
		return SUCCESS;
	}
	else
	{
		return ERROR;
     378:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     37a:	08 95       	ret

0000037c <Encoder_Rebalance>:

void Encoder_Rebalance()
{
	
	
     37c:	08 95       	ret

0000037e <MPU6050_Init>:
  * and gyroscope parameters. The sensor is expected to have a device ID of 104 (0x68).
  * If initialization is successful, the function returns 0; otherwise, it returns 1.
  */

u8 MPU6050_Init()
{
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	00 d0       	rcall	.+0      	; 0x384 <MPU6050_Init+0x6>
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
    u8 check = 0;
     388:	19 82       	std	Y+1, r1	; 0x01
    u8 Data = 0;
     38a:	1a 82       	std	Y+2, r1	; 0x02
	
	TWI_init();
     38c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <TWI_init>

    // check device ID WHO_AM_I

    //HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
    /* I2C READ FROM MEMORY WITH ADDRESS WHO_AM_I_REG THE OUTPUT IN check */////////////////////////////////////////////////////////********
	I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_REG, &check, 1);
     390:	80 ed       	ldi	r24, 0xD0	; 208
     392:	65 e7       	ldi	r22, 0x75	; 117
     394:	ae 01       	movw	r20, r28
     396:	4f 5f       	subi	r20, 0xFF	; 255
     398:	5f 4f       	sbci	r21, 0xFF	; 255
     39a:	21 e0       	ldi	r18, 0x01	; 1
     39c:	0e 94 35 06 	call	0xc6a	; 0xc6a <I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	88 36       	cpi	r24, 0x68	; 104
     3a4:	19 f5       	brne	.+70     	; 0x3ec <MPU6050_Init+0x6e>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
     3a6:	1a 82       	std	Y+2, r1	; 0x02
        //HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
        /* I2C WRITE TO MEMORY WITH ADDRESS PWR_MGMT_1_REG AND DATA = Data *////////////////////////////////////////////////////////********
		I2C_Mem_Write(MPU6050_ADDR, PWR_MGMT_1_REG, &Data);
     3a8:	80 ed       	ldi	r24, 0xD0	; 208
     3aa:	6b e6       	ldi	r22, 0x6B	; 107
     3ac:	ae 01       	movw	r20, r28
     3ae:	4e 5f       	subi	r20, 0xFE	; 254
     3b0:	5f 4f       	sbci	r21, 0xFF	; 255
     3b2:	0e 94 03 06 	call	0xc06	; 0xc06 <I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
     3b6:	87 e0       	ldi	r24, 0x07	; 7
     3b8:	8a 83       	std	Y+2, r24	; 0x02
        //HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
        /* I2C WRITE TO MEMORY WITH ADDRESS SMPLRT_DIV_REG AND DATA = Data */////////////////////////////////////////////////////////*********
		I2C_Mem_Write(MPU6050_ADDR, SMPLRT_DIV_REG, &Data);
     3ba:	80 ed       	ldi	r24, 0xD0	; 208
     3bc:	69 e1       	ldi	r22, 0x19	; 25
     3be:	ae 01       	movw	r20, r28
     3c0:	4e 5f       	subi	r20, 0xFE	; 254
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 03 06 	call	0xc06	; 0xc06 <I2C_Mem_Write>
		
        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ? 2g
        Data = 0x00;
     3c8:	1a 82       	std	Y+2, r1	; 0x02
        //HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
        /* I2C WRITE TO MEMORY WITH ADDRESS ACCEL_CONFIG_REG AND DATA = Data */////////////////////////////////////////////////////////*******
		I2C_Mem_Write(MPU6050_ADDR, ACCEL_CONFIG_REG, &Data);
     3ca:	80 ed       	ldi	r24, 0xD0	; 208
     3cc:	6c e1       	ldi	r22, 0x1C	; 28
     3ce:	ae 01       	movw	r20, r28
     3d0:	4e 5f       	subi	r20, 0xFE	; 254
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 03 06 	call	0xc06	; 0xc06 <I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ? 250 ?/s
        Data = 0x00;
     3d8:	1a 82       	std	Y+2, r1	; 0x02
        //HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
        /* I2C WRITE TO MEMORY WITH ADDRESS GYRO_CONFIG_REG AND DATA = Data */////////////////////////////////////////////////////////********
		I2C_Mem_Write(MPU6050_ADDR, GYRO_CONFIG_REG, &Data);
     3da:	80 ed       	ldi	r24, 0xD0	; 208
     3dc:	6b e1       	ldi	r22, 0x1B	; 27
     3de:	ae 01       	movw	r20, r28
     3e0:	4e 5f       	subi	r20, 0xFE	; 254
     3e2:	5f 4f       	sbci	r21, 0xFF	; 255
     3e4:	0e 94 03 06 	call	0xc06	; 0xc06 <I2C_Mem_Write>
		
        return 0;
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	01 c0       	rjmp	.+2      	; 0x3ee <MPU6050_Init+0x70>
    }
    return 1;
     3ec:	81 e0       	ldi	r24, 0x01	; 1
}
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <Kalman_getAngle>:
  * involving the Kalman filter parameters such as angle, bias, and covariance matrix.
  * The result is the filtered angle estimate, which is returned by the function.
  */

f64 Kalman_getAngle(Kalman_t *Kalman, f64 newAngle, f64 newRate, f64 dt)
{
     3f8:	2f 92       	push	r2
     3fa:	3f 92       	push	r3
     3fc:	4f 92       	push	r4
     3fe:	5f 92       	push	r5
     400:	6f 92       	push	r6
     402:	7f 92       	push	r7
     404:	8f 92       	push	r8
     406:	9f 92       	push	r9
     408:	af 92       	push	r10
     40a:	bf 92       	push	r11
     40c:	cf 92       	push	r12
     40e:	df 92       	push	r13
     410:	ef 92       	push	r14
     412:	ff 92       	push	r15
     414:	0f 93       	push	r16
     416:	1f 93       	push	r17
     418:	cf 93       	push	r28
     41a:	df 93       	push	r29
     41c:	cd b7       	in	r28, 0x3d	; 61
     41e:	de b7       	in	r29, 0x3e	; 62
     420:	6a 97       	sbiw	r28, 0x1a	; 26
     422:	0f b6       	in	r0, 0x3f	; 63
     424:	f8 94       	cli
     426:	de bf       	out	0x3e, r29	; 62
     428:	0f be       	out	0x3f, r0	; 63
     42a:	cd bf       	out	0x3d, r28	; 61
     42c:	1c 01       	movw	r2, r24
     42e:	4d 8b       	std	Y+21, r20	; 0x15
     430:	5e 8b       	std	Y+22, r21	; 0x16
     432:	6f 8b       	std	Y+23, r22	; 0x17
     434:	78 8f       	std	Y+24, r23	; 0x18
     436:	46 01       	movw	r8, r12
     438:	57 01       	movw	r10, r14
    f64 rate = newRate - Kalman->bias;
     43a:	dc 01       	movw	r26, r24
     43c:	50 96       	adiw	r26, 0x10	; 16
     43e:	8d 91       	ld	r24, X+
     440:	9d 91       	ld	r25, X+
     442:	0d 90       	ld	r0, X+
     444:	bc 91       	ld	r27, X
     446:	a0 2d       	mov	r26, r0
     448:	89 8b       	std	Y+17, r24	; 0x11
     44a:	9a 8b       	std	Y+18, r25	; 0x12
     44c:	ab 8b       	std	Y+19, r26	; 0x13
     44e:	bc 8b       	std	Y+20, r27	; 0x14
     450:	a9 01       	movw	r20, r18
     452:	98 01       	movw	r18, r16
     454:	28 1b       	sub	r18, r24
     456:	39 0b       	sbc	r19, r25
     458:	4a 0b       	sbc	r20, r26
     45a:	5b 0b       	sbc	r21, r27
    Kalman->angle += dt * rate;
     45c:	c7 01       	movw	r24, r14
     45e:	b6 01       	movw	r22, r12
     460:	0e 94 05 0a 	call	0x140a	; 0x140a <__mulsi3>
     464:	ab 01       	movw	r20, r22
     466:	bc 01       	movw	r22, r24
     468:	f1 01       	movw	r30, r2
     46a:	84 85       	ldd	r24, Z+12	; 0x0c
     46c:	95 85       	ldd	r25, Z+13	; 0x0d
     46e:	a6 85       	ldd	r26, Z+14	; 0x0e
     470:	b7 85       	ldd	r27, Z+15	; 0x0f
     472:	8a 01       	movw	r16, r20
     474:	9b 01       	movw	r18, r22
     476:	08 0f       	add	r16, r24
     478:	19 1f       	adc	r17, r25
     47a:	2a 1f       	adc	r18, r26
     47c:	3b 1f       	adc	r19, r27
     47e:	09 83       	std	Y+1, r16	; 0x01
     480:	1a 83       	std	Y+2, r17	; 0x02
     482:	2b 83       	std	Y+3, r18	; 0x03
     484:	3c 83       	std	Y+4, r19	; 0x04

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
     486:	00 a1       	lds	r16, 0x40
     488:	11 a1       	lds	r17, 0x41
     48a:	22 a1       	lds	r18, 0x42
     48c:	33 a1       	lds	r19, 0x43
     48e:	0d 87       	std	Y+13, r16	; 0x0d
     490:	1e 87       	std	Y+14, r17	; 0x0e
     492:	2f 87       	std	Y+15, r18	; 0x0f
     494:	38 8b       	std	Y+16, r19	; 0x10
     496:	c9 01       	movw	r24, r18
     498:	b8 01       	movw	r22, r16
     49a:	a7 01       	movw	r20, r14
     49c:	96 01       	movw	r18, r12
     49e:	0e 94 05 0a 	call	0x140a	; 0x140a <__mulsi3>
     4a2:	6b 01       	movw	r12, r22
     4a4:	7c 01       	movw	r14, r24
     4a6:	d1 01       	movw	r26, r2
     4a8:	58 96       	adiw	r26, 0x18	; 24
     4aa:	0d 91       	ld	r16, X+
     4ac:	1d 91       	ld	r17, X+
     4ae:	2d 91       	ld	r18, X+
     4b0:	3c 91       	ld	r19, X
     4b2:	5b 97       	sbiw	r26, 0x1b	; 27
     4b4:	0d 83       	std	Y+5, r16	; 0x05
     4b6:	1e 83       	std	Y+6, r17	; 0x06
     4b8:	2f 83       	std	Y+7, r18	; 0x07
     4ba:	38 87       	std	Y+8, r19	; 0x08
     4bc:	5c 96       	adiw	r26, 0x1c	; 28
     4be:	0d 91       	ld	r16, X+
     4c0:	1d 91       	ld	r17, X+
     4c2:	2d 91       	ld	r18, X+
     4c4:	3c 91       	ld	r19, X
     4c6:	5f 97       	sbiw	r26, 0x1f	; 31
     4c8:	09 87       	std	Y+9, r16	; 0x09
     4ca:	1a 87       	std	Y+10, r17	; 0x0a
     4cc:	2b 87       	std	Y+11, r18	; 0x0b
     4ce:	3c 87       	std	Y+12, r19	; 0x0c
     4d0:	ab 01       	movw	r20, r22
     4d2:	bc 01       	movw	r22, r24
     4d4:	0d 81       	ldd	r16, Y+5	; 0x05
     4d6:	1e 81       	ldd	r17, Y+6	; 0x06
     4d8:	2f 81       	ldd	r18, Y+7	; 0x07
     4da:	38 85       	ldd	r19, Y+8	; 0x08
     4dc:	40 1b       	sub	r20, r16
     4de:	51 0b       	sbc	r21, r17
     4e0:	62 0b       	sbc	r22, r18
     4e2:	73 0b       	sbc	r23, r19
     4e4:	09 85       	ldd	r16, Y+9	; 0x09
     4e6:	1a 85       	ldd	r17, Y+10	; 0x0a
     4e8:	2b 85       	ldd	r18, Y+11	; 0x0b
     4ea:	3c 85       	ldd	r19, Y+12	; 0x0c
     4ec:	40 1b       	sub	r20, r16
     4ee:	51 0b       	sbc	r21, r17
     4f0:	62 0b       	sbc	r22, r18
     4f2:	73 0b       	sbc	r23, r19
     4f4:	8d 91       	ld	r24, X+
     4f6:	9d 91       	ld	r25, X+
     4f8:	0d 90       	ld	r0, X+
     4fa:	bc 91       	ld	r27, X
     4fc:	a0 2d       	mov	r26, r0
     4fe:	84 0f       	add	r24, r20
     500:	95 1f       	adc	r25, r21
     502:	a6 1f       	adc	r26, r22
     504:	b7 1f       	adc	r27, r23
     506:	bc 01       	movw	r22, r24
     508:	cd 01       	movw	r24, r26
     50a:	a5 01       	movw	r20, r10
     50c:	94 01       	movw	r18, r8
     50e:	0e 94 05 0a 	call	0x140a	; 0x140a <__mulsi3>
     512:	ab 01       	movw	r20, r22
     514:	bc 01       	movw	r22, r24
     516:	f1 01       	movw	r30, r2
     518:	84 89       	ldd	r24, Z+20	; 0x14
     51a:	95 89       	ldd	r25, Z+21	; 0x15
     51c:	a6 89       	ldd	r26, Z+22	; 0x16
     51e:	b7 89       	ldd	r27, Z+23	; 0x17
     520:	2a 01       	movw	r4, r20
     522:	3b 01       	movw	r6, r22
     524:	48 0e       	add	r4, r24
     526:	59 1e       	adc	r5, r25
     528:	6a 1e       	adc	r6, r26
     52a:	7b 1e       	adc	r7, r27
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
     52c:	0d 81       	ldd	r16, Y+5	; 0x05
     52e:	1e 81       	ldd	r17, Y+6	; 0x06
     530:	2f 81       	ldd	r18, Y+7	; 0x07
     532:	38 85       	ldd	r19, Y+8	; 0x08
     534:	0c 19       	sub	r16, r12
     536:	1d 09       	sbc	r17, r13
     538:	2e 09       	sbc	r18, r14
     53a:	3f 09       	sbc	r19, r15
     53c:	0d 83       	std	Y+5, r16	; 0x05
     53e:	1e 83       	std	Y+6, r17	; 0x06
     540:	2f 83       	std	Y+7, r18	; 0x07
     542:	38 87       	std	Y+8, r19	; 0x08
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
     544:	09 85       	ldd	r16, Y+9	; 0x09
     546:	1a 85       	ldd	r17, Y+10	; 0x0a
     548:	2b 85       	ldd	r18, Y+11	; 0x0b
     54a:	3c 85       	ldd	r19, Y+12	; 0x0c
     54c:	0c 19       	sub	r16, r12
     54e:	1d 09       	sbc	r17, r13
     550:	2e 09       	sbc	r18, r14
     552:	3f 09       	sbc	r19, r15
     554:	09 87       	std	Y+9, r16	; 0x09
     556:	1a 87       	std	Y+10, r17	; 0x0a
     558:	2b 87       	std	Y+11, r18	; 0x0b
     55a:	3c 87       	std	Y+12, r19	; 0x0c
    Kalman->P[1][1] += Kalman->Q_bias * dt;
     55c:	24 81       	ldd	r18, Z+4	; 0x04
     55e:	35 81       	ldd	r19, Z+5	; 0x05
     560:	46 81       	ldd	r20, Z+6	; 0x06
     562:	57 81       	ldd	r21, Z+7	; 0x07
     564:	c5 01       	movw	r24, r10
     566:	b4 01       	movw	r22, r8
     568:	0e 94 05 0a 	call	0x140a	; 0x140a <__mulsi3>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	0d 85       	ldd	r16, Y+13	; 0x0d
     572:	1e 85       	ldd	r17, Y+14	; 0x0e
     574:	2f 85       	ldd	r18, Y+15	; 0x0f
     576:	38 89       	ldd	r19, Y+16	; 0x10
     578:	08 0f       	add	r16, r24
     57a:	19 1f       	adc	r17, r25
     57c:	2a 1f       	adc	r18, r26
     57e:	3b 1f       	adc	r19, r27
     580:	0d 87       	std	Y+13, r16	; 0x0d
     582:	1e 87       	std	Y+14, r17	; 0x0e
     584:	2f 87       	std	Y+15, r18	; 0x0f
     586:	38 8b       	std	Y+16, r19	; 0x10

    f64 S = Kalman->P[0][0] + Kalman->R_measure;
     588:	d1 01       	movw	r26, r2
     58a:	18 96       	adiw	r26, 0x08	; 8
     58c:	cd 90       	ld	r12, X+
     58e:	dd 90       	ld	r13, X+
     590:	ed 90       	ld	r14, X+
     592:	fc 90       	ld	r15, X
     594:	1b 97       	sbiw	r26, 0x0b	; 11
     596:	c4 0c       	add	r12, r4
     598:	d5 1c       	adc	r13, r5
     59a:	e6 1c       	adc	r14, r6
     59c:	f7 1c       	adc	r15, r7
    f64 K[2];
    K[0] = Kalman->P[0][0] / S;
     59e:	c3 01       	movw	r24, r6
     5a0:	b2 01       	movw	r22, r4
     5a2:	a7 01       	movw	r20, r14
     5a4:	96 01       	movw	r18, r12
     5a6:	0e 94 24 0a 	call	0x1448	; 0x1448 <__divmodsi4>
     5aa:	02 2f       	mov	r16, r18
     5ac:	13 2f       	mov	r17, r19
     5ae:	4a 8f       	std	Y+26, r20	; 0x1a
     5b0:	59 8f       	std	Y+25, r21	; 0x19
    K[1] = Kalman->P[1][0] / S;
     5b2:	69 85       	ldd	r22, Y+9	; 0x09
     5b4:	7a 85       	ldd	r23, Y+10	; 0x0a
     5b6:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b8:	9c 85       	ldd	r25, Y+12	; 0x0c
     5ba:	a7 01       	movw	r20, r14
     5bc:	96 01       	movw	r18, r12
     5be:	0e 94 24 0a 	call	0x1448	; 0x1448 <__divmodsi4>
     5c2:	f2 2e       	mov	r15, r18
     5c4:	e3 2e       	mov	r14, r19
     5c6:	d4 2e       	mov	r13, r20
     5c8:	c5 2e       	mov	r12, r21

    f64 y = newAngle - Kalman->angle;
     5ca:	8d 88       	ldd	r8, Y+21	; 0x15
     5cc:	9e 88       	ldd	r9, Y+22	; 0x16
     5ce:	af 88       	ldd	r10, Y+23	; 0x17
     5d0:	b8 8c       	ldd	r11, Y+24	; 0x18
     5d2:	29 81       	ldd	r18, Y+1	; 0x01
     5d4:	3a 81       	ldd	r19, Y+2	; 0x02
     5d6:	4b 81       	ldd	r20, Y+3	; 0x03
     5d8:	5c 81       	ldd	r21, Y+4	; 0x04
     5da:	82 1a       	sub	r8, r18
     5dc:	93 0a       	sbc	r9, r19
     5de:	a4 0a       	sbc	r10, r20
     5e0:	b5 0a       	sbc	r11, r21
    Kalman->angle += K[0] * y;
     5e2:	60 2f       	mov	r22, r16
     5e4:	71 2f       	mov	r23, r17
     5e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     5e8:	99 8d       	ldd	r25, Y+25	; 0x19
     5ea:	a5 01       	movw	r20, r10
     5ec:	94 01       	movw	r18, r8
     5ee:	0e 94 05 0a 	call	0x140a	; 0x140a <__mulsi3>
     5f2:	dc 01       	movw	r26, r24
     5f4:	cb 01       	movw	r24, r22
     5f6:	29 81       	ldd	r18, Y+1	; 0x01
     5f8:	3a 81       	ldd	r19, Y+2	; 0x02
     5fa:	4b 81       	ldd	r20, Y+3	; 0x03
     5fc:	5c 81       	ldd	r21, Y+4	; 0x04
     5fe:	28 0f       	add	r18, r24
     600:	39 1f       	adc	r19, r25
     602:	4a 1f       	adc	r20, r26
     604:	5b 1f       	adc	r21, r27
     606:	29 83       	std	Y+1, r18	; 0x01
     608:	3a 83       	std	Y+2, r19	; 0x02
     60a:	4b 83       	std	Y+3, r20	; 0x03
     60c:	5c 83       	std	Y+4, r21	; 0x04
     60e:	d1 01       	movw	r26, r2
     610:	1c 96       	adiw	r26, 0x0c	; 12
     612:	2d 93       	st	X+, r18
     614:	3d 93       	st	X+, r19
     616:	4d 93       	st	X+, r20
     618:	5c 93       	st	X, r21
     61a:	1f 97       	sbiw	r26, 0x0f	; 15
    Kalman->bias += K[1] * y;
     61c:	6f 2d       	mov	r22, r15
     61e:	7e 2d       	mov	r23, r14
     620:	8d 2d       	mov	r24, r13
     622:	9c 2d       	mov	r25, r12
     624:	a5 01       	movw	r20, r10
     626:	94 01       	movw	r18, r8
     628:	0e 94 05 0a 	call	0x140a	; 0x140a <__mulsi3>
     62c:	dc 01       	movw	r26, r24
     62e:	cb 01       	movw	r24, r22
     630:	29 89       	ldd	r18, Y+17	; 0x11
     632:	3a 89       	ldd	r19, Y+18	; 0x12
     634:	4b 89       	ldd	r20, Y+19	; 0x13
     636:	5c 89       	ldd	r21, Y+20	; 0x14
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	a4 1f       	adc	r26, r20
     63e:	b5 1f       	adc	r27, r21
     640:	f1 01       	movw	r30, r2
     642:	80 8b       	std	Z+16, r24	; 0x10
     644:	91 8b       	std	Z+17, r25	; 0x11
     646:	a2 8b       	std	Z+18, r26	; 0x12
     648:	b3 8b       	std	Z+19, r27	; 0x13

    f64 P00_temp = Kalman->P[0][0];
    f64 P01_temp = Kalman->P[0][1];

    Kalman->P[0][0] -= K[0] * P00_temp;
     64a:	c3 01       	movw	r24, r6
     64c:	b2 01       	movw	r22, r4
     64e:	20 2f       	mov	r18, r16
     650:	31 2f       	mov	r19, r17
     652:	4a 8d       	ldd	r20, Y+26	; 0x1a
     654:	59 8d       	ldd	r21, Y+25	; 0x19
     656:	0e 94 05 0a 	call	0x140a	; 0x140a <__mulsi3>
     65a:	dc 01       	movw	r26, r24
     65c:	cb 01       	movw	r24, r22
     65e:	a3 01       	movw	r20, r6
     660:	92 01       	movw	r18, r4
     662:	28 1b       	sub	r18, r24
     664:	39 0b       	sbc	r19, r25
     666:	4a 0b       	sbc	r20, r26
     668:	5b 0b       	sbc	r21, r27
     66a:	f1 01       	movw	r30, r2
     66c:	24 8b       	std	Z+20, r18	; 0x14
     66e:	35 8b       	std	Z+21, r19	; 0x15
     670:	46 8b       	std	Z+22, r20	; 0x16
     672:	57 8b       	std	Z+23, r21	; 0x17
    Kalman->P[0][1] -= K[0] * P01_temp;
     674:	6d 81       	ldd	r22, Y+5	; 0x05
     676:	7e 81       	ldd	r23, Y+6	; 0x06
     678:	8f 81       	ldd	r24, Y+7	; 0x07
     67a:	98 85       	ldd	r25, Y+8	; 0x08
     67c:	20 2f       	mov	r18, r16
     67e:	31 2f       	mov	r19, r17
     680:	4a 8d       	ldd	r20, Y+26	; 0x1a
     682:	59 8d       	ldd	r21, Y+25	; 0x19
     684:	0e 94 05 0a 	call	0x140a	; 0x140a <__mulsi3>
     688:	dc 01       	movw	r26, r24
     68a:	cb 01       	movw	r24, r22
     68c:	0d 81       	ldd	r16, Y+5	; 0x05
     68e:	1e 81       	ldd	r17, Y+6	; 0x06
     690:	2f 81       	ldd	r18, Y+7	; 0x07
     692:	38 85       	ldd	r19, Y+8	; 0x08
     694:	08 1b       	sub	r16, r24
     696:	19 0b       	sbc	r17, r25
     698:	2a 0b       	sbc	r18, r26
     69a:	3b 0b       	sbc	r19, r27
     69c:	f1 01       	movw	r30, r2
     69e:	00 8f       	std	Z+24, r16	; 0x18
     6a0:	11 8f       	std	Z+25, r17	; 0x19
     6a2:	22 8f       	std	Z+26, r18	; 0x1a
     6a4:	33 8f       	std	Z+27, r19	; 0x1b
    Kalman->P[1][0] -= K[1] * P00_temp;
     6a6:	c3 01       	movw	r24, r6
     6a8:	b2 01       	movw	r22, r4
     6aa:	2f 2d       	mov	r18, r15
     6ac:	3e 2d       	mov	r19, r14
     6ae:	4d 2d       	mov	r20, r13
     6b0:	5c 2d       	mov	r21, r12
     6b2:	0e 94 05 0a 	call	0x140a	; 0x140a <__mulsi3>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	09 85       	ldd	r16, Y+9	; 0x09
     6bc:	1a 85       	ldd	r17, Y+10	; 0x0a
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	08 1b       	sub	r16, r24
     6c4:	19 0b       	sbc	r17, r25
     6c6:	2a 0b       	sbc	r18, r26
     6c8:	3b 0b       	sbc	r19, r27
     6ca:	f1 01       	movw	r30, r2
     6cc:	04 8f       	std	Z+28, r16	; 0x1c
     6ce:	15 8f       	std	Z+29, r17	; 0x1d
     6d0:	26 8f       	std	Z+30, r18	; 0x1e
     6d2:	37 8f       	std	Z+31, r19	; 0x1f
    Kalman->P[1][1] -= K[1] * P01_temp;
     6d4:	6d 81       	ldd	r22, Y+5	; 0x05
     6d6:	7e 81       	ldd	r23, Y+6	; 0x06
     6d8:	8f 81       	ldd	r24, Y+7	; 0x07
     6da:	98 85       	ldd	r25, Y+8	; 0x08
     6dc:	2f 2d       	mov	r18, r15
     6de:	3e 2d       	mov	r19, r14
     6e0:	0e 94 05 0a 	call	0x140a	; 0x140a <__mulsi3>
     6e4:	dc 01       	movw	r26, r24
     6e6:	cb 01       	movw	r24, r22
     6e8:	0d 85       	ldd	r16, Y+13	; 0x0d
     6ea:	1e 85       	ldd	r17, Y+14	; 0x0e
     6ec:	2f 85       	ldd	r18, Y+15	; 0x0f
     6ee:	38 89       	ldd	r19, Y+16	; 0x10
     6f0:	08 1b       	sub	r16, r24
     6f2:	19 0b       	sbc	r17, r25
     6f4:	2a 0b       	sbc	r18, r26
     6f6:	3b 0b       	sbc	r19, r27
     6f8:	f1 01       	movw	r30, r2
     6fa:	00 a3       	lds	r16, 0x50
     6fc:	11 a3       	lds	r17, 0x51
     6fe:	22 a3       	lds	r18, 0x52
     700:	33 a3       	lds	r19, 0x53

    return Kalman->angle;
}
     702:	69 81       	ldd	r22, Y+1	; 0x01
     704:	7a 81       	ldd	r23, Y+2	; 0x02
     706:	8b 81       	ldd	r24, Y+3	; 0x03
     708:	9c 81       	ldd	r25, Y+4	; 0x04
     70a:	6a 96       	adiw	r28, 0x1a	; 26
     70c:	0f b6       	in	r0, 0x3f	; 63
     70e:	f8 94       	cli
     710:	de bf       	out	0x3e, r29	; 62
     712:	0f be       	out	0x3f, r0	; 63
     714:	cd bf       	out	0x3d, r28	; 61
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	1f 91       	pop	r17
     71c:	0f 91       	pop	r16
     71e:	ff 90       	pop	r15
     720:	ef 90       	pop	r14
     722:	df 90       	pop	r13
     724:	cf 90       	pop	r12
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	7f 90       	pop	r7
     730:	6f 90       	pop	r6
     732:	5f 90       	pop	r5
     734:	4f 90       	pop	r4
     736:	3f 90       	pop	r3
     738:	2f 90       	pop	r2
     73a:	08 95       	ret

0000073c <MPU6050_Read_All>:
  * accelerometer, gyroscope, temperature, and Kalman filter angles. The function relies on a timer
  * (in this case, TIMER0_GetTick()) to calculate the time difference for the Kalman filter.
  */

void MPU6050_Read_All(MPU6050_t *DataStruct)
{
     73c:	2f 92       	push	r2
     73e:	3f 92       	push	r3
     740:	4f 92       	push	r4
     742:	5f 92       	push	r5
     744:	6f 92       	push	r6
     746:	7f 92       	push	r7
     748:	8f 92       	push	r8
     74a:	9f 92       	push	r9
     74c:	af 92       	push	r10
     74e:	bf 92       	push	r11
     750:	cf 92       	push	r12
     752:	df 92       	push	r13
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	62 97       	sbiw	r28, 0x12	; 18
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	5c 01       	movw	r10, r24

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    //HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
    /* I2C READ FROM MEMORY WITH ADDRESS ACCEL_XOUT_H_REG THE OUTPUT IN Rec_Data */////////////////////////////////////////////////////////
	I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_H_REG, Rec_Data, 14);
     772:	80 ed       	ldi	r24, 0xD0	; 208
     774:	6b e3       	ldi	r22, 0x3B	; 59
     776:	ae 01       	movw	r20, r28
     778:	4f 5f       	subi	r20, 0xFF	; 255
     77a:	5f 4f       	sbci	r21, 0xFF	; 255
     77c:	2e e0       	ldi	r18, 0x0E	; 14
     77e:	0e 94 35 06 	call	0xc6a	; 0xc6a <I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (s16) (Rec_Data[0] << 8 | Rec_Data[1]);
     782:	99 81       	ldd	r25, Y+1	; 0x01
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	4a 81       	ldd	r20, Y+2	; 0x02
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	48 2b       	or	r20, r24
     78c:	59 2b       	or	r21, r25
     78e:	f5 01       	movw	r30, r10
     790:	51 83       	std	Z+1, r21	; 0x01
     792:	40 83       	st	Z, r20
    DataStruct->Accel_Y_RAW = (s16) (Rec_Data[2] << 8 | Rec_Data[3]);
     794:	9b 81       	ldd	r25, Y+3	; 0x03
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	6c 81       	ldd	r22, Y+4	; 0x04
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	8c 01       	movw	r16, r24
     79e:	06 2b       	or	r16, r22
     7a0:	17 2b       	or	r17, r23
     7a2:	13 83       	std	Z+3, r17	; 0x03
     7a4:	02 83       	std	Z+2, r16	; 0x02
    DataStruct->Accel_Z_RAW = (s16) (Rec_Data[4] << 8 | Rec_Data[5]);
     7a6:	9d 81       	ldd	r25, Y+5	; 0x05
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	6e 81       	ldd	r22, Y+6	; 0x06
     7ac:	70 e0       	ldi	r23, 0x00	; 0
     7ae:	6c 01       	movw	r12, r24
     7b0:	c6 2a       	or	r12, r22
     7b2:	d7 2a       	or	r13, r23
     7b4:	d5 82       	std	Z+5, r13	; 0x05
     7b6:	c4 82       	std	Z+4, r12	; 0x04
    temp = (s16) (Rec_Data[6] << 8 | Rec_Data[7]);
     7b8:	3f 81       	ldd	r19, Y+7	; 0x07
     7ba:	20 e0       	ldi	r18, 0x00	; 0
     7bc:	88 85       	ldd	r24, Y+8	; 0x08
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	79 01       	movw	r14, r18
     7c2:	e8 2a       	or	r14, r24
     7c4:	f9 2a       	or	r15, r25
    DataStruct->Gyro_X_RAW = (s16) (Rec_Data[8] << 8 | Rec_Data[9]);
     7c6:	39 85       	ldd	r19, Y+9	; 0x09
     7c8:	20 e0       	ldi	r18, 0x00	; 0
     7ca:	8a 85       	ldd	r24, Y+10	; 0x0a
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	49 01       	movw	r8, r18
     7d0:	88 2a       	or	r8, r24
     7d2:	99 2a       	or	r9, r25
     7d4:	93 8a       	std	Z+19, r9	; 0x13
     7d6:	82 8a       	std	Z+18, r8	; 0x12
    DataStruct->Gyro_Y_RAW = (s16) (Rec_Data[10] << 8 | Rec_Data[11]);
     7d8:	3b 85       	ldd	r19, Y+11	; 0x0b
     7da:	20 e0       	ldi	r18, 0x00	; 0
     7dc:	8c 85       	ldd	r24, Y+12	; 0x0c
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	19 01       	movw	r2, r18
     7e2:	28 2a       	or	r2, r24
     7e4:	39 2a       	or	r3, r25
     7e6:	35 8a       	std	Z+21, r3	; 0x15
     7e8:	24 8a       	std	Z+20, r2	; 0x14
    DataStruct->Gyro_Z_RAW = (s16) (Rec_Data[12] << 8 | Rec_Data[13]);
     7ea:	3d 85       	ldd	r19, Y+13	; 0x0d
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	8e 85       	ldd	r24, Y+14	; 0x0e
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	29 01       	movw	r4, r18
     7f4:	48 2a       	or	r4, r24
     7f6:	59 2a       	or	r5, r25
     7f8:	57 8a       	std	Z+23, r5	; 0x17
     7fa:	46 8a       	std	Z+22, r4	; 0x16

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
     7fc:	ba 01       	movw	r22, r20
     7fe:	88 27       	eor	r24, r24
     800:	77 fd       	sbrc	r23, 7
     802:	80 95       	com	r24
     804:	98 2f       	mov	r25, r24
     806:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatsisf>
     80a:	20 e0       	ldi	r18, 0x00	; 0
     80c:	30 e0       	ldi	r19, 0x00	; 0
     80e:	40 e8       	ldi	r20, 0x80	; 128
     810:	58 e3       	ldi	r21, 0x38	; 56
     812:	0e 94 48 09 	call	0x1290	; 0x1290 <__mulsf3>
     816:	0e 94 35 08 	call	0x106a	; 0x106a <__fixsfsi>
     81a:	dc 01       	movw	r26, r24
     81c:	cb 01       	movw	r24, r22
     81e:	f5 01       	movw	r30, r10
     820:	86 83       	std	Z+6, r24	; 0x06
     822:	97 83       	std	Z+7, r25	; 0x07
     824:	a0 87       	std	Z+8, r26	; 0x08
     826:	b1 87       	std	Z+9, r27	; 0x09
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
     828:	b8 01       	movw	r22, r16
     82a:	88 27       	eor	r24, r24
     82c:	77 fd       	sbrc	r23, 7
     82e:	80 95       	com	r24
     830:	98 2f       	mov	r25, r24
     832:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatsisf>
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	40 e8       	ldi	r20, 0x80	; 128
     83c:	58 e3       	ldi	r21, 0x38	; 56
     83e:	0e 94 48 09 	call	0x1290	; 0x1290 <__mulsf3>
     842:	0e 94 35 08 	call	0x106a	; 0x106a <__fixsfsi>
     846:	dc 01       	movw	r26, r24
     848:	cb 01       	movw	r24, r22
     84a:	f5 01       	movw	r30, r10
     84c:	82 87       	std	Z+10, r24	; 0x0a
     84e:	93 87       	std	Z+11, r25	; 0x0b
     850:	a4 87       	std	Z+12, r26	; 0x0c
     852:	b5 87       	std	Z+13, r27	; 0x0d
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
     854:	b6 01       	movw	r22, r12
     856:	88 27       	eor	r24, r24
     858:	77 fd       	sbrc	r23, 7
     85a:	80 95       	com	r24
     85c:	98 2f       	mov	r25, r24
     85e:	22 e5       	ldi	r18, 0x52	; 82
     860:	38 e3       	ldi	r19, 0x38	; 56
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	50 e0       	ldi	r21, 0x00	; 0
     866:	0e 94 24 0a 	call	0x1448	; 0x1448 <__divmodsi4>
     86a:	f5 01       	movw	r30, r10
     86c:	26 87       	std	Z+14, r18	; 0x0e
     86e:	37 87       	std	Z+15, r19	; 0x0f
     870:	40 8b       	std	Z+16, r20	; 0x10
     872:	51 8b       	std	Z+17, r21	; 0x11
    DataStruct->Temperature = (f32) ((s16) temp / (f32) 340.0 + (f32) 36.53);
     874:	b7 01       	movw	r22, r14
     876:	88 27       	eor	r24, r24
     878:	77 fd       	sbrc	r23, 7
     87a:	80 95       	com	r24
     87c:	98 2f       	mov	r25, r24
     87e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatsisf>
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	4a ea       	ldi	r20, 0xAA	; 170
     888:	53 e4       	ldi	r21, 0x43	; 67
     88a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__divsf3>
     88e:	28 eb       	ldi	r18, 0xB8	; 184
     890:	3e e1       	ldi	r19, 0x1E	; 30
     892:	42 e1       	ldi	r20, 0x12	; 18
     894:	52 e4       	ldi	r21, 0x42	; 66
     896:	0e 94 03 07 	call	0xe06	; 0xe06 <__addsf3>
     89a:	dc 01       	movw	r26, r24
     89c:	cb 01       	movw	r24, r22
     89e:	f5 01       	movw	r30, r10
     8a0:	84 a3       	lds	r24, 0x54
     8a2:	95 a3       	lds	r25, 0x55
     8a4:	a6 a3       	lds	r26, 0x56
     8a6:	b7 a3       	lds	r27, 0x57
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
     8a8:	b4 01       	movw	r22, r8
     8aa:	88 27       	eor	r24, r24
     8ac:	77 fd       	sbrc	r23, 7
     8ae:	80 95       	com	r24
     8b0:	98 2f       	mov	r25, r24
     8b2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatsisf>
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	43 e0       	ldi	r20, 0x03	; 3
     8bc:	53 e4       	ldi	r21, 0x43	; 67
     8be:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__divsf3>
     8c2:	0e 94 35 08 	call	0x106a	; 0x106a <__fixsfsi>
     8c6:	dc 01       	movw	r26, r24
     8c8:	cb 01       	movw	r24, r22
     8ca:	f5 01       	movw	r30, r10
     8cc:	80 8f       	std	Z+24, r24	; 0x18
     8ce:	91 8f       	std	Z+25, r25	; 0x19
     8d0:	a2 8f       	std	Z+26, r26	; 0x1a
     8d2:	b3 8f       	std	Z+27, r27	; 0x1b
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
     8d4:	b1 01       	movw	r22, r2
     8d6:	88 27       	eor	r24, r24
     8d8:	77 fd       	sbrc	r23, 7
     8da:	80 95       	com	r24
     8dc:	98 2f       	mov	r25, r24
     8de:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatsisf>
     8e2:	20 e0       	ldi	r18, 0x00	; 0
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	43 e0       	ldi	r20, 0x03	; 3
     8e8:	53 e4       	ldi	r21, 0x43	; 67
     8ea:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__divsf3>
     8ee:	0e 94 35 08 	call	0x106a	; 0x106a <__fixsfsi>
     8f2:	dc 01       	movw	r26, r24
     8f4:	cb 01       	movw	r24, r22
     8f6:	f5 01       	movw	r30, r10
     8f8:	84 8f       	std	Z+28, r24	; 0x1c
     8fa:	95 8f       	std	Z+29, r25	; 0x1d
     8fc:	a6 8f       	std	Z+30, r26	; 0x1e
     8fe:	b7 8f       	std	Z+31, r27	; 0x1f
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
     900:	b2 01       	movw	r22, r4
     902:	88 27       	eor	r24, r24
     904:	77 fd       	sbrc	r23, 7
     906:	80 95       	com	r24
     908:	98 2f       	mov	r25, r24
     90a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatsisf>
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	43 e0       	ldi	r20, 0x03	; 3
     914:	53 e4       	ldi	r21, 0x43	; 67
     916:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__divsf3>
     91a:	0e 94 35 08 	call	0x106a	; 0x106a <__fixsfsi>
     91e:	dc 01       	movw	r26, r24
     920:	cb 01       	movw	r24, r22
     922:	f5 01       	movw	r30, r10
     924:	80 a3       	lds	r24, 0x50
     926:	91 a3       	lds	r25, 0x51
     928:	a2 a3       	lds	r26, 0x52
     92a:	b3 a3       	lds	r27, 0x53

    // Kalman angle solve
    /* using Timer0 to get a tick value in Seconds */
    f64 dt = (f64) (TIMER0_GetTick() - timer);
     92c:	0e 94 b4 06 	call	0xd68	; 0xd68 <TIMER0_GetTick>
     930:	ab 01       	movw	r20, r22
     932:	bc 01       	movw	r22, r24
     934:	80 91 c3 00 	lds	r24, 0x00C3
     938:	90 91 c4 00 	lds	r25, 0x00C4
     93c:	a0 e0       	ldi	r26, 0x00	; 0
     93e:	b0 e0       	ldi	r27, 0x00	; 0
     940:	8a 01       	movw	r16, r20
     942:	9b 01       	movw	r18, r22
     944:	08 1b       	sub	r16, r24
     946:	19 0b       	sbc	r17, r25
     948:	2a 0b       	sbc	r18, r26
     94a:	3b 0b       	sbc	r19, r27
     94c:	0f 87       	std	Y+15, r16	; 0x0f
     94e:	18 8b       	std	Y+16, r17	; 0x10
     950:	29 8b       	std	Y+17, r18	; 0x11
     952:	3a 8b       	std	Y+18, r19	; 0x12
    timer = TIMER0_GetTick();
     954:	0e 94 b4 06 	call	0xd68	; 0xd68 <TIMER0_GetTick>
     958:	dc 01       	movw	r26, r24
     95a:	cb 01       	movw	r24, r22
     95c:	90 93 c4 00 	sts	0x00C4, r25
     960:	80 93 c3 00 	sts	0x00C3, r24
    f64 roll;
    f64 roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
     964:	f5 01       	movw	r30, r10
     966:	80 80       	ld	r8, Z
     968:	91 80       	ldd	r9, Z+1	; 0x01
     96a:	24 80       	ldd	r2, Z+4	; 0x04
     96c:	35 80       	ldd	r3, Z+5	; 0x05
     96e:	88 9c       	mul	r8, r8
     970:	b0 01       	movw	r22, r0
     972:	89 9c       	mul	r8, r9
     974:	70 0d       	add	r23, r0
     976:	98 9c       	mul	r9, r8
     978:	70 0d       	add	r23, r0
     97a:	11 24       	eor	r1, r1
     97c:	22 9c       	mul	r2, r2
     97e:	c0 01       	movw	r24, r0
     980:	23 9c       	mul	r2, r3
     982:	90 0d       	add	r25, r0
     984:	32 9c       	mul	r3, r2
     986:	90 0d       	add	r25, r0
     988:	11 24       	eor	r1, r1
     98a:	68 0f       	add	r22, r24
     98c:	79 1f       	adc	r23, r25
    // Kalman angle solve
    /* using Timer0 to get a tick value in Seconds */
    f64 dt = (f64) (TIMER0_GetTick() - timer);
    timer = TIMER0_GetTick();
    f64 roll;
    f64 roll_sqrt = sqrt(
     98e:	88 27       	eor	r24, r24
     990:	77 fd       	sbrc	r23, 7
     992:	80 95       	com	r24
     994:	98 2f       	mov	r25, r24
     996:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatsisf>
     99a:	0e 94 af 09 	call	0x135e	; 0x135e <sqrt>
     99e:	0e 94 35 08 	call	0x106a	; 0x106a <__fixsfsi>
     9a2:	c6 2e       	mov	r12, r22
     9a4:	f7 2e       	mov	r15, r23
     9a6:	08 2f       	mov	r16, r24
     9a8:	19 2f       	mov	r17, r25
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
    if (roll_sqrt != 0.0) {
     9aa:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatsisf>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	a9 01       	movw	r20, r18
     9b4:	0e 94 c9 07 	call	0xf92	; 0xf92 <__cmpsf2>
     9b8:	88 23       	and	r24, r24
     9ba:	01 f1       	breq	.+64     	; 0x9fc <__stack+0x19d>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
     9bc:	f5 01       	movw	r30, r10
     9be:	62 81       	ldd	r22, Z+2	; 0x02
     9c0:	73 81       	ldd	r23, Z+3	; 0x03
     9c2:	88 27       	eor	r24, r24
     9c4:	77 fd       	sbrc	r23, 7
     9c6:	80 95       	com	r24
     9c8:	98 2f       	mov	r25, r24
     9ca:	2c 2d       	mov	r18, r12
     9cc:	3f 2d       	mov	r19, r15
     9ce:	40 2f       	mov	r20, r16
     9d0:	51 2f       	mov	r21, r17
     9d2:	0e 94 24 0a 	call	0x1448	; 0x1448 <__divmodsi4>
     9d6:	ca 01       	movw	r24, r20
     9d8:	b9 01       	movw	r22, r18
     9da:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatsisf>
     9de:	0e 94 a1 07 	call	0xf42	; 0xf42 <atan>
     9e2:	21 ee       	ldi	r18, 0xE1	; 225
     9e4:	3e e2       	ldi	r19, 0x2E	; 46
     9e6:	45 e6       	ldi	r20, 0x65	; 101
     9e8:	52 e4       	ldi	r21, 0x42	; 66
     9ea:	0e 94 48 09 	call	0x1290	; 0x1290 <__mulsf3>
     9ee:	0e 94 35 08 	call	0x106a	; 0x106a <__fixsfsi>
     9f2:	46 2e       	mov	r4, r22
     9f4:	57 2e       	mov	r5, r23
     9f6:	68 2e       	mov	r6, r24
     9f8:	79 2e       	mov	r7, r25
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <__stack+0x1a3>
    } else {
        roll = 0.0;
     9fc:	44 24       	eor	r4, r4
     9fe:	55 24       	eor	r5, r5
     a00:	32 01       	movw	r6, r4
    }
    f64 pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
     a02:	66 27       	eor	r22, r22
     a04:	77 27       	eor	r23, r23
     a06:	68 19       	sub	r22, r8
     a08:	79 09       	sbc	r23, r9
     a0a:	88 27       	eor	r24, r24
     a0c:	77 fd       	sbrc	r23, 7
     a0e:	80 95       	com	r24
     a10:	98 2f       	mov	r25, r24
     a12:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatsisf>
     a16:	6b 01       	movw	r12, r22
     a18:	7c 01       	movw	r14, r24
     a1a:	b1 01       	movw	r22, r2
     a1c:	88 27       	eor	r24, r24
     a1e:	77 fd       	sbrc	r23, 7
     a20:	80 95       	com	r24
     a22:	98 2f       	mov	r25, r24
     a24:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatsisf>
     a28:	9b 01       	movw	r18, r22
     a2a:	ac 01       	movw	r20, r24
     a2c:	c7 01       	movw	r24, r14
     a2e:	b6 01       	movw	r22, r12
     a30:	0e 94 76 07 	call	0xeec	; 0xeec <atan2>
     a34:	21 ee       	ldi	r18, 0xE1	; 225
     a36:	3e e2       	ldi	r19, 0x2E	; 46
     a38:	45 e6       	ldi	r20, 0x65	; 101
     a3a:	52 e4       	ldi	r21, 0x42	; 66
     a3c:	0e 94 48 09 	call	0x1290	; 0x1290 <__mulsf3>
     a40:	0e 94 35 08 	call	0x106a	; 0x106a <__fixsfsi>
     a44:	46 2f       	mov	r20, r22
     a46:	57 2f       	mov	r21, r23
     a48:	68 2f       	mov	r22, r24
     a4a:	79 2f       	mov	r23, r25
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
     a4c:	46 3a       	cpi	r20, 0xA6	; 166
     a4e:	ff ef       	ldi	r31, 0xFF	; 255
     a50:	5f 07       	cpc	r21, r31
     a52:	ff ef       	ldi	r31, 0xFF	; 255
     a54:	6f 07       	cpc	r22, r31
     a56:	ff ef       	ldi	r31, 0xFF	; 255
     a58:	7f 07       	cpc	r23, r31
     a5a:	54 f4       	brge	.+20     	; 0xa70 <__stack+0x211>
     a5c:	f5 01       	movw	r30, r10
     a5e:	84 a5       	lds	r24, 0x64
     a60:	95 a5       	lds	r25, 0x65
     a62:	a6 a5       	lds	r26, 0x66
     a64:	b7 a5       	lds	r27, 0x67
     a66:	8b 35       	cpi	r24, 0x5B	; 91
     a68:	91 05       	cpc	r25, r1
     a6a:	a1 05       	cpc	r26, r1
     a6c:	b1 05       	cpc	r27, r1
     a6e:	94 f4       	brge	.+36     	; 0xa94 <__stack+0x235>
     a70:	4b 35       	cpi	r20, 0x5B	; 91
     a72:	51 05       	cpc	r21, r1
     a74:	61 05       	cpc	r22, r1
     a76:	71 05       	cpc	r23, r1
     a78:	dc f0       	brlt	.+54     	; 0xab0 <__stack+0x251>
     a7a:	f5 01       	movw	r30, r10
     a7c:	84 a5       	lds	r24, 0x64
     a7e:	95 a5       	lds	r25, 0x65
     a80:	a6 a5       	lds	r26, 0x66
     a82:	b7 a5       	lds	r27, 0x67
     a84:	86 3a       	cpi	r24, 0xA6	; 166
     a86:	ff ef       	ldi	r31, 0xFF	; 255
     a88:	9f 07       	cpc	r25, r31
     a8a:	ff ef       	ldi	r31, 0xFF	; 255
     a8c:	af 07       	cpc	r26, r31
     a8e:	ff ef       	ldi	r31, 0xFF	; 255
     a90:	bf 07       	cpc	r27, r31
     a92:	74 f4       	brge	.+28     	; 0xab0 <__stack+0x251>
        KalmanY.angle = pitch;
     a94:	40 93 7c 00 	sts	0x007C, r20
     a98:	50 93 7d 00 	sts	0x007D, r21
     a9c:	60 93 7e 00 	sts	0x007E, r22
     aa0:	70 93 7f 00 	sts	0x007F, r23
        DataStruct->KalmanAngleY = pitch;
     aa4:	f5 01       	movw	r30, r10
     aa6:	44 a7       	lds	r20, 0x74
     aa8:	55 a7       	lds	r21, 0x75
     aaa:	66 a7       	lds	r22, 0x76
     aac:	77 a7       	lds	r23, 0x77
     aae:	14 c0       	rjmp	.+40     	; 0xad8 <__stack+0x279>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
     ab0:	f5 01       	movw	r30, r10
     ab2:	04 8d       	ldd	r16, Z+28	; 0x1c
     ab4:	15 8d       	ldd	r17, Z+29	; 0x1d
     ab6:	26 8d       	ldd	r18, Z+30	; 0x1e
     ab8:	37 8d       	ldd	r19, Z+31	; 0x1f
     aba:	80 e7       	ldi	r24, 0x70	; 112
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	cf 84       	ldd	r12, Y+15	; 0x0f
     ac0:	d8 88       	ldd	r13, Y+16	; 0x10
     ac2:	e9 88       	ldd	r14, Y+17	; 0x11
     ac4:	fa 88       	ldd	r15, Y+18	; 0x12
     ac6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Kalman_getAngle>
     aca:	dc 01       	movw	r26, r24
     acc:	cb 01       	movw	r24, r22
     ace:	f5 01       	movw	r30, r10
     ad0:	84 a7       	lds	r24, 0x74
     ad2:	95 a7       	lds	r25, 0x75
     ad4:	a6 a7       	lds	r26, 0x76
     ad6:	b7 a7       	lds	r27, 0x77
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
     ad8:	f5 01       	movw	r30, r10
     ada:	64 a5       	lds	r22, 0x64
     adc:	75 a5       	lds	r23, 0x65
     ade:	86 a5       	lds	r24, 0x66
     ae0:	97 a5       	lds	r25, 0x67
     ae2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <__floatsisf>
     ae6:	9f 77       	andi	r25, 0x7F	; 127
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	44 eb       	ldi	r20, 0xB4	; 180
     aee:	52 e4       	ldi	r21, 0x42	; 66
     af0:	0e 94 3d 09 	call	0x127a	; 0x127a <__gesf2>
     af4:	18 16       	cp	r1, r24
     af6:	84 f4       	brge	.+32     	; 0xb18 <__stack+0x2b9>
        DataStruct->Gx = -DataStruct->Gx;
     af8:	f5 01       	movw	r30, r10
     afa:	80 8d       	ldd	r24, Z+24	; 0x18
     afc:	91 8d       	ldd	r25, Z+25	; 0x19
     afe:	a2 8d       	ldd	r26, Z+26	; 0x1a
     b00:	b3 8d       	ldd	r27, Z+27	; 0x1b
     b02:	b0 95       	com	r27
     b04:	a0 95       	com	r26
     b06:	90 95       	com	r25
     b08:	81 95       	neg	r24
     b0a:	9f 4f       	sbci	r25, 0xFF	; 255
     b0c:	af 4f       	sbci	r26, 0xFF	; 255
     b0e:	bf 4f       	sbci	r27, 0xFF	; 255
     b10:	80 8f       	std	Z+24, r24	; 0x18
     b12:	91 8f       	std	Z+25, r25	; 0x19
     b14:	a2 8f       	std	Z+26, r26	; 0x1a
     b16:	b3 8f       	std	Z+27, r27	; 0x1b
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
     b18:	f5 01       	movw	r30, r10
     b1a:	04 8d       	ldd	r16, Z+28	; 0x1c
     b1c:	15 8d       	ldd	r17, Z+29	; 0x1d
     b1e:	26 8d       	ldd	r18, Z+30	; 0x1e
     b20:	37 8d       	ldd	r19, Z+31	; 0x1f
     b22:	84 e9       	ldi	r24, 0x94	; 148
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	b3 01       	movw	r22, r6
     b28:	a2 01       	movw	r20, r4
     b2a:	cf 84       	ldd	r12, Y+15	; 0x0f
     b2c:	d8 88       	ldd	r13, Y+16	; 0x10
     b2e:	e9 88       	ldd	r14, Y+17	; 0x11
     b30:	fa 88       	ldd	r15, Y+18	; 0x12
     b32:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <Kalman_getAngle>
     b36:	dc 01       	movw	r26, r24
     b38:	cb 01       	movw	r24, r22
     b3a:	f5 01       	movw	r30, r10
     b3c:	80 a7       	lds	r24, 0x70
     b3e:	91 a7       	lds	r25, 0x71
     b40:	a2 a7       	lds	r26, 0x72
     b42:	b3 a7       	lds	r27, 0x73

}
     b44:	62 96       	adiw	r28, 0x12	; 18
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	df 90       	pop	r13
     b5e:	cf 90       	pop	r12
     b60:	bf 90       	pop	r11
     b62:	af 90       	pop	r10
     b64:	9f 90       	pop	r9
     b66:	8f 90       	pop	r8
     b68:	7f 90       	pop	r7
     b6a:	6f 90       	pop	r6
     b6c:	5f 90       	pop	r5
     b6e:	4f 90       	pop	r4
     b70:	3f 90       	pop	r3
     b72:	2f 90       	pop	r2
     b74:	08 95       	ret

00000b76 <INT0_Init>:

#include "EXTI0.h"

void INT0_Init(void)
{
	SREG  &= ~(1<<7);                   // Disable interrupts by clearing I-bit
     b76:	8f b7       	in	r24, 0x3f	; 63
     b78:	8f 77       	andi	r24, 0x7F	; 127
     b7a:	8f bf       	out	0x3f, r24	; 63
	DDRD  &= (~(1<<PD2));               // Configure INT0/PD2 as input pin
     b7c:	8a 98       	cbi	0x11, 2	; 17
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
     b7e:	8b b7       	in	r24, 0x3b	; 59
     b80:	80 64       	ori	r24, 0x40	; 64
     b82:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
     b84:	85 b7       	in	r24, 0x35	; 53
     b86:	83 60       	ori	r24, 0x03	; 3
     b88:	85 bf       	out	0x35, r24	; 53
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
     b8a:	8f b7       	in	r24, 0x3f	; 63
     b8c:	80 68       	ori	r24, 0x80	; 128
     b8e:	8f bf       	out	0x3f, r24	; 63
     b90:	08 95       	ret

00000b92 <INT1_Init>:
#include "EXTI1.h"

/* External INT1 enable and configuration function */
void INT1_Init(void)
{
	SREG  &= ~(1<<7);      // Disable interrupts by clearing I-bit
     b92:	8f b7       	in	r24, 0x3f	; 63
     b94:	8f 77       	andi	r24, 0x7F	; 127
     b96:	8f bf       	out	0x3f, r24	; 63
	DDRD  &= (~(1<<PD3));  // Configure INT1/PD3 as input pin
     b98:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1<<PD3);     // Enable the internal pull up resistor at PD3 pin
     b9a:	93 9a       	sbi	0x12, 3	; 18
	GICR  |= (1<<INT1);    // Enable external interrupt pin INT1
     b9c:	8b b7       	in	r24, 0x3b	; 59
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8b bf       	out	0x3b, r24	; 59
	// Trigger INT1 with the falling edge
	MCUCR |= (1<<ISC11);
     ba2:	85 b7       	in	r24, 0x35	; 53
     ba4:	88 60       	ori	r24, 0x08	; 8
     ba6:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);
     ba8:	85 b7       	in	r24, 0x35	; 53
     baa:	8b 7f       	andi	r24, 0xFB	; 251
     bac:	85 bf       	out	0x35, r24	; 53
	SREG  |= (1<<7);       // Enable interrupts by setting I-bit
     bae:	8f b7       	in	r24, 0x3f	; 63
     bb0:	80 68       	ori	r24, 0x80	; 128
     bb2:	8f bf       	out	0x3f, r24	; 63
}
     bb4:	08 95       	ret

00000bb6 <TWI_init>:
#include "i2c.h"

void TWI_init(void)
{
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
     bb6:	82 e0       	ldi	r24, 0x02	; 2
     bb8:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;
     bba:	11 b8       	out	0x01, r1	; 1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
     bbc:	82 b9       	out	0x02, r24	; 2
	
    TWCR = (1<<TWEN); /* enable TWI */
     bbe:	84 e0       	ldi	r24, 0x04	; 4
     bc0:	86 bf       	out	0x36, r24	; 54
}
     bc2:	08 95       	ret

00000bc4 <TWI_start>:
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     bc4:	84 ea       	ldi	r24, 0xA4	; 164
     bc6:	86 bf       	out	0x36, r24	; 54
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     bc8:	06 b6       	in	r0, 0x36	; 54
     bca:	07 fe       	sbrs	r0, 7
     bcc:	fd cf       	rjmp	.-6      	; 0xbc8 <TWI_start+0x4>
}
     bce:	08 95       	ret

00000bd0 <TWI_stop>:
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     bd0:	84 e9       	ldi	r24, 0x94	; 148
     bd2:	86 bf       	out	0x36, r24	; 54
}
     bd4:	08 95       	ret

00000bd6 <TWI_write>:

void TWI_write(u8 data)
{
    /* Put data On TWI data Register */
    TWDR = data;
     bd6:	83 b9       	out	0x03, r24	; 3
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     bd8:	84 e8       	ldi	r24, 0x84	; 132
     bda:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     bdc:	06 b6       	in	r0, 0x36	; 54
     bde:	07 fe       	sbrs	r0, 7
     be0:	fd cf       	rjmp	.-6      	; 0xbdc <TWI_write+0x6>
}
     be2:	08 95       	ret

00000be4 <TWI_readWithACK>:
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     be4:	84 ec       	ldi	r24, 0xC4	; 196
     be6:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     be8:	06 b6       	in	r0, 0x36	; 54
     bea:	07 fe       	sbrs	r0, 7
     bec:	fd cf       	rjmp	.-6      	; 0xbe8 <TWI_readWithACK+0x4>
    /* Read Data */
    return TWDR;
     bee:	83 b1       	in	r24, 0x03	; 3
}
     bf0:	08 95       	ret

00000bf2 <TWI_readWithNACK>:
{
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     bf2:	84 e8       	ldi	r24, 0x84	; 132
     bf4:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     bf6:	06 b6       	in	r0, 0x36	; 54
     bf8:	07 fe       	sbrs	r0, 7
     bfa:	fd cf       	rjmp	.-6      	; 0xbf6 <TWI_readWithNACK+0x4>
    /* Read Data */
    return TWDR;
     bfc:	83 b1       	in	r24, 0x03	; 3
}
     bfe:	08 95       	ret

00000c00 <TWI_getStatus>:

u8 TWI_getStatus(void)
{
    u8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     c00:	81 b1       	in	r24, 0x01	; 1
    return status;
}
     c02:	88 7f       	andi	r24, 0xF8	; 248
     c04:	08 95       	ret

00000c06 <I2C_Mem_Write>:



u8 I2C_Mem_Write(u8 DeviceAdd, u8 MemAddress, u8 *pData)
{
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	18 2f       	mov	r17, r24
     c10:	06 2f       	mov	r16, r22
     c12:	ea 01       	movw	r28, r20
	/* Generate Start */
	TWI_start();
     c14:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <TWI_start>
	if (TWI_getStatus() != TW_START)
     c18:	0e 94 00 06 	call	0xc00	; 0xc00 <TWI_getStatus>
     c1c:	88 30       	cpi	r24, 0x08	; 8
     c1e:	c9 f4       	brne	.+50     	; 0xc52 <I2C_Mem_Write+0x4c>
	return ERROR;
	
	// Send Slave Address
	TWI_write(DeviceAdd);
     c20:	81 2f       	mov	r24, r17
     c22:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c26:	0e 94 00 06 	call	0xc00	; 0xc00 <TWI_getStatus>
     c2a:	88 31       	cpi	r24, 0x18	; 24
     c2c:	a1 f4       	brne	.+40     	; 0xc56 <I2C_Mem_Write+0x50>
	return ERROR;
	
	// Send Memory Address
	TWI_write(MemAddress);
     c2e:	80 2f       	mov	r24, r16
     c30:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     c34:	0e 94 00 06 	call	0xc00	; 0xc00 <TWI_getStatus>
     c38:	88 32       	cpi	r24, 0x28	; 40
     c3a:	79 f4       	brne	.+30     	; 0xc5a <I2C_Mem_Write+0x54>
	return ERROR;

	// Send Data
	TWI_write(*pData);
     c3c:	88 81       	ld	r24, Y
     c3e:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     c42:	0e 94 00 06 	call	0xc00	; 0xc00 <TWI_getStatus>
     c46:	88 32       	cpi	r24, 0x28	; 40
     c48:	51 f4       	brne	.+20     	; 0xc5e <I2C_Mem_Write+0x58>
	return ERROR;

	/* Send the Stop Bit */
	TWI_stop();
     c4a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <TWI_stop>
	
	return SUCCESS;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	07 c0       	rjmp	.+14     	; 0xc60 <I2C_Mem_Write+0x5a>
u8 I2C_Mem_Write(u8 DeviceAdd, u8 MemAddress, u8 *pData)
{
	/* Generate Start */
	TWI_start();
	if (TWI_getStatus() != TW_START)
	return ERROR;
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	05 c0       	rjmp	.+10     	; 0xc60 <I2C_Mem_Write+0x5a>
	
	// Send Slave Address
	TWI_write(DeviceAdd);
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
	return ERROR;
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	03 c0       	rjmp	.+6      	; 0xc60 <I2C_Mem_Write+0x5a>
	
	// Send Memory Address
	TWI_write(MemAddress);
	if (TWI_getStatus() != TW_MT_DATA_ACK)
	return ERROR;
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	01 c0       	rjmp	.+2      	; 0xc60 <I2C_Mem_Write+0x5a>

	// Send Data
	TWI_write(*pData);
	if (TWI_getStatus() != TW_MT_DATA_ACK)
	return ERROR;
     c5e:	80 e0       	ldi	r24, 0x00	; 0

	/* Send the Stop Bit */
	TWI_stop();
	
	return SUCCESS;
}
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	08 95       	ret

00000c6a <I2C_Mem_Read>:



u8 I2C_Mem_Read(u8 DeviceAdd, u8 MemAddress, u8 *pData, u8 size)
{
     c6a:	af 92       	push	r10
     c6c:	bf 92       	push	r11
     c6e:	cf 92       	push	r12
     c70:	df 92       	push	r13
     c72:	ef 92       	push	r14
     c74:	ff 92       	push	r15
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	c8 2f       	mov	r28, r24
     c7e:	d6 2f       	mov	r29, r22
     c80:	7a 01       	movw	r14, r20
     c82:	12 2f       	mov	r17, r18
	/* Generate Start */
	TWI_start();
     c84:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <TWI_start>
	if (TWI_getStatus() != TW_START)
     c88:	0e 94 00 06 	call	0xc00	; 0xc00 <TWI_getStatus>
     c8c:	88 30       	cpi	r24, 0x08	; 8
     c8e:	e1 f5       	brne	.+120    	; 0xd08 <I2C_Mem_Read+0x9e>
	return ERROR; // Error handling, or return an error code

	// Send Slave Address with Write Bit
	TWI_write(DeviceAdd);
     c90:	8c 2f       	mov	r24, r28
     c92:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c96:	0e 94 00 06 	call	0xc00	; 0xc00 <TWI_getStatus>
     c9a:	88 31       	cpi	r24, 0x18	; 24
     c9c:	b9 f5       	brne	.+110    	; 0xd0c <I2C_Mem_Read+0xa2>
	return ERROR; // Error handling, or return an error code

	// Send Memory Address
	TWI_write(MemAddress);
     c9e:	8d 2f       	mov	r24, r29
     ca0:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     ca4:	0e 94 00 06 	call	0xc00	; 0xc00 <TWI_getStatus>
     ca8:	88 32       	cpi	r24, 0x28	; 40
     caa:	91 f5       	brne	.+100    	; 0xd10 <I2C_Mem_Read+0xa6>
	return ERROR; // Error handling, or return an error code

	// Generate Repeated Start
	TWI_start();
     cac:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <TWI_start>
	if (TWI_getStatus() != TW_REP_START)
     cb0:	0e 94 00 06 	call	0xc00	; 0xc00 <TWI_getStatus>
     cb4:	80 31       	cpi	r24, 0x10	; 16
     cb6:	71 f5       	brne	.+92     	; 0xd14 <I2C_Mem_Read+0xaa>
	return ERROR; // Error handling, or return an error code

	// Send Slave Address with Read Bit
	TWI_write(DeviceAdd | 0x01); // Read mode
     cb8:	8c 2f       	mov	r24, r28
     cba:	81 60       	ori	r24, 0x01	; 1
     cbc:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     cc0:	0e 94 00 06 	call	0xc00	; 0xc00 <TWI_getStatus>
     cc4:	80 34       	cpi	r24, 0x40	; 64
     cc6:	41 f5       	brne	.+80     	; 0xd18 <I2C_Mem_Read+0xae>
	return ERROR; // Error handling, or return an error code

	// Read Data
	for (int i = 0; i < size - 1; ++i) {
     cc8:	c1 2f       	mov	r28, r17
     cca:	d0 e0       	ldi	r29, 0x00	; 0
     ccc:	21 97       	sbiw	r28, 0x01	; 1
     cce:	1c 16       	cp	r1, r28
     cd0:	1d 06       	cpc	r1, r29
     cd2:	74 f4       	brge	.+28     	; 0xcf0 <I2C_Mem_Read+0x86>
     cd4:	57 01       	movw	r10, r14
     cd6:	cc 24       	eor	r12, r12
     cd8:	dd 24       	eor	r13, r13
		pData[i] = TWI_readWithACK();
     cda:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <TWI_readWithACK>
     cde:	f5 01       	movw	r30, r10
     ce0:	81 93       	st	Z+, r24
     ce2:	5f 01       	movw	r10, r30
	TWI_write(DeviceAdd | 0x01); // Read mode
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
	return ERROR; // Error handling, or return an error code

	// Read Data
	for (int i = 0; i < size - 1; ++i) {
     ce4:	08 94       	sec
     ce6:	c1 1c       	adc	r12, r1
     ce8:	d1 1c       	adc	r13, r1
     cea:	cc 16       	cp	r12, r28
     cec:	dd 06       	cpc	r13, r29
     cee:	ac f3       	brlt	.-22     	; 0xcda <I2C_Mem_Read+0x70>
		pData[i] = TWI_readWithACK();
	}
	pData[size - 1] = TWI_readWithNACK(); // Read last byte with NACK
     cf0:	c1 2f       	mov	r28, r17
     cf2:	d0 e0       	ldi	r29, 0x00	; 0
     cf4:	21 97       	sbiw	r28, 0x01	; 1
     cf6:	ce 0d       	add	r28, r14
     cf8:	df 1d       	adc	r29, r15
     cfa:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TWI_readWithNACK>
     cfe:	88 83       	st	Y, r24

	/* Send the Stop Bit */
	TWI_stop();
     d00:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <TWI_stop>
	
	return SUCCESS;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	09 c0       	rjmp	.+18     	; 0xd1a <I2C_Mem_Read+0xb0>
u8 I2C_Mem_Read(u8 DeviceAdd, u8 MemAddress, u8 *pData, u8 size)
{
	/* Generate Start */
	TWI_start();
	if (TWI_getStatus() != TW_START)
	return ERROR; // Error handling, or return an error code
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	07 c0       	rjmp	.+14     	; 0xd1a <I2C_Mem_Read+0xb0>

	// Send Slave Address with Write Bit
	TWI_write(DeviceAdd);
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
	return ERROR; // Error handling, or return an error code
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <I2C_Mem_Read+0xb0>

	// Send Memory Address
	TWI_write(MemAddress);
	if (TWI_getStatus() != TW_MT_DATA_ACK)
	return ERROR; // Error handling, or return an error code
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	03 c0       	rjmp	.+6      	; 0xd1a <I2C_Mem_Read+0xb0>

	// Generate Repeated Start
	TWI_start();
	if (TWI_getStatus() != TW_REP_START)
	return ERROR; // Error handling, or return an error code
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	01 c0       	rjmp	.+2      	; 0xd1a <I2C_Mem_Read+0xb0>

	// Send Slave Address with Read Bit
	TWI_write(DeviceAdd | 0x01); // Read mode
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
	return ERROR; // Error handling, or return an error code
     d18:	80 e0       	ldi	r24, 0x00	; 0

	/* Send the Stop Bit */
	TWI_stop();
	
	return SUCCESS;
}
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	bf 90       	pop	r11
     d2a:	af 90       	pop	r10
     d2c:	08 95       	ret

00000d2e <TIMER0_init_CTC_mode>:

f64 Tick = 0;

void TIMER0_init_CTC_mode()
{
	TCNT0 = 0;    // Set Timer initial value to 0
     d2e:	12 be       	out	0x32, r1	; 50
	OCR0  = 250; // Set Compare Value
     d30:	8a ef       	ldi	r24, 0xFA	; 250
     d32:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
     d34:	89 b7       	in	r24, 0x39	; 57
     d36:	82 60       	ori	r24, 0x02	; 2
     d38:	89 bf       	out	0x39, r24	; 57
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0 
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
     d3a:	8d e8       	ldi	r24, 0x8D	; 141
     d3c:	83 bf       	out	0x33, r24	; 51
}
     d3e:	08 95       	ret

00000d40 <TIMER0_IncTick>:



void TIMER0_IncTick()
{
	Tick++;
     d40:	80 91 b8 00 	lds	r24, 0x00B8
     d44:	90 91 b9 00 	lds	r25, 0x00B9
     d48:	a0 91 ba 00 	lds	r26, 0x00BA
     d4c:	b0 91 bb 00 	lds	r27, 0x00BB
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	a1 1d       	adc	r26, r1
     d54:	b1 1d       	adc	r27, r1
     d56:	80 93 b8 00 	sts	0x00B8, r24
     d5a:	90 93 b9 00 	sts	0x00B9, r25
     d5e:	a0 93 ba 00 	sts	0x00BA, r26
     d62:	b0 93 bb 00 	sts	0x00BB, r27
}
     d66:	08 95       	ret

00000d68 <TIMER0_GetTick>:



f64 TIMER0_GetTick()
{
	return Tick;
     d68:	60 91 b8 00 	lds	r22, 0x00B8
     d6c:	70 91 b9 00 	lds	r23, 0x00B9
     d70:	80 91 ba 00 	lds	r24, 0x00BA
     d74:	90 91 bb 00 	lds	r25, 0x00BB
     d78:	08 95       	ret

00000d7a <UART_init>:
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);
     d7a:	88 e9       	ldi	r24, 0x98	; 152
     d7c:	8a b9       	out	0x0a, r24	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
     d7e:	86 e8       	ldi	r24, 0x86	; 134
     d80:	80 bd       	out	0x20, r24	; 32
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
     d82:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
     d84:	87 e6       	ldi	r24, 0x67	; 103
     d86:	89 b9       	out	0x09, r24	; 9
}
     d88:	08 95       	ret

00000d8a <UART_sendByte>:
	
void UART_sendByte(const u8 data)
{
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     d8a:	5d 9b       	sbis	0x0b, 5	; 11
     d8c:	fe cf       	rjmp	.-4      	; 0xd8a <UART_sendByte>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
     d8e:	8c b9       	out	0x0c, r24	; 12
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
     d90:	08 95       	ret

00000d92 <UART_recieveByte>:

u8 UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     d92:	5f 9b       	sbis	0x0b, 7	; 11
     d94:	fe cf       	rjmp	.-4      	; 0xd92 <UART_recieveByte>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
     d96:	8c b1       	in	r24, 0x0c	; 12
}
     d98:	08 95       	ret

00000d9a <UART_sendString>:

void UART_sendString(const u8 *Str)
{
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	8c 01       	movw	r16, r24
	u8 i = 0;
	while(Str[i] != '\0')
     da2:	fc 01       	movw	r30, r24
     da4:	80 81       	ld	r24, Z
     da6:	88 23       	and	r24, r24
     da8:	51 f0       	breq	.+20     	; 0xdbe <UART_sendString+0x24>
    return UDR;		
}

void UART_sendString(const u8 *Str)
{
	u8 i = 0;
     daa:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     dac:	0e 94 c5 06 	call	0xd8a	; 0xd8a <UART_sendByte>
		i++;
     db0:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_sendString(const u8 *Str)
{
	u8 i = 0;
	while(Str[i] != '\0')
     db2:	f8 01       	movw	r30, r16
     db4:	ec 0f       	add	r30, r28
     db6:	f1 1d       	adc	r31, r1
     db8:	80 81       	ld	r24, Z
     dba:	88 23       	and	r24, r24
     dbc:	b9 f7       	brne	.-18     	; 0xdac <UART_sendString+0x12>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     dbe:	cf 91       	pop	r28
     dc0:	1f 91       	pop	r17
     dc2:	0f 91       	pop	r16
     dc4:	08 95       	ret

00000dc6 <UART_receiveString>:

void UART_receiveString(u8 *Str)
{
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	8c 01       	movw	r16, r24
	u8 i = 0;
	Str[i] = UART_recieveByte();
     dd2:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_recieveByte>
     dd6:	f8 01       	movw	r30, r16
     dd8:	80 83       	st	Z, r24
	while(Str[i] != '#')
     dda:	83 32       	cpi	r24, 0x23	; 35
     ddc:	59 f0       	breq	.+22     	; 0xdf4 <UART_receiveString+0x2e>
	*******************************************************************/
}

void UART_receiveString(u8 *Str)
{
	u8 i = 0;
     dde:	ff 24       	eor	r15, r15
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
	{
		i++;
     de0:	f3 94       	inc	r15
		Str[i] = UART_recieveByte();
     de2:	e8 01       	movw	r28, r16
     de4:	cf 0d       	add	r28, r15
     de6:	d1 1d       	adc	r29, r1
     de8:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_recieveByte>
     dec:	88 83       	st	Y, r24

void UART_receiveString(u8 *Str)
{
	u8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
     dee:	83 32       	cpi	r24, 0x23	; 35
     df0:	b9 f7       	brne	.-18     	; 0xde0 <UART_receiveString+0x1a>
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <UART_receiveString+0x30>
     df4:	e8 01       	movw	r28, r16
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
     df6:	18 82       	st	Y, r1
}
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	08 95       	ret

00000e04 <__subsf3>:
     e04:	50 58       	subi	r21, 0x80	; 128

00000e06 <__addsf3>:
     e06:	bb 27       	eor	r27, r27
     e08:	aa 27       	eor	r26, r26
     e0a:	0e d0       	rcall	.+28     	; 0xe28 <__addsf3x>
     e0c:	fc c1       	rjmp	.+1016   	; 0x1206 <__fp_round>
     e0e:	ed d1       	rcall	.+986    	; 0x11ea <__fp_pscA>
     e10:	30 f0       	brcs	.+12     	; 0xe1e <__addsf3+0x18>
     e12:	f2 d1       	rcall	.+996    	; 0x11f8 <__fp_pscB>
     e14:	20 f0       	brcs	.+8      	; 0xe1e <__addsf3+0x18>
     e16:	31 f4       	brne	.+12     	; 0xe24 <__addsf3+0x1e>
     e18:	9f 3f       	cpi	r25, 0xFF	; 255
     e1a:	11 f4       	brne	.+4      	; 0xe20 <__addsf3+0x1a>
     e1c:	1e f4       	brtc	.+6      	; 0xe24 <__addsf3+0x1e>
     e1e:	bd c1       	rjmp	.+890    	; 0x119a <__fp_nan>
     e20:	0e f4       	brtc	.+2      	; 0xe24 <__addsf3+0x1e>
     e22:	e0 95       	com	r30
     e24:	e7 fb       	bst	r30, 7
     e26:	b3 c1       	rjmp	.+870    	; 0x118e <__fp_inf>

00000e28 <__addsf3x>:
     e28:	e9 2f       	mov	r30, r25
     e2a:	fe d1       	rcall	.+1020   	; 0x1228 <__fp_split3>
     e2c:	80 f3       	brcs	.-32     	; 0xe0e <__addsf3+0x8>
     e2e:	ba 17       	cp	r27, r26
     e30:	62 07       	cpc	r22, r18
     e32:	73 07       	cpc	r23, r19
     e34:	84 07       	cpc	r24, r20
     e36:	95 07       	cpc	r25, r21
     e38:	18 f0       	brcs	.+6      	; 0xe40 <__addsf3x+0x18>
     e3a:	71 f4       	brne	.+28     	; 0xe58 <__addsf3x+0x30>
     e3c:	9e f5       	brtc	.+102    	; 0xea4 <__addsf3x+0x7c>
     e3e:	16 c2       	rjmp	.+1068   	; 0x126c <__fp_zero>
     e40:	0e f4       	brtc	.+2      	; 0xe44 <__addsf3x+0x1c>
     e42:	e0 95       	com	r30
     e44:	0b 2e       	mov	r0, r27
     e46:	ba 2f       	mov	r27, r26
     e48:	a0 2d       	mov	r26, r0
     e4a:	0b 01       	movw	r0, r22
     e4c:	b9 01       	movw	r22, r18
     e4e:	90 01       	movw	r18, r0
     e50:	0c 01       	movw	r0, r24
     e52:	ca 01       	movw	r24, r20
     e54:	a0 01       	movw	r20, r0
     e56:	11 24       	eor	r1, r1
     e58:	ff 27       	eor	r31, r31
     e5a:	59 1b       	sub	r21, r25
     e5c:	99 f0       	breq	.+38     	; 0xe84 <__addsf3x+0x5c>
     e5e:	59 3f       	cpi	r21, 0xF9	; 249
     e60:	50 f4       	brcc	.+20     	; 0xe76 <__addsf3x+0x4e>
     e62:	50 3e       	cpi	r21, 0xE0	; 224
     e64:	68 f1       	brcs	.+90     	; 0xec0 <__addsf3x+0x98>
     e66:	1a 16       	cp	r1, r26
     e68:	f0 40       	sbci	r31, 0x00	; 0
     e6a:	a2 2f       	mov	r26, r18
     e6c:	23 2f       	mov	r18, r19
     e6e:	34 2f       	mov	r19, r20
     e70:	44 27       	eor	r20, r20
     e72:	58 5f       	subi	r21, 0xF8	; 248
     e74:	f3 cf       	rjmp	.-26     	; 0xe5c <__addsf3x+0x34>
     e76:	46 95       	lsr	r20
     e78:	37 95       	ror	r19
     e7a:	27 95       	ror	r18
     e7c:	a7 95       	ror	r26
     e7e:	f0 40       	sbci	r31, 0x00	; 0
     e80:	53 95       	inc	r21
     e82:	c9 f7       	brne	.-14     	; 0xe76 <__addsf3x+0x4e>
     e84:	7e f4       	brtc	.+30     	; 0xea4 <__addsf3x+0x7c>
     e86:	1f 16       	cp	r1, r31
     e88:	ba 0b       	sbc	r27, r26
     e8a:	62 0b       	sbc	r22, r18
     e8c:	73 0b       	sbc	r23, r19
     e8e:	84 0b       	sbc	r24, r20
     e90:	ba f0       	brmi	.+46     	; 0xec0 <__addsf3x+0x98>
     e92:	91 50       	subi	r25, 0x01	; 1
     e94:	a1 f0       	breq	.+40     	; 0xebe <__addsf3x+0x96>
     e96:	ff 0f       	add	r31, r31
     e98:	bb 1f       	adc	r27, r27
     e9a:	66 1f       	adc	r22, r22
     e9c:	77 1f       	adc	r23, r23
     e9e:	88 1f       	adc	r24, r24
     ea0:	c2 f7       	brpl	.-16     	; 0xe92 <__addsf3x+0x6a>
     ea2:	0e c0       	rjmp	.+28     	; 0xec0 <__addsf3x+0x98>
     ea4:	ba 0f       	add	r27, r26
     ea6:	62 1f       	adc	r22, r18
     ea8:	73 1f       	adc	r23, r19
     eaa:	84 1f       	adc	r24, r20
     eac:	48 f4       	brcc	.+18     	; 0xec0 <__addsf3x+0x98>
     eae:	87 95       	ror	r24
     eb0:	77 95       	ror	r23
     eb2:	67 95       	ror	r22
     eb4:	b7 95       	ror	r27
     eb6:	f7 95       	ror	r31
     eb8:	9e 3f       	cpi	r25, 0xFE	; 254
     eba:	08 f0       	brcs	.+2      	; 0xebe <__addsf3x+0x96>
     ebc:	b3 cf       	rjmp	.-154    	; 0xe24 <__addsf3+0x1e>
     ebe:	93 95       	inc	r25
     ec0:	88 0f       	add	r24, r24
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <__addsf3x+0x9e>
     ec4:	99 27       	eor	r25, r25
     ec6:	ee 0f       	add	r30, r30
     ec8:	97 95       	ror	r25
     eca:	87 95       	ror	r24
     ecc:	08 95       	ret
     ece:	8d d1       	rcall	.+794    	; 0x11ea <__fp_pscA>
     ed0:	58 f0       	brcs	.+22     	; 0xee8 <__addsf3x+0xc0>
     ed2:	80 e8       	ldi	r24, 0x80	; 128
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	09 f4       	brne	.+2      	; 0xeda <__addsf3x+0xb2>
     ed8:	9e ef       	ldi	r25, 0xFE	; 254
     eda:	8e d1       	rcall	.+796    	; 0x11f8 <__fp_pscB>
     edc:	28 f0       	brcs	.+10     	; 0xee8 <__addsf3x+0xc0>
     ede:	40 e8       	ldi	r20, 0x80	; 128
     ee0:	51 e0       	ldi	r21, 0x01	; 1
     ee2:	59 f4       	brne	.+22     	; 0xefa <atan2+0xe>
     ee4:	5e ef       	ldi	r21, 0xFE	; 254
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <atan2+0xe>
     ee8:	58 c1       	rjmp	.+688    	; 0x119a <__fp_nan>
     eea:	c0 c1       	rjmp	.+896    	; 0x126c <__fp_zero>

00000eec <atan2>:
     eec:	e9 2f       	mov	r30, r25
     eee:	e0 78       	andi	r30, 0x80	; 128
     ef0:	9b d1       	rcall	.+822    	; 0x1228 <__fp_split3>
     ef2:	68 f3       	brcs	.-38     	; 0xece <__addsf3x+0xa6>
     ef4:	09 2e       	mov	r0, r25
     ef6:	05 2a       	or	r0, r21
     ef8:	c1 f3       	breq	.-16     	; 0xeea <__addsf3x+0xc2>
     efa:	26 17       	cp	r18, r22
     efc:	37 07       	cpc	r19, r23
     efe:	48 07       	cpc	r20, r24
     f00:	59 07       	cpc	r21, r25
     f02:	38 f0       	brcs	.+14     	; 0xf12 <atan2+0x26>
     f04:	0e 2e       	mov	r0, r30
     f06:	07 f8       	bld	r0, 7
     f08:	e0 25       	eor	r30, r0
     f0a:	69 f0       	breq	.+26     	; 0xf26 <atan2+0x3a>
     f0c:	e0 25       	eor	r30, r0
     f0e:	e0 64       	ori	r30, 0x40	; 64
     f10:	0a c0       	rjmp	.+20     	; 0xf26 <atan2+0x3a>
     f12:	ef 63       	ori	r30, 0x3F	; 63
     f14:	07 f8       	bld	r0, 7
     f16:	00 94       	com	r0
     f18:	07 fa       	bst	r0, 7
     f1a:	db 01       	movw	r26, r22
     f1c:	b9 01       	movw	r22, r18
     f1e:	9d 01       	movw	r18, r26
     f20:	dc 01       	movw	r26, r24
     f22:	ca 01       	movw	r24, r20
     f24:	ad 01       	movw	r20, r26
     f26:	ef 93       	push	r30
     f28:	47 d0       	rcall	.+142    	; 0xfb8 <__divsf3_pse>
     f2a:	6d d1       	rcall	.+730    	; 0x1206 <__fp_round>
     f2c:	0a d0       	rcall	.+20     	; 0xf42 <atan>
     f2e:	5f 91       	pop	r21
     f30:	55 23       	and	r21, r21
     f32:	31 f0       	breq	.+12     	; 0xf40 <atan2+0x54>
     f34:	2b ed       	ldi	r18, 0xDB	; 219
     f36:	3f e0       	ldi	r19, 0x0F	; 15
     f38:	49 e4       	ldi	r20, 0x49	; 73
     f3a:	50 fd       	sbrc	r21, 0
     f3c:	49 ec       	ldi	r20, 0xC9	; 201
     f3e:	63 cf       	rjmp	.-314    	; 0xe06 <__addsf3>
     f40:	08 95       	ret

00000f42 <atan>:
     f42:	df 93       	push	r29
     f44:	dd 27       	eor	r29, r29
     f46:	b9 2f       	mov	r27, r25
     f48:	bf 77       	andi	r27, 0x7F	; 127
     f4a:	40 e8       	ldi	r20, 0x80	; 128
     f4c:	5f e3       	ldi	r21, 0x3F	; 63
     f4e:	16 16       	cp	r1, r22
     f50:	17 06       	cpc	r1, r23
     f52:	48 07       	cpc	r20, r24
     f54:	5b 07       	cpc	r21, r27
     f56:	10 f4       	brcc	.+4      	; 0xf5c <atan+0x1a>
     f58:	d9 2f       	mov	r29, r25
     f5a:	93 d1       	rcall	.+806    	; 0x1282 <inverse>
     f5c:	9f 93       	push	r25
     f5e:	8f 93       	push	r24
     f60:	7f 93       	push	r23
     f62:	6f 93       	push	r22
     f64:	3a d2       	rcall	.+1140   	; 0x13da <square>
     f66:	e4 e5       	ldi	r30, 0x54	; 84
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	1a d1       	rcall	.+564    	; 0x11a0 <__fp_powser>
     f6c:	4c d1       	rcall	.+664    	; 0x1206 <__fp_round>
     f6e:	2f 91       	pop	r18
     f70:	3f 91       	pop	r19
     f72:	4f 91       	pop	r20
     f74:	5f 91       	pop	r21
     f76:	98 d1       	rcall	.+816    	; 0x12a8 <__mulsf3x>
     f78:	dd 23       	and	r29, r29
     f7a:	49 f0       	breq	.+18     	; 0xf8e <atan+0x4c>
     f7c:	90 58       	subi	r25, 0x80	; 128
     f7e:	a2 ea       	ldi	r26, 0xA2	; 162
     f80:	2a ed       	ldi	r18, 0xDA	; 218
     f82:	3f e0       	ldi	r19, 0x0F	; 15
     f84:	49 ec       	ldi	r20, 0xC9	; 201
     f86:	5f e3       	ldi	r21, 0x3F	; 63
     f88:	d0 78       	andi	r29, 0x80	; 128
     f8a:	5d 27       	eor	r21, r29
     f8c:	4d df       	rcall	.-358    	; 0xe28 <__addsf3x>
     f8e:	df 91       	pop	r29
     f90:	3a c1       	rjmp	.+628    	; 0x1206 <__fp_round>

00000f92 <__cmpsf2>:
     f92:	d9 d0       	rcall	.+434    	; 0x1146 <__fp_cmp>
     f94:	08 f4       	brcc	.+2      	; 0xf98 <__cmpsf2+0x6>
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	08 95       	ret

00000f9a <__divsf3>:
     f9a:	0c d0       	rcall	.+24     	; 0xfb4 <__divsf3x>
     f9c:	34 c1       	rjmp	.+616    	; 0x1206 <__fp_round>
     f9e:	2c d1       	rcall	.+600    	; 0x11f8 <__fp_pscB>
     fa0:	40 f0       	brcs	.+16     	; 0xfb2 <__divsf3+0x18>
     fa2:	23 d1       	rcall	.+582    	; 0x11ea <__fp_pscA>
     fa4:	30 f0       	brcs	.+12     	; 0xfb2 <__divsf3+0x18>
     fa6:	21 f4       	brne	.+8      	; 0xfb0 <__divsf3+0x16>
     fa8:	5f 3f       	cpi	r21, 0xFF	; 255
     faa:	19 f0       	breq	.+6      	; 0xfb2 <__divsf3+0x18>
     fac:	f0 c0       	rjmp	.+480    	; 0x118e <__fp_inf>
     fae:	51 11       	cpse	r21, r1
     fb0:	5e c1       	rjmp	.+700    	; 0x126e <__fp_szero>
     fb2:	f3 c0       	rjmp	.+486    	; 0x119a <__fp_nan>

00000fb4 <__divsf3x>:
     fb4:	39 d1       	rcall	.+626    	; 0x1228 <__fp_split3>
     fb6:	98 f3       	brcs	.-26     	; 0xf9e <__divsf3+0x4>

00000fb8 <__divsf3_pse>:
     fb8:	99 23       	and	r25, r25
     fba:	c9 f3       	breq	.-14     	; 0xfae <__divsf3+0x14>
     fbc:	55 23       	and	r21, r21
     fbe:	b1 f3       	breq	.-20     	; 0xfac <__divsf3+0x12>
     fc0:	95 1b       	sub	r25, r21
     fc2:	55 0b       	sbc	r21, r21
     fc4:	bb 27       	eor	r27, r27
     fc6:	aa 27       	eor	r26, r26
     fc8:	62 17       	cp	r22, r18
     fca:	73 07       	cpc	r23, r19
     fcc:	84 07       	cpc	r24, r20
     fce:	38 f0       	brcs	.+14     	; 0xfde <__divsf3_pse+0x26>
     fd0:	9f 5f       	subi	r25, 0xFF	; 255
     fd2:	5f 4f       	sbci	r21, 0xFF	; 255
     fd4:	22 0f       	add	r18, r18
     fd6:	33 1f       	adc	r19, r19
     fd8:	44 1f       	adc	r20, r20
     fda:	aa 1f       	adc	r26, r26
     fdc:	a9 f3       	breq	.-22     	; 0xfc8 <__divsf3_pse+0x10>
     fde:	33 d0       	rcall	.+102    	; 0x1046 <__divsf3_pse+0x8e>
     fe0:	0e 2e       	mov	r0, r30
     fe2:	3a f0       	brmi	.+14     	; 0xff2 <__divsf3_pse+0x3a>
     fe4:	e0 e8       	ldi	r30, 0x80	; 128
     fe6:	30 d0       	rcall	.+96     	; 0x1048 <__divsf3_pse+0x90>
     fe8:	91 50       	subi	r25, 0x01	; 1
     fea:	50 40       	sbci	r21, 0x00	; 0
     fec:	e6 95       	lsr	r30
     fee:	00 1c       	adc	r0, r0
     ff0:	ca f7       	brpl	.-14     	; 0xfe4 <__divsf3_pse+0x2c>
     ff2:	29 d0       	rcall	.+82     	; 0x1046 <__divsf3_pse+0x8e>
     ff4:	fe 2f       	mov	r31, r30
     ff6:	27 d0       	rcall	.+78     	; 0x1046 <__divsf3_pse+0x8e>
     ff8:	66 0f       	add	r22, r22
     ffa:	77 1f       	adc	r23, r23
     ffc:	88 1f       	adc	r24, r24
     ffe:	bb 1f       	adc	r27, r27
    1000:	26 17       	cp	r18, r22
    1002:	37 07       	cpc	r19, r23
    1004:	48 07       	cpc	r20, r24
    1006:	ab 07       	cpc	r26, r27
    1008:	b0 e8       	ldi	r27, 0x80	; 128
    100a:	09 f0       	breq	.+2      	; 0x100e <__divsf3_pse+0x56>
    100c:	bb 0b       	sbc	r27, r27
    100e:	80 2d       	mov	r24, r0
    1010:	bf 01       	movw	r22, r30
    1012:	ff 27       	eor	r31, r31
    1014:	93 58       	subi	r25, 0x83	; 131
    1016:	5f 4f       	sbci	r21, 0xFF	; 255
    1018:	2a f0       	brmi	.+10     	; 0x1024 <__divsf3_pse+0x6c>
    101a:	9e 3f       	cpi	r25, 0xFE	; 254
    101c:	51 05       	cpc	r21, r1
    101e:	68 f0       	brcs	.+26     	; 0x103a <__divsf3_pse+0x82>
    1020:	b6 c0       	rjmp	.+364    	; 0x118e <__fp_inf>
    1022:	25 c1       	rjmp	.+586    	; 0x126e <__fp_szero>
    1024:	5f 3f       	cpi	r21, 0xFF	; 255
    1026:	ec f3       	brlt	.-6      	; 0x1022 <__divsf3_pse+0x6a>
    1028:	98 3e       	cpi	r25, 0xE8	; 232
    102a:	dc f3       	brlt	.-10     	; 0x1022 <__divsf3_pse+0x6a>
    102c:	86 95       	lsr	r24
    102e:	77 95       	ror	r23
    1030:	67 95       	ror	r22
    1032:	b7 95       	ror	r27
    1034:	f7 95       	ror	r31
    1036:	9f 5f       	subi	r25, 0xFF	; 255
    1038:	c9 f7       	brne	.-14     	; 0x102c <__divsf3_pse+0x74>
    103a:	88 0f       	add	r24, r24
    103c:	91 1d       	adc	r25, r1
    103e:	96 95       	lsr	r25
    1040:	87 95       	ror	r24
    1042:	97 f9       	bld	r25, 7
    1044:	08 95       	ret
    1046:	e1 e0       	ldi	r30, 0x01	; 1
    1048:	66 0f       	add	r22, r22
    104a:	77 1f       	adc	r23, r23
    104c:	88 1f       	adc	r24, r24
    104e:	bb 1f       	adc	r27, r27
    1050:	62 17       	cp	r22, r18
    1052:	73 07       	cpc	r23, r19
    1054:	84 07       	cpc	r24, r20
    1056:	ba 07       	cpc	r27, r26
    1058:	20 f0       	brcs	.+8      	; 0x1062 <__divsf3_pse+0xaa>
    105a:	62 1b       	sub	r22, r18
    105c:	73 0b       	sbc	r23, r19
    105e:	84 0b       	sbc	r24, r20
    1060:	ba 0b       	sbc	r27, r26
    1062:	ee 1f       	adc	r30, r30
    1064:	88 f7       	brcc	.-30     	; 0x1048 <__divsf3_pse+0x90>
    1066:	e0 95       	com	r30
    1068:	08 95       	ret

0000106a <__fixsfsi>:
    106a:	04 d0       	rcall	.+8      	; 0x1074 <__fixunssfsi>
    106c:	68 94       	set
    106e:	b1 11       	cpse	r27, r1
    1070:	fe c0       	rjmp	.+508    	; 0x126e <__fp_szero>
    1072:	08 95       	ret

00001074 <__fixunssfsi>:
    1074:	e1 d0       	rcall	.+450    	; 0x1238 <__fp_splitA>
    1076:	88 f0       	brcs	.+34     	; 0x109a <__fixunssfsi+0x26>
    1078:	9f 57       	subi	r25, 0x7F	; 127
    107a:	90 f0       	brcs	.+36     	; 0x10a0 <__fixunssfsi+0x2c>
    107c:	b9 2f       	mov	r27, r25
    107e:	99 27       	eor	r25, r25
    1080:	b7 51       	subi	r27, 0x17	; 23
    1082:	a0 f0       	brcs	.+40     	; 0x10ac <__fixunssfsi+0x38>
    1084:	d1 f0       	breq	.+52     	; 0x10ba <__fixunssfsi+0x46>
    1086:	66 0f       	add	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	1a f0       	brmi	.+6      	; 0x1096 <__fixunssfsi+0x22>
    1090:	ba 95       	dec	r27
    1092:	c9 f7       	brne	.-14     	; 0x1086 <__fixunssfsi+0x12>
    1094:	12 c0       	rjmp	.+36     	; 0x10ba <__fixunssfsi+0x46>
    1096:	b1 30       	cpi	r27, 0x01	; 1
    1098:	81 f0       	breq	.+32     	; 0x10ba <__fixunssfsi+0x46>
    109a:	e8 d0       	rcall	.+464    	; 0x126c <__fp_zero>
    109c:	b1 e0       	ldi	r27, 0x01	; 1
    109e:	08 95       	ret
    10a0:	e5 c0       	rjmp	.+458    	; 0x126c <__fp_zero>
    10a2:	67 2f       	mov	r22, r23
    10a4:	78 2f       	mov	r23, r24
    10a6:	88 27       	eor	r24, r24
    10a8:	b8 5f       	subi	r27, 0xF8	; 248
    10aa:	39 f0       	breq	.+14     	; 0x10ba <__fixunssfsi+0x46>
    10ac:	b9 3f       	cpi	r27, 0xF9	; 249
    10ae:	cc f3       	brlt	.-14     	; 0x10a2 <__fixunssfsi+0x2e>
    10b0:	86 95       	lsr	r24
    10b2:	77 95       	ror	r23
    10b4:	67 95       	ror	r22
    10b6:	b3 95       	inc	r27
    10b8:	d9 f7       	brne	.-10     	; 0x10b0 <__fixunssfsi+0x3c>
    10ba:	3e f4       	brtc	.+14     	; 0x10ca <__fixunssfsi+0x56>
    10bc:	90 95       	com	r25
    10be:	80 95       	com	r24
    10c0:	70 95       	com	r23
    10c2:	61 95       	neg	r22
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	8f 4f       	sbci	r24, 0xFF	; 255
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	08 95       	ret

000010cc <__floatunsisf>:
    10cc:	e8 94       	clt
    10ce:	09 c0       	rjmp	.+18     	; 0x10e2 <__floatsisf+0x12>

000010d0 <__floatsisf>:
    10d0:	97 fb       	bst	r25, 7
    10d2:	3e f4       	brtc	.+14     	; 0x10e2 <__floatsisf+0x12>
    10d4:	90 95       	com	r25
    10d6:	80 95       	com	r24
    10d8:	70 95       	com	r23
    10da:	61 95       	neg	r22
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	8f 4f       	sbci	r24, 0xFF	; 255
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	99 23       	and	r25, r25
    10e4:	a9 f0       	breq	.+42     	; 0x1110 <__floatsisf+0x40>
    10e6:	f9 2f       	mov	r31, r25
    10e8:	96 e9       	ldi	r25, 0x96	; 150
    10ea:	bb 27       	eor	r27, r27
    10ec:	93 95       	inc	r25
    10ee:	f6 95       	lsr	r31
    10f0:	87 95       	ror	r24
    10f2:	77 95       	ror	r23
    10f4:	67 95       	ror	r22
    10f6:	b7 95       	ror	r27
    10f8:	f1 11       	cpse	r31, r1
    10fa:	f8 cf       	rjmp	.-16     	; 0x10ec <__floatsisf+0x1c>
    10fc:	fa f4       	brpl	.+62     	; 0x113c <__floatsisf+0x6c>
    10fe:	bb 0f       	add	r27, r27
    1100:	11 f4       	brne	.+4      	; 0x1106 <__floatsisf+0x36>
    1102:	60 ff       	sbrs	r22, 0
    1104:	1b c0       	rjmp	.+54     	; 0x113c <__floatsisf+0x6c>
    1106:	6f 5f       	subi	r22, 0xFF	; 255
    1108:	7f 4f       	sbci	r23, 0xFF	; 255
    110a:	8f 4f       	sbci	r24, 0xFF	; 255
    110c:	9f 4f       	sbci	r25, 0xFF	; 255
    110e:	16 c0       	rjmp	.+44     	; 0x113c <__floatsisf+0x6c>
    1110:	88 23       	and	r24, r24
    1112:	11 f0       	breq	.+4      	; 0x1118 <__floatsisf+0x48>
    1114:	96 e9       	ldi	r25, 0x96	; 150
    1116:	11 c0       	rjmp	.+34     	; 0x113a <__floatsisf+0x6a>
    1118:	77 23       	and	r23, r23
    111a:	21 f0       	breq	.+8      	; 0x1124 <__floatsisf+0x54>
    111c:	9e e8       	ldi	r25, 0x8E	; 142
    111e:	87 2f       	mov	r24, r23
    1120:	76 2f       	mov	r23, r22
    1122:	05 c0       	rjmp	.+10     	; 0x112e <__floatsisf+0x5e>
    1124:	66 23       	and	r22, r22
    1126:	71 f0       	breq	.+28     	; 0x1144 <__floatsisf+0x74>
    1128:	96 e8       	ldi	r25, 0x86	; 134
    112a:	86 2f       	mov	r24, r22
    112c:	70 e0       	ldi	r23, 0x00	; 0
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	2a f0       	brmi	.+10     	; 0x113c <__floatsisf+0x6c>
    1132:	9a 95       	dec	r25
    1134:	66 0f       	add	r22, r22
    1136:	77 1f       	adc	r23, r23
    1138:	88 1f       	adc	r24, r24
    113a:	da f7       	brpl	.-10     	; 0x1132 <__floatsisf+0x62>
    113c:	88 0f       	add	r24, r24
    113e:	96 95       	lsr	r25
    1140:	87 95       	ror	r24
    1142:	97 f9       	bld	r25, 7
    1144:	08 95       	ret

00001146 <__fp_cmp>:
    1146:	99 0f       	add	r25, r25
    1148:	00 08       	sbc	r0, r0
    114a:	55 0f       	add	r21, r21
    114c:	aa 0b       	sbc	r26, r26
    114e:	e0 e8       	ldi	r30, 0x80	; 128
    1150:	fe ef       	ldi	r31, 0xFE	; 254
    1152:	16 16       	cp	r1, r22
    1154:	17 06       	cpc	r1, r23
    1156:	e8 07       	cpc	r30, r24
    1158:	f9 07       	cpc	r31, r25
    115a:	c0 f0       	brcs	.+48     	; 0x118c <__fp_cmp+0x46>
    115c:	12 16       	cp	r1, r18
    115e:	13 06       	cpc	r1, r19
    1160:	e4 07       	cpc	r30, r20
    1162:	f5 07       	cpc	r31, r21
    1164:	98 f0       	brcs	.+38     	; 0x118c <__fp_cmp+0x46>
    1166:	62 1b       	sub	r22, r18
    1168:	73 0b       	sbc	r23, r19
    116a:	84 0b       	sbc	r24, r20
    116c:	95 0b       	sbc	r25, r21
    116e:	39 f4       	brne	.+14     	; 0x117e <__fp_cmp+0x38>
    1170:	0a 26       	eor	r0, r26
    1172:	61 f0       	breq	.+24     	; 0x118c <__fp_cmp+0x46>
    1174:	23 2b       	or	r18, r19
    1176:	24 2b       	or	r18, r20
    1178:	25 2b       	or	r18, r21
    117a:	21 f4       	brne	.+8      	; 0x1184 <__fp_cmp+0x3e>
    117c:	08 95       	ret
    117e:	0a 26       	eor	r0, r26
    1180:	09 f4       	brne	.+2      	; 0x1184 <__fp_cmp+0x3e>
    1182:	a1 40       	sbci	r26, 0x01	; 1
    1184:	a6 95       	lsr	r26
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	81 1d       	adc	r24, r1
    118a:	81 1d       	adc	r24, r1
    118c:	08 95       	ret

0000118e <__fp_inf>:
    118e:	97 f9       	bld	r25, 7
    1190:	9f 67       	ori	r25, 0x7F	; 127
    1192:	80 e8       	ldi	r24, 0x80	; 128
    1194:	70 e0       	ldi	r23, 0x00	; 0
    1196:	60 e0       	ldi	r22, 0x00	; 0
    1198:	08 95       	ret

0000119a <__fp_nan>:
    119a:	9f ef       	ldi	r25, 0xFF	; 255
    119c:	80 ec       	ldi	r24, 0xC0	; 192
    119e:	08 95       	ret

000011a0 <__fp_powser>:
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	1f 93       	push	r17
    11a6:	0f 93       	push	r16
    11a8:	ff 92       	push	r15
    11aa:	ef 92       	push	r14
    11ac:	df 92       	push	r13
    11ae:	7b 01       	movw	r14, r22
    11b0:	8c 01       	movw	r16, r24
    11b2:	68 94       	set
    11b4:	05 c0       	rjmp	.+10     	; 0x11c0 <__fp_powser+0x20>
    11b6:	da 2e       	mov	r13, r26
    11b8:	ef 01       	movw	r28, r30
    11ba:	76 d0       	rcall	.+236    	; 0x12a8 <__mulsf3x>
    11bc:	fe 01       	movw	r30, r28
    11be:	e8 94       	clt
    11c0:	a5 91       	lpm	r26, Z+
    11c2:	25 91       	lpm	r18, Z+
    11c4:	35 91       	lpm	r19, Z+
    11c6:	45 91       	lpm	r20, Z+
    11c8:	55 91       	lpm	r21, Z+
    11ca:	ae f3       	brts	.-22     	; 0x11b6 <__fp_powser+0x16>
    11cc:	ef 01       	movw	r28, r30
    11ce:	2c de       	rcall	.-936    	; 0xe28 <__addsf3x>
    11d0:	fe 01       	movw	r30, r28
    11d2:	97 01       	movw	r18, r14
    11d4:	a8 01       	movw	r20, r16
    11d6:	da 94       	dec	r13
    11d8:	79 f7       	brne	.-34     	; 0x11b8 <__fp_powser+0x18>
    11da:	df 90       	pop	r13
    11dc:	ef 90       	pop	r14
    11de:	ff 90       	pop	r15
    11e0:	0f 91       	pop	r16
    11e2:	1f 91       	pop	r17
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <__fp_pscA>:
    11ea:	00 24       	eor	r0, r0
    11ec:	0a 94       	dec	r0
    11ee:	16 16       	cp	r1, r22
    11f0:	17 06       	cpc	r1, r23
    11f2:	18 06       	cpc	r1, r24
    11f4:	09 06       	cpc	r0, r25
    11f6:	08 95       	ret

000011f8 <__fp_pscB>:
    11f8:	00 24       	eor	r0, r0
    11fa:	0a 94       	dec	r0
    11fc:	12 16       	cp	r1, r18
    11fe:	13 06       	cpc	r1, r19
    1200:	14 06       	cpc	r1, r20
    1202:	05 06       	cpc	r0, r21
    1204:	08 95       	ret

00001206 <__fp_round>:
    1206:	09 2e       	mov	r0, r25
    1208:	03 94       	inc	r0
    120a:	00 0c       	add	r0, r0
    120c:	11 f4       	brne	.+4      	; 0x1212 <__fp_round+0xc>
    120e:	88 23       	and	r24, r24
    1210:	52 f0       	brmi	.+20     	; 0x1226 <__fp_round+0x20>
    1212:	bb 0f       	add	r27, r27
    1214:	40 f4       	brcc	.+16     	; 0x1226 <__fp_round+0x20>
    1216:	bf 2b       	or	r27, r31
    1218:	11 f4       	brne	.+4      	; 0x121e <__fp_round+0x18>
    121a:	60 ff       	sbrs	r22, 0
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <__fp_round+0x20>
    121e:	6f 5f       	subi	r22, 0xFF	; 255
    1220:	7f 4f       	sbci	r23, 0xFF	; 255
    1222:	8f 4f       	sbci	r24, 0xFF	; 255
    1224:	9f 4f       	sbci	r25, 0xFF	; 255
    1226:	08 95       	ret

00001228 <__fp_split3>:
    1228:	57 fd       	sbrc	r21, 7
    122a:	90 58       	subi	r25, 0x80	; 128
    122c:	44 0f       	add	r20, r20
    122e:	55 1f       	adc	r21, r21
    1230:	59 f0       	breq	.+22     	; 0x1248 <__fp_splitA+0x10>
    1232:	5f 3f       	cpi	r21, 0xFF	; 255
    1234:	71 f0       	breq	.+28     	; 0x1252 <__fp_splitA+0x1a>
    1236:	47 95       	ror	r20

00001238 <__fp_splitA>:
    1238:	88 0f       	add	r24, r24
    123a:	97 fb       	bst	r25, 7
    123c:	99 1f       	adc	r25, r25
    123e:	61 f0       	breq	.+24     	; 0x1258 <__fp_splitA+0x20>
    1240:	9f 3f       	cpi	r25, 0xFF	; 255
    1242:	79 f0       	breq	.+30     	; 0x1262 <__fp_splitA+0x2a>
    1244:	87 95       	ror	r24
    1246:	08 95       	ret
    1248:	12 16       	cp	r1, r18
    124a:	13 06       	cpc	r1, r19
    124c:	14 06       	cpc	r1, r20
    124e:	55 1f       	adc	r21, r21
    1250:	f2 cf       	rjmp	.-28     	; 0x1236 <__fp_split3+0xe>
    1252:	46 95       	lsr	r20
    1254:	f1 df       	rcall	.-30     	; 0x1238 <__fp_splitA>
    1256:	08 c0       	rjmp	.+16     	; 0x1268 <__fp_splitA+0x30>
    1258:	16 16       	cp	r1, r22
    125a:	17 06       	cpc	r1, r23
    125c:	18 06       	cpc	r1, r24
    125e:	99 1f       	adc	r25, r25
    1260:	f1 cf       	rjmp	.-30     	; 0x1244 <__fp_splitA+0xc>
    1262:	86 95       	lsr	r24
    1264:	71 05       	cpc	r23, r1
    1266:	61 05       	cpc	r22, r1
    1268:	08 94       	sec
    126a:	08 95       	ret

0000126c <__fp_zero>:
    126c:	e8 94       	clt

0000126e <__fp_szero>:
    126e:	bb 27       	eor	r27, r27
    1270:	66 27       	eor	r22, r22
    1272:	77 27       	eor	r23, r23
    1274:	cb 01       	movw	r24, r22
    1276:	97 f9       	bld	r25, 7
    1278:	08 95       	ret

0000127a <__gesf2>:
    127a:	65 df       	rcall	.-310    	; 0x1146 <__fp_cmp>
    127c:	08 f4       	brcc	.+2      	; 0x1280 <__gesf2+0x6>
    127e:	8f ef       	ldi	r24, 0xFF	; 255
    1280:	08 95       	ret

00001282 <inverse>:
    1282:	9b 01       	movw	r18, r22
    1284:	ac 01       	movw	r20, r24
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	80 e8       	ldi	r24, 0x80	; 128
    128c:	9f e3       	ldi	r25, 0x3F	; 63
    128e:	85 ce       	rjmp	.-758    	; 0xf9a <__divsf3>

00001290 <__mulsf3>:
    1290:	0b d0       	rcall	.+22     	; 0x12a8 <__mulsf3x>
    1292:	b9 cf       	rjmp	.-142    	; 0x1206 <__fp_round>
    1294:	aa df       	rcall	.-172    	; 0x11ea <__fp_pscA>
    1296:	28 f0       	brcs	.+10     	; 0x12a2 <__mulsf3+0x12>
    1298:	af df       	rcall	.-162    	; 0x11f8 <__fp_pscB>
    129a:	18 f0       	brcs	.+6      	; 0x12a2 <__mulsf3+0x12>
    129c:	95 23       	and	r25, r21
    129e:	09 f0       	breq	.+2      	; 0x12a2 <__mulsf3+0x12>
    12a0:	76 cf       	rjmp	.-276    	; 0x118e <__fp_inf>
    12a2:	7b cf       	rjmp	.-266    	; 0x119a <__fp_nan>
    12a4:	11 24       	eor	r1, r1
    12a6:	e3 cf       	rjmp	.-58     	; 0x126e <__fp_szero>

000012a8 <__mulsf3x>:
    12a8:	bf df       	rcall	.-130    	; 0x1228 <__fp_split3>
    12aa:	a0 f3       	brcs	.-24     	; 0x1294 <__mulsf3+0x4>

000012ac <__mulsf3_pse>:
    12ac:	95 9f       	mul	r25, r21
    12ae:	d1 f3       	breq	.-12     	; 0x12a4 <__mulsf3+0x14>
    12b0:	95 0f       	add	r25, r21
    12b2:	50 e0       	ldi	r21, 0x00	; 0
    12b4:	55 1f       	adc	r21, r21
    12b6:	62 9f       	mul	r22, r18
    12b8:	f0 01       	movw	r30, r0
    12ba:	72 9f       	mul	r23, r18
    12bc:	bb 27       	eor	r27, r27
    12be:	f0 0d       	add	r31, r0
    12c0:	b1 1d       	adc	r27, r1
    12c2:	63 9f       	mul	r22, r19
    12c4:	aa 27       	eor	r26, r26
    12c6:	f0 0d       	add	r31, r0
    12c8:	b1 1d       	adc	r27, r1
    12ca:	aa 1f       	adc	r26, r26
    12cc:	64 9f       	mul	r22, r20
    12ce:	66 27       	eor	r22, r22
    12d0:	b0 0d       	add	r27, r0
    12d2:	a1 1d       	adc	r26, r1
    12d4:	66 1f       	adc	r22, r22
    12d6:	82 9f       	mul	r24, r18
    12d8:	22 27       	eor	r18, r18
    12da:	b0 0d       	add	r27, r0
    12dc:	a1 1d       	adc	r26, r1
    12de:	62 1f       	adc	r22, r18
    12e0:	73 9f       	mul	r23, r19
    12e2:	b0 0d       	add	r27, r0
    12e4:	a1 1d       	adc	r26, r1
    12e6:	62 1f       	adc	r22, r18
    12e8:	83 9f       	mul	r24, r19
    12ea:	a0 0d       	add	r26, r0
    12ec:	61 1d       	adc	r22, r1
    12ee:	22 1f       	adc	r18, r18
    12f0:	74 9f       	mul	r23, r20
    12f2:	33 27       	eor	r19, r19
    12f4:	a0 0d       	add	r26, r0
    12f6:	61 1d       	adc	r22, r1
    12f8:	23 1f       	adc	r18, r19
    12fa:	84 9f       	mul	r24, r20
    12fc:	60 0d       	add	r22, r0
    12fe:	21 1d       	adc	r18, r1
    1300:	82 2f       	mov	r24, r18
    1302:	76 2f       	mov	r23, r22
    1304:	6a 2f       	mov	r22, r26
    1306:	11 24       	eor	r1, r1
    1308:	9f 57       	subi	r25, 0x7F	; 127
    130a:	50 40       	sbci	r21, 0x00	; 0
    130c:	8a f0       	brmi	.+34     	; 0x1330 <__mulsf3_pse+0x84>
    130e:	e1 f0       	breq	.+56     	; 0x1348 <__mulsf3_pse+0x9c>
    1310:	88 23       	and	r24, r24
    1312:	4a f0       	brmi	.+18     	; 0x1326 <__mulsf3_pse+0x7a>
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	bb 1f       	adc	r27, r27
    131a:	66 1f       	adc	r22, r22
    131c:	77 1f       	adc	r23, r23
    131e:	88 1f       	adc	r24, r24
    1320:	91 50       	subi	r25, 0x01	; 1
    1322:	50 40       	sbci	r21, 0x00	; 0
    1324:	a9 f7       	brne	.-22     	; 0x1310 <__mulsf3_pse+0x64>
    1326:	9e 3f       	cpi	r25, 0xFE	; 254
    1328:	51 05       	cpc	r21, r1
    132a:	70 f0       	brcs	.+28     	; 0x1348 <__mulsf3_pse+0x9c>
    132c:	30 cf       	rjmp	.-416    	; 0x118e <__fp_inf>
    132e:	9f cf       	rjmp	.-194    	; 0x126e <__fp_szero>
    1330:	5f 3f       	cpi	r21, 0xFF	; 255
    1332:	ec f3       	brlt	.-6      	; 0x132e <__mulsf3_pse+0x82>
    1334:	98 3e       	cpi	r25, 0xE8	; 232
    1336:	dc f3       	brlt	.-10     	; 0x132e <__mulsf3_pse+0x82>
    1338:	86 95       	lsr	r24
    133a:	77 95       	ror	r23
    133c:	67 95       	ror	r22
    133e:	b7 95       	ror	r27
    1340:	f7 95       	ror	r31
    1342:	e7 95       	ror	r30
    1344:	9f 5f       	subi	r25, 0xFF	; 255
    1346:	c1 f7       	brne	.-16     	; 0x1338 <__mulsf3_pse+0x8c>
    1348:	fe 2b       	or	r31, r30
    134a:	88 0f       	add	r24, r24
    134c:	91 1d       	adc	r25, r1
    134e:	96 95       	lsr	r25
    1350:	87 95       	ror	r24
    1352:	97 f9       	bld	r25, 7
    1354:	08 95       	ret
    1356:	11 f4       	brne	.+4      	; 0x135c <__mulsf3_pse+0xb0>
    1358:	0e f4       	brtc	.+2      	; 0x135c <__mulsf3_pse+0xb0>
    135a:	1f cf       	rjmp	.-450    	; 0x119a <__fp_nan>
    135c:	41 c0       	rjmp	.+130    	; 0x13e0 <__fp_mpack>

0000135e <sqrt>:
    135e:	6c df       	rcall	.-296    	; 0x1238 <__fp_splitA>
    1360:	d0 f3       	brcs	.-12     	; 0x1356 <__mulsf3_pse+0xaa>
    1362:	99 23       	and	r25, r25
    1364:	d9 f3       	breq	.-10     	; 0x135c <__mulsf3_pse+0xb0>
    1366:	ce f3       	brts	.-14     	; 0x135a <__mulsf3_pse+0xae>
    1368:	9f 57       	subi	r25, 0x7F	; 127
    136a:	55 0b       	sbc	r21, r21
    136c:	87 ff       	sbrs	r24, 7
    136e:	46 d0       	rcall	.+140    	; 0x13fc <__fp_norm2>
    1370:	00 24       	eor	r0, r0
    1372:	a0 e6       	ldi	r26, 0x60	; 96
    1374:	40 ea       	ldi	r20, 0xA0	; 160
    1376:	90 01       	movw	r18, r0
    1378:	80 58       	subi	r24, 0x80	; 128
    137a:	56 95       	lsr	r21
    137c:	97 95       	ror	r25
    137e:	28 f4       	brcc	.+10     	; 0x138a <sqrt+0x2c>
    1380:	80 5c       	subi	r24, 0xC0	; 192
    1382:	66 0f       	add	r22, r22
    1384:	77 1f       	adc	r23, r23
    1386:	88 1f       	adc	r24, r24
    1388:	20 f0       	brcs	.+8      	; 0x1392 <sqrt+0x34>
    138a:	26 17       	cp	r18, r22
    138c:	37 07       	cpc	r19, r23
    138e:	48 07       	cpc	r20, r24
    1390:	30 f4       	brcc	.+12     	; 0x139e <sqrt+0x40>
    1392:	62 1b       	sub	r22, r18
    1394:	73 0b       	sbc	r23, r19
    1396:	84 0b       	sbc	r24, r20
    1398:	20 29       	or	r18, r0
    139a:	31 29       	or	r19, r1
    139c:	4a 2b       	or	r20, r26
    139e:	a6 95       	lsr	r26
    13a0:	17 94       	ror	r1
    13a2:	07 94       	ror	r0
    13a4:	20 25       	eor	r18, r0
    13a6:	31 25       	eor	r19, r1
    13a8:	4a 27       	eor	r20, r26
    13aa:	58 f7       	brcc	.-42     	; 0x1382 <sqrt+0x24>
    13ac:	66 0f       	add	r22, r22
    13ae:	77 1f       	adc	r23, r23
    13b0:	88 1f       	adc	r24, r24
    13b2:	20 f0       	brcs	.+8      	; 0x13bc <sqrt+0x5e>
    13b4:	26 17       	cp	r18, r22
    13b6:	37 07       	cpc	r19, r23
    13b8:	48 07       	cpc	r20, r24
    13ba:	30 f4       	brcc	.+12     	; 0x13c8 <sqrt+0x6a>
    13bc:	62 0b       	sbc	r22, r18
    13be:	73 0b       	sbc	r23, r19
    13c0:	84 0b       	sbc	r24, r20
    13c2:	20 0d       	add	r18, r0
    13c4:	31 1d       	adc	r19, r1
    13c6:	41 1d       	adc	r20, r1
    13c8:	a0 95       	com	r26
    13ca:	81 f7       	brne	.-32     	; 0x13ac <sqrt+0x4e>
    13cc:	b9 01       	movw	r22, r18
    13ce:	84 2f       	mov	r24, r20
    13d0:	91 58       	subi	r25, 0x81	; 129
    13d2:	88 0f       	add	r24, r24
    13d4:	96 95       	lsr	r25
    13d6:	87 95       	ror	r24
    13d8:	08 95       	ret

000013da <square>:
    13da:	9b 01       	movw	r18, r22
    13dc:	ac 01       	movw	r20, r24
    13de:	58 cf       	rjmp	.-336    	; 0x1290 <__mulsf3>

000013e0 <__fp_mpack>:
    13e0:	9f 3f       	cpi	r25, 0xFF	; 255
    13e2:	31 f0       	breq	.+12     	; 0x13f0 <__fp_mpack_finite+0xc>

000013e4 <__fp_mpack_finite>:
    13e4:	91 50       	subi	r25, 0x01	; 1
    13e6:	20 f4       	brcc	.+8      	; 0x13f0 <__fp_mpack_finite+0xc>
    13e8:	87 95       	ror	r24
    13ea:	77 95       	ror	r23
    13ec:	67 95       	ror	r22
    13ee:	b7 95       	ror	r27
    13f0:	88 0f       	add	r24, r24
    13f2:	91 1d       	adc	r25, r1
    13f4:	96 95       	lsr	r25
    13f6:	87 95       	ror	r24
    13f8:	97 f9       	bld	r25, 7
    13fa:	08 95       	ret

000013fc <__fp_norm2>:
    13fc:	91 50       	subi	r25, 0x01	; 1
    13fe:	50 40       	sbci	r21, 0x00	; 0
    1400:	66 0f       	add	r22, r22
    1402:	77 1f       	adc	r23, r23
    1404:	88 1f       	adc	r24, r24
    1406:	d2 f7       	brpl	.-12     	; 0x13fc <__fp_norm2>
    1408:	08 95       	ret

0000140a <__mulsi3>:
    140a:	62 9f       	mul	r22, r18
    140c:	d0 01       	movw	r26, r0
    140e:	73 9f       	mul	r23, r19
    1410:	f0 01       	movw	r30, r0
    1412:	82 9f       	mul	r24, r18
    1414:	e0 0d       	add	r30, r0
    1416:	f1 1d       	adc	r31, r1
    1418:	64 9f       	mul	r22, r20
    141a:	e0 0d       	add	r30, r0
    141c:	f1 1d       	adc	r31, r1
    141e:	92 9f       	mul	r25, r18
    1420:	f0 0d       	add	r31, r0
    1422:	83 9f       	mul	r24, r19
    1424:	f0 0d       	add	r31, r0
    1426:	74 9f       	mul	r23, r20
    1428:	f0 0d       	add	r31, r0
    142a:	65 9f       	mul	r22, r21
    142c:	f0 0d       	add	r31, r0
    142e:	99 27       	eor	r25, r25
    1430:	72 9f       	mul	r23, r18
    1432:	b0 0d       	add	r27, r0
    1434:	e1 1d       	adc	r30, r1
    1436:	f9 1f       	adc	r31, r25
    1438:	63 9f       	mul	r22, r19
    143a:	b0 0d       	add	r27, r0
    143c:	e1 1d       	adc	r30, r1
    143e:	f9 1f       	adc	r31, r25
    1440:	bd 01       	movw	r22, r26
    1442:	cf 01       	movw	r24, r30
    1444:	11 24       	eor	r1, r1
    1446:	08 95       	ret

00001448 <__divmodsi4>:
    1448:	97 fb       	bst	r25, 7
    144a:	09 2e       	mov	r0, r25
    144c:	05 26       	eor	r0, r21
    144e:	0e d0       	rcall	.+28     	; 0x146c <__divmodsi4_neg1>
    1450:	57 fd       	sbrc	r21, 7
    1452:	04 d0       	rcall	.+8      	; 0x145c <__divmodsi4_neg2>
    1454:	14 d0       	rcall	.+40     	; 0x147e <__udivmodsi4>
    1456:	0a d0       	rcall	.+20     	; 0x146c <__divmodsi4_neg1>
    1458:	00 1c       	adc	r0, r0
    145a:	38 f4       	brcc	.+14     	; 0x146a <__divmodsi4_exit>

0000145c <__divmodsi4_neg2>:
    145c:	50 95       	com	r21
    145e:	40 95       	com	r20
    1460:	30 95       	com	r19
    1462:	21 95       	neg	r18
    1464:	3f 4f       	sbci	r19, 0xFF	; 255
    1466:	4f 4f       	sbci	r20, 0xFF	; 255
    1468:	5f 4f       	sbci	r21, 0xFF	; 255

0000146a <__divmodsi4_exit>:
    146a:	08 95       	ret

0000146c <__divmodsi4_neg1>:
    146c:	f6 f7       	brtc	.-4      	; 0x146a <__divmodsi4_exit>
    146e:	90 95       	com	r25
    1470:	80 95       	com	r24
    1472:	70 95       	com	r23
    1474:	61 95       	neg	r22
    1476:	7f 4f       	sbci	r23, 0xFF	; 255
    1478:	8f 4f       	sbci	r24, 0xFF	; 255
    147a:	9f 4f       	sbci	r25, 0xFF	; 255
    147c:	08 95       	ret

0000147e <__udivmodsi4>:
    147e:	a1 e2       	ldi	r26, 0x21	; 33
    1480:	1a 2e       	mov	r1, r26
    1482:	aa 1b       	sub	r26, r26
    1484:	bb 1b       	sub	r27, r27
    1486:	fd 01       	movw	r30, r26
    1488:	0d c0       	rjmp	.+26     	; 0x14a4 <__udivmodsi4_ep>

0000148a <__udivmodsi4_loop>:
    148a:	aa 1f       	adc	r26, r26
    148c:	bb 1f       	adc	r27, r27
    148e:	ee 1f       	adc	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	a2 17       	cp	r26, r18
    1494:	b3 07       	cpc	r27, r19
    1496:	e4 07       	cpc	r30, r20
    1498:	f5 07       	cpc	r31, r21
    149a:	20 f0       	brcs	.+8      	; 0x14a4 <__udivmodsi4_ep>
    149c:	a2 1b       	sub	r26, r18
    149e:	b3 0b       	sbc	r27, r19
    14a0:	e4 0b       	sbc	r30, r20
    14a2:	f5 0b       	sbc	r31, r21

000014a4 <__udivmodsi4_ep>:
    14a4:	66 1f       	adc	r22, r22
    14a6:	77 1f       	adc	r23, r23
    14a8:	88 1f       	adc	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	1a 94       	dec	r1
    14ae:	69 f7       	brne	.-38     	; 0x148a <__udivmodsi4_loop>
    14b0:	60 95       	com	r22
    14b2:	70 95       	com	r23
    14b4:	80 95       	com	r24
    14b6:	90 95       	com	r25
    14b8:	9b 01       	movw	r18, r22
    14ba:	ac 01       	movw	r20, r24
    14bc:	bd 01       	movw	r22, r26
    14be:	cf 01       	movw	r24, r30
    14c0:	08 95       	ret

000014c2 <_exit>:
    14c2:	f8 94       	cli

000014c4 <__stop_program>:
    14c4:	ff cf       	rjmp	.-2      	; 0x14c4 <__stop_program>
