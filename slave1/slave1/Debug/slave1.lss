
slave1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000016dc  00001770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000060  00800066  00800066  00001776  2**0
                  ALLOC
  3 .stab         000030cc  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000ad5  00000000  00000000  00004844  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00005320  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000181d  00000000  00000000  00005520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000085d  00000000  00000000  00006d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d93  00000000  00000000  0000759a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000630  00000000  00000000  00008330  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a8  00000000  00000000  00008960  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dc9  00000000  00000000  00009008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
       4:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_1>
       8:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_2>
       c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      10:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      14:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      18:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      1c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      20:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      24:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_10>
      2c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      30:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__vector_13>
      38:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      3c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      40:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      44:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      48:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      4c:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      50:	0c 94 5e 00 	jmp	0xbc	; 0xbc <__bad_interrupt>
      54:	08 4a       	sbci	r16, 0xA8	; 168
      56:	d7 3b       	cpi	r29, 0xB7	; 183
      58:	3b ce       	rjmp	.-906    	; 0xfffffcd0 <__eeprom_end+0xff7efcd0>
      5a:	01 6e       	ori	r16, 0xE1	; 225
      5c:	84 bc       	out	0x24, r8	; 36
      5e:	bf fd       	.word	0xfdbf	; ????
      60:	c1 2f       	mov	r28, r17
      62:	3d 6c       	ori	r19, 0xCD	; 205
      64:	74 31       	cpi	r23, 0x14	; 20
      66:	9a bd       	out	0x2a, r25	; 42
      68:	56 83       	std	Z+6, r21	; 0x06
      6a:	3d da       	rcall	.-2950   	; 0xfffff4e6 <__eeprom_end+0xff7ef4e6>
      6c:	3d 00       	.word	0x003d	; ????
      6e:	c7 7f       	andi	r28, 0xF7	; 247
      70:	11 be       	out	0x31, r1	; 49
      72:	d9 e4       	ldi	r29, 0x49	; 73
      74:	bb 4c       	sbci	r27, 0xCB	; 203
      76:	3e 91       	ld	r19, -X
      78:	6b aa       	sts	0x9b, r22
      7a:	aa be       	out	0x3a, r10	; 58
      7c:	00 00       	nop
      7e:	00 80       	ld	r0, Z
      80:	3f 00       	.word	0x003f	; ????

00000082 <__ctors_end>:
      82:	11 24       	eor	r1, r1
      84:	1f be       	out	0x3f, r1	; 63
      86:	cf e5       	ldi	r28, 0x5F	; 95
      88:	d8 e0       	ldi	r29, 0x08	; 8
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
      8e:	10 e0       	ldi	r17, 0x00	; 0
      90:	a0 e6       	ldi	r26, 0x60	; 96
      92:	b0 e0       	ldi	r27, 0x00	; 0
      94:	ec ed       	ldi	r30, 0xDC	; 220
      96:	f6 e1       	ldi	r31, 0x16	; 22
      98:	02 c0       	rjmp	.+4      	; 0x9e <__do_copy_data+0x10>
      9a:	05 90       	lpm	r0, Z+
      9c:	0d 92       	st	X+, r0
      9e:	a6 36       	cpi	r26, 0x66	; 102
      a0:	b1 07       	cpc	r27, r17
      a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0xc>

000000a4 <__do_clear_bss>:
      a4:	10 e0       	ldi	r17, 0x00	; 0
      a6:	a6 e6       	ldi	r26, 0x66	; 102
      a8:	b0 e0       	ldi	r27, 0x00	; 0
      aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
      ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
      ae:	a6 3c       	cpi	r26, 0xC6	; 198
      b0:	b1 07       	cpc	r27, r17
      b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
      b4:	0e 94 76 01 	call	0x2ec	; 0x2ec <main>
      b8:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <_exit>

000000bc <__bad_interrupt>:
      bc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c0 <__vector_10>:



/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
      c0:	1f 92       	push	r1
      c2:	0f 92       	push	r0
      c4:	0f b6       	in	r0, 0x3f	; 63
      c6:	0f 92       	push	r0
      c8:	11 24       	eor	r1, r1
      ca:	2f 93       	push	r18
      cc:	3f 93       	push	r19
      ce:	4f 93       	push	r20
      d0:	5f 93       	push	r21
      d2:	6f 93       	push	r22
      d4:	7f 93       	push	r23
      d6:	8f 93       	push	r24
      d8:	9f 93       	push	r25
      da:	af 93       	push	r26
      dc:	bf 93       	push	r27
      de:	ef 93       	push	r30
      e0:	ff 93       	push	r31
	g_tick++;
      e2:	80 91 69 00 	lds	r24, 0x0069
      e6:	8f 5f       	subi	r24, 0xFF	; 255
      e8:	80 93 69 00 	sts	0x0069, r24
	if(g_tick == NUMBER_OF_OVERFLOWS_PER_SECOND)
      ec:	84 30       	cpi	r24, 0x04	; 4
      ee:	11 f4       	brne	.+4      	; 0xf4 <__vector_10+0x34>
	{
		TIMER0_IncTick();
      f0:	0e 94 ab 07 	call	0xf56	; 0xf56 <TIMER0_IncTick>
	}
}
      f4:	ff 91       	pop	r31
      f6:	ef 91       	pop	r30
      f8:	bf 91       	pop	r27
      fa:	af 91       	pop	r26
      fc:	9f 91       	pop	r25
      fe:	8f 91       	pop	r24
     100:	7f 91       	pop	r23
     102:	6f 91       	pop	r22
     104:	5f 91       	pop	r21
     106:	4f 91       	pop	r20
     108:	3f 91       	pop	r19
     10a:	2f 91       	pop	r18
     10c:	0f 90       	pop	r0
     10e:	0f be       	out	0x3f, r0	; 63
     110:	0f 90       	pop	r0
     112:	1f 90       	pop	r1
     114:	18 95       	reti

00000116 <__vector_13>:


/* Interrupt Service Routine for uart */
ISR(USART_RXC_vect)
{
     116:	1f 92       	push	r1
     118:	0f 92       	push	r0
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	0f 92       	push	r0
     11e:	11 24       	eor	r1, r1
     120:	2f 93       	push	r18
     122:	3f 93       	push	r19
     124:	4f 93       	push	r20
     126:	5f 93       	push	r21
     128:	6f 93       	push	r22
     12a:	7f 93       	push	r23
     12c:	8f 93       	push	r24
     12e:	9f 93       	push	r25
     130:	af 93       	push	r26
     132:	bf 93       	push	r27
     134:	ef 93       	push	r30
     136:	ff 93       	push	r31
	u8 val = 0;
	 val = UART_recieveByte();
     138:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <UART_recieveByte>
	 
	 if(val == '@')
     13c:	80 34       	cpi	r24, 0x40	; 64
     13e:	21 f4       	brne	.+8      	; 0x148 <__vector_13+0x32>
	 {
		 flag_startBuffer = 1;
     140:	91 e0       	ldi	r25, 0x01	; 1
     142:	90 93 68 00 	sts	0x0068, r25
     146:	04 c0       	rjmp	.+8      	; 0x150 <__vector_13+0x3a>
	 }
	 
	 if(flag_startBuffer == 1)
     148:	90 91 68 00 	lds	r25, 0x0068
     14c:	91 30       	cpi	r25, 0x01	; 1
     14e:	51 f4       	brne	.+20     	; 0x164 <__vector_13+0x4e>
	 {
		 recivedBuffer[bufferCounter] = val;
     150:	90 91 66 00 	lds	r25, 0x0066
     154:	ec eb       	ldi	r30, 0xBC	; 188
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	e9 0f       	add	r30, r25
     15a:	f1 1d       	adc	r31, r1
     15c:	80 83       	st	Z, r24
		 bufferCounter++;
     15e:	9f 5f       	subi	r25, 0xFF	; 255
     160:	90 93 66 00 	sts	0x0066, r25
	 }
	 
	 if(val == ';')
     164:	8b 33       	cpi	r24, 0x3B	; 59
     166:	39 f4       	brne	.+14     	; 0x176 <__vector_13+0x60>
	 {
		 flag_startBuffer = 0;
     168:	10 92 68 00 	sts	0x0068, r1
		 flag_newBufferComplete = 1;
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	80 93 67 00 	sts	0x0067, r24
		 bufferCounter = 0;
     172:	10 92 66 00 	sts	0x0066, r1
	 }
	
}
     176:	ff 91       	pop	r31
     178:	ef 91       	pop	r30
     17a:	bf 91       	pop	r27
     17c:	af 91       	pop	r26
     17e:	9f 91       	pop	r25
     180:	8f 91       	pop	r24
     182:	7f 91       	pop	r23
     184:	6f 91       	pop	r22
     186:	5f 91       	pop	r21
     188:	4f 91       	pop	r20
     18a:	3f 91       	pop	r19
     18c:	2f 91       	pop	r18
     18e:	0f 90       	pop	r0
     190:	0f be       	out	0x3f, r0	; 63
     192:	0f 90       	pop	r0
     194:	1f 90       	pop	r1
     196:	18 95       	reti

00000198 <__vector_1>:


/* External INT0 Interrupt Service Routine */
ISR(INT0_vect)
{
     198:	1f 92       	push	r1
     19a:	0f 92       	push	r0
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	0f 92       	push	r0
     1a0:	11 24       	eor	r1, r1
     1a2:	2f 93       	push	r18
     1a4:	3f 93       	push	r19
     1a6:	4f 93       	push	r20
     1a8:	5f 93       	push	r21
     1aa:	6f 93       	push	r22
     1ac:	7f 93       	push	r23
     1ae:	8f 93       	push	r24
     1b0:	9f 93       	push	r25
     1b2:	af 93       	push	r26
     1b4:	bf 93       	push	r27
     1b6:	ef 93       	push	r30
     1b8:	ff 93       	push	r31
	Encoder_IncPulse(Encoder_one);
     1ba:	80 e0       	ldi	r24, 0x00	; 0
     1bc:	0e 94 8b 01 	call	0x316	; 0x316 <Encoder_IncPulse>
}
     1c0:	ff 91       	pop	r31
     1c2:	ef 91       	pop	r30
     1c4:	bf 91       	pop	r27
     1c6:	af 91       	pop	r26
     1c8:	9f 91       	pop	r25
     1ca:	8f 91       	pop	r24
     1cc:	7f 91       	pop	r23
     1ce:	6f 91       	pop	r22
     1d0:	5f 91       	pop	r21
     1d2:	4f 91       	pop	r20
     1d4:	3f 91       	pop	r19
     1d6:	2f 91       	pop	r18
     1d8:	0f 90       	pop	r0
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	0f 90       	pop	r0
     1de:	1f 90       	pop	r1
     1e0:	18 95       	reti

000001e2 <__vector_2>:


/* External INT1 Interrupt Service Routine */
ISR(INT1_vect)
{
     1e2:	1f 92       	push	r1
     1e4:	0f 92       	push	r0
     1e6:	0f b6       	in	r0, 0x3f	; 63
     1e8:	0f 92       	push	r0
     1ea:	11 24       	eor	r1, r1
     1ec:	2f 93       	push	r18
     1ee:	3f 93       	push	r19
     1f0:	4f 93       	push	r20
     1f2:	5f 93       	push	r21
     1f4:	6f 93       	push	r22
     1f6:	7f 93       	push	r23
     1f8:	8f 93       	push	r24
     1fa:	9f 93       	push	r25
     1fc:	af 93       	push	r26
     1fe:	bf 93       	push	r27
     200:	ef 93       	push	r30
     202:	ff 93       	push	r31
	Encoder_IncPulse(Encoder_two);
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	0e 94 8b 01 	call	0x316	; 0x316 <Encoder_IncPulse>
}
     20a:	ff 91       	pop	r31
     20c:	ef 91       	pop	r30
     20e:	bf 91       	pop	r27
     210:	af 91       	pop	r26
     212:	9f 91       	pop	r25
     214:	8f 91       	pop	r24
     216:	7f 91       	pop	r23
     218:	6f 91       	pop	r22
     21a:	5f 91       	pop	r21
     21c:	4f 91       	pop	r20
     21e:	3f 91       	pop	r19
     220:	2f 91       	pop	r18
     222:	0f 90       	pop	r0
     224:	0f be       	out	0x3f, r0	; 63
     226:	0f 90       	pop	r0
     228:	1f 90       	pop	r1
     22a:	18 95       	reti

0000022c <CheckForCommand>:
    }
}


void CheckForCommand()
{
     22c:	cf 93       	push	r28
     22e:	df 93       	push	r29
     230:	00 d0       	rcall	.+0      	; 0x232 <CheckForCommand+0x6>
     232:	00 d0       	rcall	.+0      	; 0x234 <CheckForCommand+0x8>
     234:	cd b7       	in	r28, 0x3d	; 61
     236:	de b7       	in	r29, 0x3e	; 62
	if (recivedBuffer[1] == 'C')
     238:	80 91 bd 00 	lds	r24, 0x00BD
     23c:	83 34       	cpi	r24, 0x43	; 67
     23e:	89 f4       	brne	.+34     	; 0x262 <CheckForCommand+0x36>
	{
		u8 temp[4];
		
		temp[0] = recivedBuffer[4];
     240:	80 91 c0 00 	lds	r24, 0x00C0
     244:	89 83       	std	Y+1, r24	; 0x01
		temp[1] = recivedBuffer[5];
     246:	80 91 c1 00 	lds	r24, 0x00C1
     24a:	8a 83       	std	Y+2, r24	; 0x02
		temp[2] = recivedBuffer[6];
     24c:	80 91 c2 00 	lds	r24, 0x00C2
     250:	8b 83       	std	Y+3, r24	; 0x03
		temp[3] = recivedBuffer[7];
     252:	80 91 c3 00 	lds	r24, 0x00C3
     256:	8c 83       	std	Y+4, r24	; 0x04
		
		MOTORS_ControlCommand(temp);
     258:	ce 01       	movw	r24, r28
     25a:	01 96       	adiw	r24, 0x01	; 1
     25c:	0e 94 76 02 	call	0x4ec	; 0x4ec <MOTORS_ControlCommand>
     260:	3e c0       	rjmp	.+124    	; 0x2de <CheckForCommand+0xb2>
	}
	else if (recivedBuffer[1] == 'N')
     262:	8e 34       	cpi	r24, 0x4E	; 78
     264:	e1 f1       	breq	.+120    	; 0x2de <CheckForCommand+0xb2>
	{
		
	}
	else if (recivedBuffer[1] == 'E')
     266:	85 34       	cpi	r24, 0x45	; 69
     268:	41 f5       	brne	.+80     	; 0x2ba <CheckForCommand+0x8e>
	{
		if (recivedBuffer[2] == 'B')
     26a:	80 91 be 00 	lds	r24, 0x00BE
     26e:	82 34       	cpi	r24, 0x42	; 66
     270:	b1 f5       	brne	.+108    	; 0x2de <CheckForCommand+0xb2>
		{
			u16 val = 0;
			
			val = recivedBuffer[5] - 48;
     272:	20 91 c1 00 	lds	r18, 0x00C1
			
			val += (recivedBuffer[4] - 48) * 10;
     276:	80 91 c0 00 	lds	r24, 0x00C0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	88 0f       	add	r24, r24
     27e:	99 1f       	adc	r25, r25
     280:	bc 01       	movw	r22, r24
     282:	66 0f       	add	r22, r22
     284:	77 1f       	adc	r23, r23
     286:	66 0f       	add	r22, r22
     288:	77 1f       	adc	r23, r23
     28a:	86 0f       	add	r24, r22
     28c:	97 1f       	adc	r25, r23
     28e:	bc 01       	movw	r22, r24
     290:	62 0f       	add	r22, r18
     292:	71 1d       	adc	r23, r1
			
			val += (recivedBuffer[3] - 48) * 100;
     294:	60 5d       	subi	r22, 0xD0	; 208
     296:	74 41       	sbci	r23, 0x14	; 20
     298:	20 91 bf 00 	lds	r18, 0x00BF
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	44 e6       	ldi	r20, 0x64	; 100
     2a0:	50 e0       	ldi	r21, 0x00	; 0
     2a2:	24 9f       	mul	r18, r20
     2a4:	c0 01       	movw	r24, r0
     2a6:	25 9f       	mul	r18, r21
     2a8:	90 0d       	add	r25, r0
     2aa:	34 9f       	mul	r19, r20
     2ac:	90 0d       	add	r25, r0
     2ae:	11 24       	eor	r1, r1
			
			Encoder_ChangeBlockSize(val);
     2b0:	86 0f       	add	r24, r22
     2b2:	97 1f       	adc	r25, r23
     2b4:	0e 94 bf 01 	call	0x37e	; 0x37e <Encoder_ChangeBlockSize>
     2b8:	12 c0       	rjmp	.+36     	; 0x2de <CheckForCommand+0xb2>
		}
	}
	else if (recivedBuffer[1] == 'A')
     2ba:	81 34       	cpi	r24, 0x41	; 65
     2bc:	81 f4       	brne	.+32     	; 0x2de <CheckForCommand+0xb2>
	{
		if (recivedBuffer[3] == 'H')
     2be:	80 91 bf 00 	lds	r24, 0x00BF
     2c2:	88 34       	cpi	r24, 0x48	; 72
     2c4:	61 f4       	brne	.+24     	; 0x2de <CheckForCommand+0xb2>
		{
			if (recivedBuffer[4] == 'S')
     2c6:	80 91 c0 00 	lds	r24, 0x00C0
     2ca:	83 35       	cpi	r24, 0x53	; 83
     2cc:	21 f4       	brne	.+8      	; 0x2d6 <CheckForCommand+0xaa>
			{
				flag_harvestingProcess = 1;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 93 6a 00 	sts	0x006A, r24
     2d4:	04 c0       	rjmp	.+8      	; 0x2de <CheckForCommand+0xb2>
			}
			else if (recivedBuffer[4] == 'E')
     2d6:	85 34       	cpi	r24, 0x45	; 69
     2d8:	11 f4       	brne	.+4      	; 0x2de <CheckForCommand+0xb2>
			{
				flag_harvestingProcess = 0;
     2da:	10 92 6a 00 	sts	0x006A, r1
			{
				/* Do Nothing */
			}
		}
	}
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	08 95       	ret

000002ec <main>:

void CheckForCommand();

int main(void)
{
	TIMER0_init_CTC_mode();
     2ec:	0e 94 a2 07 	call	0xf44	; 0xf44 <TIMER0_init_CTC_mode>
	UART_init();
     2f0:	0e 94 c8 07 	call	0xf90	; 0xf90 <UART_init>
	MOTORS_Init();
     2f4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <MOTORS_Init>
	
	
    while(1)
    {
        if (flag_newBufferComplete == 1)
     2f8:	80 91 67 00 	lds	r24, 0x0067
     2fc:	81 30       	cpi	r24, 0x01	; 1
     2fe:	29 f4       	brne	.+10     	; 0x30a <main+0x1e>
        {
			CheckForCommand();
     300:	0e 94 16 01 	call	0x22c	; 0x22c <CheckForCommand>
			flag_newBufferComplete = 0;
     304:	10 92 67 00 	sts	0x0067, r1
     308:	f7 cf       	rjmp	.-18     	; 0x2f8 <main+0xc>
     30a:	ff cf       	rjmp	.-2      	; 0x30a <main+0x1e>

0000030c <Encoder_Init>:



void Encoder_Init()
{
	INT1_Init();
     30c:	0e 94 92 06 	call	0xd24	; 0xd24 <INT1_Init>
	INT0_Init();
     310:	0e 94 84 06 	call	0xd08	; 0xd08 <INT0_Init>
}
     314:	08 95       	ret

00000316 <Encoder_IncPulse>:


void Encoder_IncPulse(Encoder_Numb encoderNumb)
{
	if(encoderNumb == Encoder_one)
     316:	88 23       	and	r24, r24
     318:	a9 f4       	brne	.+42     	; 0x344 <Encoder_IncPulse+0x2e>
	{
		EncoderOnePulse++;
     31a:	20 91 6f 00 	lds	r18, 0x006F
     31e:	2f 5f       	subi	r18, 0xFF	; 255
     320:	20 93 6f 00 	sts	0x006F, r18
		
		if (EncoderOnePulse == BlockToPulse)
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	80 91 60 00 	lds	r24, 0x0060
     32a:	90 91 61 00 	lds	r25, 0x0061
     32e:	28 17       	cp	r18, r24
     330:	39 07       	cpc	r19, r25
     332:	f1 f4       	brne	.+60     	; 0x370 <Encoder_IncPulse+0x5a>
		{
			EncoderOneBlock++;
     334:	80 91 6d 00 	lds	r24, 0x006D
     338:	8f 5f       	subi	r24, 0xFF	; 255
     33a:	80 93 6d 00 	sts	0x006D, r24
			EncoderOnePulse = 0;
     33e:	10 92 6f 00 	sts	0x006F, r1
     342:	08 95       	ret
		}
	}
	else if(encoderNumb == Encoder_two)
     344:	81 30       	cpi	r24, 0x01	; 1
     346:	a1 f4       	brne	.+40     	; 0x370 <Encoder_IncPulse+0x5a>
	{
		EncoderTwoPulse++;
     348:	20 91 6e 00 	lds	r18, 0x006E
     34c:	2f 5f       	subi	r18, 0xFF	; 255
     34e:	20 93 6e 00 	sts	0x006E, r18
		
		if (EncoderTwoPulse == BlockToPulse)
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	80 91 60 00 	lds	r24, 0x0060
     358:	90 91 61 00 	lds	r25, 0x0061
     35c:	28 17       	cp	r18, r24
     35e:	39 07       	cpc	r19, r25
     360:	39 f4       	brne	.+14     	; 0x370 <Encoder_IncPulse+0x5a>
		{
			EncoderTwoBlock++;
     362:	80 91 6c 00 	lds	r24, 0x006C
     366:	8f 5f       	subi	r24, 0xFF	; 255
     368:	80 93 6c 00 	sts	0x006C, r24
			EncoderTwoPulse = 0;
     36c:	10 92 6e 00 	sts	0x006E, r1
     370:	08 95       	ret

00000372 <Encoder_AddBlocks>:
}


void Encoder_AddBlocks(u8 blocksNumb)
{
	g_blocksNumbers = blocksNumb;
     372:	80 93 6b 00 	sts	0x006B, r24
}
     376:	08 95       	ret

00000378 <Encoder_DeleteBlocks>:


void Encoder_DeleteBlocks()
{
	g_blocksNumbers = 0;
     378:	10 92 6b 00 	sts	0x006B, r1
}
     37c:	08 95       	ret

0000037e <Encoder_ChangeBlockSize>:


void Encoder_ChangeBlockSize(u16 pulsesNumb)
{
	BlockToPulse = pulsesNumb;
     37e:	90 93 61 00 	sts	0x0061, r25
     382:	80 93 60 00 	sts	0x0060, r24
}
     386:	08 95       	ret

00000388 <Encoder_IsEncodersEqual>:

u8 Encoder_IsEncodersEqual()
{
	if (EncoderTwoPulse == g_blocksNumbers)
	{
		return SUCCESS;
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	20 91 6e 00 	lds	r18, 0x006E
     38e:	90 91 6b 00 	lds	r25, 0x006B
     392:	29 13       	cpse	r18, r25
     394:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		return ERROR;
	}
	
}
     396:	08 95       	ret

00000398 <Encoder_IsBlocksFinished>:


u8 Encoder_IsBlocksFinished()
{
	if ((EncoderOneBlock == EncoderOnePulse) && (EncoderTwoBlock == EncoderOnePulse))
     398:	90 91 6d 00 	lds	r25, 0x006D
     39c:	80 91 6f 00 	lds	r24, 0x006F
     3a0:	98 17       	cp	r25, r24
     3a2:	39 f4       	brne	.+14     	; 0x3b2 <Encoder_IsBlocksFinished+0x1a>
	}
	
}


u8 Encoder_IsBlocksFinished()
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	20 91 6c 00 	lds	r18, 0x006C
     3aa:	92 17       	cp	r25, r18
     3ac:	19 f0       	breq	.+6      	; 0x3b4 <Encoder_IsBlocksFinished+0x1c>
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	08 95       	ret
	{
		return SUCCESS;
	}
	else
	{
		return ERROR;
     3b2:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
     3b4:	08 95       	ret

000003b6 <Encoder_Rebalance>:

void Encoder_Rebalance()
{
	
	
     3b6:	08 95       	ret

000003b8 <MOTORS_SetVal_SetDir>:
	
	MOTORS_SetVal_SetDir(val, command[1], command[2]);
}

void MOTORS_SetVal_SetDir(u8 speed, u8 dirFirst, u8 dirSecond)
{
     3b8:	cf 93       	push	r28
     3ba:	c8 2f       	mov	r28, r24
	if ((dirFirst == 'F') && (dirSecond == 'F'))
     3bc:	66 34       	cpi	r22, 0x46	; 70
     3be:	61 f5       	brne	.+88     	; 0x418 <MOTORS_SetVal_SetDir+0x60>
     3c0:	46 34       	cpi	r20, 0x46	; 70
     3c2:	61 f4       	brne	.+24     	; 0x3dc <MOTORS_SetVal_SetDir+0x24>
	{
		Timer1A_PWM_SetDuty(speed);
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 86 07 	call	0xf0c	; 0xf0c <Timer1A_PWM_SetDuty>
		Timer2_PWM_SetDuty(speed);
     3ca:	8c 2f       	mov	r24, r28
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 66 07 	call	0xecc	; 0xecc <Timer2_PWM_SetDuty>
		
		SET_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_ONE);
     3d2:	d8 9a       	sbi	0x1b, 0	; 27
		SET_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
     3d4:	c0 9a       	sbi	0x18, 0	; 24
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
     3d6:	d9 98       	cbi	0x1b, 1	; 27
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
     3d8:	d9 98       	cbi	0x1b, 1	; 27
}

void MOTORS_SetVal_SetDir(u8 speed, u8 dirFirst, u8 dirSecond)
{
	if ((dirFirst == 'F') && (dirSecond == 'F'))
	{
     3da:	7b c0       	rjmp	.+246    	; 0x4d2 <MOTORS_SetVal_SetDir+0x11a>
		SET_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'F') && (dirSecond == 'R'))
     3dc:	42 35       	cpi	r20, 0x52	; 82
     3de:	69 f4       	brne	.+26     	; 0x3fa <MOTORS_SetVal_SetDir+0x42>
	{
		Timer1A_PWM_SetDuty(speed);
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 86 07 	call	0xf0c	; 0xf0c <Timer1A_PWM_SetDuty>
		Timer2_PWM_SetDuty((speed/2));
     3e6:	8c 2f       	mov	r24, r28
     3e8:	86 95       	lsr	r24
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 66 07 	call	0xecc	; 0xecc <Timer2_PWM_SetDuty>
		
		SET_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_ONE);
     3f0:	d8 9a       	sbi	0x1b, 0	; 27
		SET_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
     3f2:	c0 9a       	sbi	0x18, 0	; 24
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
     3f4:	d9 98       	cbi	0x1b, 1	; 27
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
     3f6:	d9 98       	cbi	0x1b, 1	; 27
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'F') && (dirSecond == 'R'))
	{
     3f8:	6c c0       	rjmp	.+216    	; 0x4d2 <MOTORS_SetVal_SetDir+0x11a>
		SET_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'F') && (dirSecond == 'L'))
     3fa:	4c 34       	cpi	r20, 0x4C	; 76
     3fc:	99 f5       	brne	.+102    	; 0x464 <MOTORS_SetVal_SetDir+0xac>
	{
		Timer1A_PWM_SetDuty((speed/2));
     3fe:	86 95       	lsr	r24
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 86 07 	call	0xf0c	; 0xf0c <Timer1A_PWM_SetDuty>
		Timer2_PWM_SetDuty(speed);
     406:	8c 2f       	mov	r24, r28
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	0e 94 66 07 	call	0xecc	; 0xecc <Timer2_PWM_SetDuty>
		
		SET_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_ONE);
     40e:	d8 9a       	sbi	0x1b, 0	; 27
		SET_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
     410:	c0 9a       	sbi	0x18, 0	; 24
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
     412:	d9 98       	cbi	0x1b, 1	; 27
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
     414:	d9 98       	cbi	0x1b, 1	; 27
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'F') && (dirSecond == 'L'))
	{
     416:	5d c0       	rjmp	.+186    	; 0x4d2 <MOTORS_SetVal_SetDir+0x11a>
		SET_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'R') && (dirSecond == 'R'))
     418:	62 35       	cpi	r22, 0x52	; 82
     41a:	89 f4       	brne	.+34     	; 0x43e <MOTORS_SetVal_SetDir+0x86>
     41c:	42 35       	cpi	r20, 0x52	; 82
     41e:	09 f0       	breq	.+2      	; 0x422 <MOTORS_SetVal_SetDir+0x6a>
     420:	52 c0       	rjmp	.+164    	; 0x4c6 <MOTORS_SetVal_SetDir+0x10e>
	{
		Timer1A_PWM_SetDuty(speed);
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 86 07 	call	0xf0c	; 0xf0c <Timer1A_PWM_SetDuty>
		Timer2_PWM_SetDuty((speed/4));
     428:	8c 2f       	mov	r24, r28
     42a:	86 95       	lsr	r24
     42c:	86 95       	lsr	r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 66 07 	call	0xecc	; 0xecc <Timer2_PWM_SetDuty>
		
		SET_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_ONE);
     434:	d8 9a       	sbi	0x1b, 0	; 27
		SET_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
     436:	c0 9a       	sbi	0x18, 0	; 24
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
     438:	d9 98       	cbi	0x1b, 1	; 27
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
     43a:	d9 98       	cbi	0x1b, 1	; 27
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'R') && (dirSecond == 'R'))
	{
     43c:	4a c0       	rjmp	.+148    	; 0x4d2 <MOTORS_SetVal_SetDir+0x11a>
		SET_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'L') && (dirSecond == 'L'))
     43e:	6c 34       	cpi	r22, 0x4C	; 76
     440:	89 f4       	brne	.+34     	; 0x464 <MOTORS_SetVal_SetDir+0xac>
     442:	4c 34       	cpi	r20, 0x4C	; 76
     444:	09 f0       	breq	.+2      	; 0x448 <MOTORS_SetVal_SetDir+0x90>
     446:	45 c0       	rjmp	.+138    	; 0x4d2 <MOTORS_SetVal_SetDir+0x11a>
	{
		Timer1A_PWM_SetDuty((speed/4));
     448:	86 95       	lsr	r24
     44a:	86 95       	lsr	r24
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 86 07 	call	0xf0c	; 0xf0c <Timer1A_PWM_SetDuty>
		Timer2_PWM_SetDuty(speed);
     452:	8c 2f       	mov	r24, r28
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	0e 94 66 07 	call	0xecc	; 0xecc <Timer2_PWM_SetDuty>
		
		SET_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_ONE);
     45a:	d8 9a       	sbi	0x1b, 0	; 27
		SET_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
     45c:	c0 9a       	sbi	0x18, 0	; 24
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
     45e:	d9 98       	cbi	0x1b, 1	; 27
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
     460:	d9 98       	cbi	0x1b, 1	; 27
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'L') && (dirSecond == 'L'))
	{
     462:	37 c0       	rjmp	.+110    	; 0x4d2 <MOTORS_SetVal_SetDir+0x11a>
		SET_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'B') && (dirSecond == 'B'))
     464:	62 34       	cpi	r22, 0x42	; 66
     466:	79 f5       	brne	.+94     	; 0x4c6 <MOTORS_SetVal_SetDir+0x10e>
     468:	42 34       	cpi	r20, 0x42	; 66
     46a:	69 f4       	brne	.+26     	; 0x486 <MOTORS_SetVal_SetDir+0xce>
	{
		Timer1A_PWM_SetDuty(speed);
     46c:	8c 2f       	mov	r24, r28
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 86 07 	call	0xf0c	; 0xf0c <Timer1A_PWM_SetDuty>
		Timer2_PWM_SetDuty(speed);
     474:	8c 2f       	mov	r24, r28
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	0e 94 66 07 	call	0xecc	; 0xecc <Timer2_PWM_SetDuty>
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_ONE);
     47c:	d8 98       	cbi	0x1b, 0	; 27
		CLEAR_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
     47e:	c0 98       	cbi	0x18, 0	; 24
		
		SET_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
     480:	d9 9a       	sbi	0x1b, 1	; 27
		SET_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
     482:	d9 9a       	sbi	0x1b, 1	; 27
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'B') && (dirSecond == 'B'))
	{
     484:	26 c0       	rjmp	.+76     	; 0x4d2 <MOTORS_SetVal_SetDir+0x11a>
		CLEAR_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
		
		SET_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		SET_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'B') && (dirSecond == 'L'))
     486:	4c 34       	cpi	r20, 0x4C	; 76
     488:	71 f4       	brne	.+28     	; 0x4a6 <MOTORS_SetVal_SetDir+0xee>
	{
		Timer1A_PWM_SetDuty((speed/2));
     48a:	8c 2f       	mov	r24, r28
     48c:	86 95       	lsr	r24
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 86 07 	call	0xf0c	; 0xf0c <Timer1A_PWM_SetDuty>
		Timer2_PWM_SetDuty(speed);
     494:	8c 2f       	mov	r24, r28
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	0e 94 66 07 	call	0xecc	; 0xecc <Timer2_PWM_SetDuty>
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_ONE);
     49c:	d8 98       	cbi	0x1b, 0	; 27
		CLEAR_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
     49e:	c0 98       	cbi	0x18, 0	; 24
		
		SET_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
     4a0:	d9 9a       	sbi	0x1b, 1	; 27
		SET_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
     4a2:	d9 9a       	sbi	0x1b, 1	; 27
		
		SET_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		SET_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'B') && (dirSecond == 'L'))
	{
     4a4:	16 c0       	rjmp	.+44     	; 0x4d2 <MOTORS_SetVal_SetDir+0x11a>
		CLEAR_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
		
		SET_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		SET_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'B') && (dirSecond == 'R'))
     4a6:	42 35       	cpi	r20, 0x52	; 82
     4a8:	a1 f4       	brne	.+40     	; 0x4d2 <MOTORS_SetVal_SetDir+0x11a>
	{
		Timer1A_PWM_SetDuty(speed);
     4aa:	8c 2f       	mov	r24, r28
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 86 07 	call	0xf0c	; 0xf0c <Timer1A_PWM_SetDuty>
		Timer2_PWM_SetDuty((speed/2));
     4b2:	8c 2f       	mov	r24, r28
     4b4:	86 95       	lsr	r24
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 66 07 	call	0xecc	; 0xecc <Timer2_PWM_SetDuty>
		
		CLEAR_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_ONE);
     4bc:	d8 98       	cbi	0x1b, 0	; 27
		CLEAR_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
     4be:	c0 98       	cbi	0x18, 0	; 24
		
		SET_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
     4c0:	d9 9a       	sbi	0x1b, 1	; 27
		SET_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
     4c2:	d9 9a       	sbi	0x1b, 1	; 27
		
		SET_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		SET_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if ((dirFirst == 'B') && (dirSecond == 'R'))
	{
     4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <MOTORS_SetVal_SetDir+0x11a>
		CLEAR_BIT(MOTOR_TWO_PORT, MOTOR_TWO_PIN_ONE);
		
		SET_BIT(MOTOR_ONE_PORT, MOTOR_ONE_PIN_TWO);
		SET_BIT(MOTOR_ONE_PORT, MOTOR_TWO_PIN_TWO);
	}
	else if (dirFirst == 'S')
     4c6:	63 35       	cpi	r22, 0x53	; 83
     4c8:	21 f4       	brne	.+8      	; 0x4d2 <MOTORS_SetVal_SetDir+0x11a>
	{
		Timer2_PWM_Stop();
     4ca:	0e 94 76 07 	call	0xeec	; 0xeec <Timer2_PWM_Stop>
		Timer1A_PWM_Stop();
     4ce:	0e 94 99 07 	call	0xf32	; 0xf32 <Timer1A_PWM_Stop>
	}
	
	
}
     4d2:	cf 91       	pop	r28
     4d4:	08 95       	ret

000004d6 <MOTORS_Init>:
#include "MOTORS.h"


void MOTORS_Init()
{
	Timer2_PWM_init();
     4d6:	0e 94 60 07 	call	0xec0	; 0xec0 <Timer2_PWM_init>
	Timer1A_PWM_init();
     4da:	0e 94 7c 07 	call	0xef8	; 0xef8 <Timer1A_PWM_init>
	
	Encoder_Init();
     4de:	0e 94 86 01 	call	0x30c	; 0x30c <Encoder_Init>
	
	SET_BIT(MOTOR_ONE_DDR, MOTOR_ONE_PIN_ONE);
     4e2:	d0 9a       	sbi	0x1a, 0	; 26
	SET_BIT(MOTOR_ONE_DDR, MOTOR_ONE_PIN_TWO);
     4e4:	d1 9a       	sbi	0x1a, 1	; 26
	
	SET_BIT(MOTOR_TWO_DDR, MOTOR_TWO_PIN_ONE);
     4e6:	b8 9a       	sbi	0x17, 0	; 23
	SET_BIT(MOTOR_TWO_DDR, MOTOR_TWO_PIN_TWO);
     4e8:	b9 9a       	sbi	0x17, 1	; 23
}
     4ea:	08 95       	ret

000004ec <MOTORS_ControlCommand>:


void MOTORS_ControlCommand(u8 *command)
{
     4ec:	fc 01       	movw	r30, r24
	u8 val = 0;
	
	val = command[0] - 48;
	val += (command[1] - 48) * 10;
     4ee:	61 81       	ldd	r22, Z+1	; 0x01
     4f0:	80 81       	ld	r24, Z
     4f2:	80 51       	subi	r24, 0x10	; 16
     4f4:	96 2f       	mov	r25, r22
     4f6:	99 0f       	add	r25, r25
     4f8:	29 2f       	mov	r18, r25
     4fa:	22 0f       	add	r18, r18
     4fc:	22 0f       	add	r18, r18
     4fe:	92 0f       	add	r25, r18
	
	MOTORS_SetVal_SetDir(val, command[1], command[2]);
     500:	42 81       	ldd	r20, Z+2	; 0x02
     502:	89 0f       	add	r24, r25
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	50 e0       	ldi	r21, 0x00	; 0
     50a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <MOTORS_SetVal_SetDir>
}
     50e:	08 95       	ret

00000510 <MPU6050_Init>:
  * and gyroscope parameters. The sensor is expected to have a device ID of 104 (0x68).
  * If initialization is successful, the function returns 0; otherwise, it returns 1.
  */

u8 MPU6050_Init()
{
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	00 d0       	rcall	.+0      	; 0x516 <MPU6050_Init+0x6>
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
    u8 check = 0;
     51a:	19 82       	std	Y+1, r1	; 0x01
    u8 Data = 0;
     51c:	1a 82       	std	Y+2, r1	; 0x02
	
	TWI_init();
     51e:	0e 94 a4 06 	call	0xd48	; 0xd48 <TWI_init>

    // check device ID WHO_AM_I

    //HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
    /* I2C READ FROM MEMORY WITH ADDRESS WHO_AM_I_REG THE OUTPUT IN check */////////////////////////////////////////////////////////********
	I2C_Mem_Read(MPU6050_ADDR, WHO_AM_I_REG, &check, 1);
     522:	80 ed       	ldi	r24, 0xD0	; 208
     524:	65 e7       	ldi	r22, 0x75	; 117
     526:	ae 01       	movw	r20, r28
     528:	4f 5f       	subi	r20, 0xFF	; 255
     52a:	5f 4f       	sbci	r21, 0xFF	; 255
     52c:	21 e0       	ldi	r18, 0x01	; 1
     52e:	0e 94 fe 06 	call	0xdfc	; 0xdfc <I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	88 36       	cpi	r24, 0x68	; 104
     536:	19 f5       	brne	.+70     	; 0x57e <MPU6050_Init+0x6e>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
     538:	1a 82       	std	Y+2, r1	; 0x02
        //HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
        /* I2C WRITE TO MEMORY WITH ADDRESS PWR_MGMT_1_REG AND DATA = Data *////////////////////////////////////////////////////////********
		I2C_Mem_Write(MPU6050_ADDR, PWR_MGMT_1_REG, &Data);
     53a:	80 ed       	ldi	r24, 0xD0	; 208
     53c:	6b e6       	ldi	r22, 0x6B	; 107
     53e:	ae 01       	movw	r20, r28
     540:	4e 5f       	subi	r20, 0xFE	; 254
     542:	5f 4f       	sbci	r21, 0xFF	; 255
     544:	0e 94 cc 06 	call	0xd98	; 0xd98 <I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
     548:	87 e0       	ldi	r24, 0x07	; 7
     54a:	8a 83       	std	Y+2, r24	; 0x02
        //HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
        /* I2C WRITE TO MEMORY WITH ADDRESS SMPLRT_DIV_REG AND DATA = Data */////////////////////////////////////////////////////////*********
		I2C_Mem_Write(MPU6050_ADDR, SMPLRT_DIV_REG, &Data);
     54c:	80 ed       	ldi	r24, 0xD0	; 208
     54e:	69 e1       	ldi	r22, 0x19	; 25
     550:	ae 01       	movw	r20, r28
     552:	4e 5f       	subi	r20, 0xFE	; 254
     554:	5f 4f       	sbci	r21, 0xFF	; 255
     556:	0e 94 cc 06 	call	0xd98	; 0xd98 <I2C_Mem_Write>
		
        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> ? 2g
        Data = 0x00;
     55a:	1a 82       	std	Y+2, r1	; 0x02
        //HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
        /* I2C WRITE TO MEMORY WITH ADDRESS ACCEL_CONFIG_REG AND DATA = Data */////////////////////////////////////////////////////////*******
		I2C_Mem_Write(MPU6050_ADDR, ACCEL_CONFIG_REG, &Data);
     55c:	80 ed       	ldi	r24, 0xD0	; 208
     55e:	6c e1       	ldi	r22, 0x1C	; 28
     560:	ae 01       	movw	r20, r28
     562:	4e 5f       	subi	r20, 0xFE	; 254
     564:	5f 4f       	sbci	r21, 0xFF	; 255
     566:	0e 94 cc 06 	call	0xd98	; 0xd98 <I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> ? 250 ?/s
        Data = 0x00;
     56a:	1a 82       	std	Y+2, r1	; 0x02
        //HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
        /* I2C WRITE TO MEMORY WITH ADDRESS GYRO_CONFIG_REG AND DATA = Data */////////////////////////////////////////////////////////********
		I2C_Mem_Write(MPU6050_ADDR, GYRO_CONFIG_REG, &Data);
     56c:	80 ed       	ldi	r24, 0xD0	; 208
     56e:	6b e1       	ldi	r22, 0x1B	; 27
     570:	ae 01       	movw	r20, r28
     572:	4e 5f       	subi	r20, 0xFE	; 254
     574:	5f 4f       	sbci	r21, 0xFF	; 255
     576:	0e 94 cc 06 	call	0xd98	; 0xd98 <I2C_Mem_Write>
		
        return 0;
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	01 c0       	rjmp	.+2      	; 0x580 <MPU6050_Init+0x70>
    }
    return 1;
     57e:	81 e0       	ldi	r24, 0x01	; 1
}
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	08 95       	ret

0000058a <Kalman_getAngle>:
  * involving the Kalman filter parameters such as angle, bias, and covariance matrix.
  * The result is the filtered angle estimate, which is returned by the function.
  */

f64 Kalman_getAngle(Kalman_t *Kalman, f64 newAngle, f64 newRate, f64 dt)
{
     58a:	2f 92       	push	r2
     58c:	3f 92       	push	r3
     58e:	4f 92       	push	r4
     590:	5f 92       	push	r5
     592:	6f 92       	push	r6
     594:	7f 92       	push	r7
     596:	8f 92       	push	r8
     598:	9f 92       	push	r9
     59a:	af 92       	push	r10
     59c:	bf 92       	push	r11
     59e:	cf 92       	push	r12
     5a0:	df 92       	push	r13
     5a2:	ef 92       	push	r14
     5a4:	ff 92       	push	r15
     5a6:	0f 93       	push	r16
     5a8:	1f 93       	push	r17
     5aa:	cf 93       	push	r28
     5ac:	df 93       	push	r29
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	6a 97       	sbiw	r28, 0x1a	; 26
     5b4:	0f b6       	in	r0, 0x3f	; 63
     5b6:	f8 94       	cli
     5b8:	de bf       	out	0x3e, r29	; 62
     5ba:	0f be       	out	0x3f, r0	; 63
     5bc:	cd bf       	out	0x3d, r28	; 61
     5be:	1c 01       	movw	r2, r24
     5c0:	4d 8b       	std	Y+21, r20	; 0x15
     5c2:	5e 8b       	std	Y+22, r21	; 0x16
     5c4:	6f 8b       	std	Y+23, r22	; 0x17
     5c6:	78 8f       	std	Y+24, r23	; 0x18
     5c8:	46 01       	movw	r8, r12
     5ca:	57 01       	movw	r10, r14
    f64 rate = newRate - Kalman->bias;
     5cc:	dc 01       	movw	r26, r24
     5ce:	50 96       	adiw	r26, 0x10	; 16
     5d0:	8d 91       	ld	r24, X+
     5d2:	9d 91       	ld	r25, X+
     5d4:	0d 90       	ld	r0, X+
     5d6:	bc 91       	ld	r27, X
     5d8:	a0 2d       	mov	r26, r0
     5da:	89 8b       	std	Y+17, r24	; 0x11
     5dc:	9a 8b       	std	Y+18, r25	; 0x12
     5de:	ab 8b       	std	Y+19, r26	; 0x13
     5e0:	bc 8b       	std	Y+20, r27	; 0x14
     5e2:	a9 01       	movw	r20, r18
     5e4:	98 01       	movw	r18, r16
     5e6:	28 1b       	sub	r18, r24
     5e8:	39 0b       	sbc	r19, r25
     5ea:	4a 0b       	sbc	r20, r26
     5ec:	5b 0b       	sbc	r21, r27
    Kalman->angle += dt * rate;
     5ee:	c7 01       	movw	r24, r14
     5f0:	b6 01       	movw	r22, r12
     5f2:	0e 94 10 0b 	call	0x1620	; 0x1620 <__mulsi3>
     5f6:	ab 01       	movw	r20, r22
     5f8:	bc 01       	movw	r22, r24
     5fa:	f1 01       	movw	r30, r2
     5fc:	84 85       	ldd	r24, Z+12	; 0x0c
     5fe:	95 85       	ldd	r25, Z+13	; 0x0d
     600:	a6 85       	ldd	r26, Z+14	; 0x0e
     602:	b7 85       	ldd	r27, Z+15	; 0x0f
     604:	8a 01       	movw	r16, r20
     606:	9b 01       	movw	r18, r22
     608:	08 0f       	add	r16, r24
     60a:	19 1f       	adc	r17, r25
     60c:	2a 1f       	adc	r18, r26
     60e:	3b 1f       	adc	r19, r27
     610:	09 83       	std	Y+1, r16	; 0x01
     612:	1a 83       	std	Y+2, r17	; 0x02
     614:	2b 83       	std	Y+3, r18	; 0x03
     616:	3c 83       	std	Y+4, r19	; 0x04

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
     618:	00 a1       	lds	r16, 0x40
     61a:	11 a1       	lds	r17, 0x41
     61c:	22 a1       	lds	r18, 0x42
     61e:	33 a1       	lds	r19, 0x43
     620:	0d 87       	std	Y+13, r16	; 0x0d
     622:	1e 87       	std	Y+14, r17	; 0x0e
     624:	2f 87       	std	Y+15, r18	; 0x0f
     626:	38 8b       	std	Y+16, r19	; 0x10
     628:	c9 01       	movw	r24, r18
     62a:	b8 01       	movw	r22, r16
     62c:	a7 01       	movw	r20, r14
     62e:	96 01       	movw	r18, r12
     630:	0e 94 10 0b 	call	0x1620	; 0x1620 <__mulsi3>
     634:	6b 01       	movw	r12, r22
     636:	7c 01       	movw	r14, r24
     638:	d1 01       	movw	r26, r2
     63a:	58 96       	adiw	r26, 0x18	; 24
     63c:	0d 91       	ld	r16, X+
     63e:	1d 91       	ld	r17, X+
     640:	2d 91       	ld	r18, X+
     642:	3c 91       	ld	r19, X
     644:	5b 97       	sbiw	r26, 0x1b	; 27
     646:	0d 83       	std	Y+5, r16	; 0x05
     648:	1e 83       	std	Y+6, r17	; 0x06
     64a:	2f 83       	std	Y+7, r18	; 0x07
     64c:	38 87       	std	Y+8, r19	; 0x08
     64e:	5c 96       	adiw	r26, 0x1c	; 28
     650:	0d 91       	ld	r16, X+
     652:	1d 91       	ld	r17, X+
     654:	2d 91       	ld	r18, X+
     656:	3c 91       	ld	r19, X
     658:	5f 97       	sbiw	r26, 0x1f	; 31
     65a:	09 87       	std	Y+9, r16	; 0x09
     65c:	1a 87       	std	Y+10, r17	; 0x0a
     65e:	2b 87       	std	Y+11, r18	; 0x0b
     660:	3c 87       	std	Y+12, r19	; 0x0c
     662:	ab 01       	movw	r20, r22
     664:	bc 01       	movw	r22, r24
     666:	0d 81       	ldd	r16, Y+5	; 0x05
     668:	1e 81       	ldd	r17, Y+6	; 0x06
     66a:	2f 81       	ldd	r18, Y+7	; 0x07
     66c:	38 85       	ldd	r19, Y+8	; 0x08
     66e:	40 1b       	sub	r20, r16
     670:	51 0b       	sbc	r21, r17
     672:	62 0b       	sbc	r22, r18
     674:	73 0b       	sbc	r23, r19
     676:	09 85       	ldd	r16, Y+9	; 0x09
     678:	1a 85       	ldd	r17, Y+10	; 0x0a
     67a:	2b 85       	ldd	r18, Y+11	; 0x0b
     67c:	3c 85       	ldd	r19, Y+12	; 0x0c
     67e:	40 1b       	sub	r20, r16
     680:	51 0b       	sbc	r21, r17
     682:	62 0b       	sbc	r22, r18
     684:	73 0b       	sbc	r23, r19
     686:	8d 91       	ld	r24, X+
     688:	9d 91       	ld	r25, X+
     68a:	0d 90       	ld	r0, X+
     68c:	bc 91       	ld	r27, X
     68e:	a0 2d       	mov	r26, r0
     690:	84 0f       	add	r24, r20
     692:	95 1f       	adc	r25, r21
     694:	a6 1f       	adc	r26, r22
     696:	b7 1f       	adc	r27, r23
     698:	bc 01       	movw	r22, r24
     69a:	cd 01       	movw	r24, r26
     69c:	a5 01       	movw	r20, r10
     69e:	94 01       	movw	r18, r8
     6a0:	0e 94 10 0b 	call	0x1620	; 0x1620 <__mulsi3>
     6a4:	ab 01       	movw	r20, r22
     6a6:	bc 01       	movw	r22, r24
     6a8:	f1 01       	movw	r30, r2
     6aa:	84 89       	ldd	r24, Z+20	; 0x14
     6ac:	95 89       	ldd	r25, Z+21	; 0x15
     6ae:	a6 89       	ldd	r26, Z+22	; 0x16
     6b0:	b7 89       	ldd	r27, Z+23	; 0x17
     6b2:	2a 01       	movw	r4, r20
     6b4:	3b 01       	movw	r6, r22
     6b6:	48 0e       	add	r4, r24
     6b8:	59 1e       	adc	r5, r25
     6ba:	6a 1e       	adc	r6, r26
     6bc:	7b 1e       	adc	r7, r27
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
     6be:	0d 81       	ldd	r16, Y+5	; 0x05
     6c0:	1e 81       	ldd	r17, Y+6	; 0x06
     6c2:	2f 81       	ldd	r18, Y+7	; 0x07
     6c4:	38 85       	ldd	r19, Y+8	; 0x08
     6c6:	0c 19       	sub	r16, r12
     6c8:	1d 09       	sbc	r17, r13
     6ca:	2e 09       	sbc	r18, r14
     6cc:	3f 09       	sbc	r19, r15
     6ce:	0d 83       	std	Y+5, r16	; 0x05
     6d0:	1e 83       	std	Y+6, r17	; 0x06
     6d2:	2f 83       	std	Y+7, r18	; 0x07
     6d4:	38 87       	std	Y+8, r19	; 0x08
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
     6d6:	09 85       	ldd	r16, Y+9	; 0x09
     6d8:	1a 85       	ldd	r17, Y+10	; 0x0a
     6da:	2b 85       	ldd	r18, Y+11	; 0x0b
     6dc:	3c 85       	ldd	r19, Y+12	; 0x0c
     6de:	0c 19       	sub	r16, r12
     6e0:	1d 09       	sbc	r17, r13
     6e2:	2e 09       	sbc	r18, r14
     6e4:	3f 09       	sbc	r19, r15
     6e6:	09 87       	std	Y+9, r16	; 0x09
     6e8:	1a 87       	std	Y+10, r17	; 0x0a
     6ea:	2b 87       	std	Y+11, r18	; 0x0b
     6ec:	3c 87       	std	Y+12, r19	; 0x0c
    Kalman->P[1][1] += Kalman->Q_bias * dt;
     6ee:	24 81       	ldd	r18, Z+4	; 0x04
     6f0:	35 81       	ldd	r19, Z+5	; 0x05
     6f2:	46 81       	ldd	r20, Z+6	; 0x06
     6f4:	57 81       	ldd	r21, Z+7	; 0x07
     6f6:	c5 01       	movw	r24, r10
     6f8:	b4 01       	movw	r22, r8
     6fa:	0e 94 10 0b 	call	0x1620	; 0x1620 <__mulsi3>
     6fe:	dc 01       	movw	r26, r24
     700:	cb 01       	movw	r24, r22
     702:	0d 85       	ldd	r16, Y+13	; 0x0d
     704:	1e 85       	ldd	r17, Y+14	; 0x0e
     706:	2f 85       	ldd	r18, Y+15	; 0x0f
     708:	38 89       	ldd	r19, Y+16	; 0x10
     70a:	08 0f       	add	r16, r24
     70c:	19 1f       	adc	r17, r25
     70e:	2a 1f       	adc	r18, r26
     710:	3b 1f       	adc	r19, r27
     712:	0d 87       	std	Y+13, r16	; 0x0d
     714:	1e 87       	std	Y+14, r17	; 0x0e
     716:	2f 87       	std	Y+15, r18	; 0x0f
     718:	38 8b       	std	Y+16, r19	; 0x10

    f64 S = Kalman->P[0][0] + Kalman->R_measure;
     71a:	d1 01       	movw	r26, r2
     71c:	18 96       	adiw	r26, 0x08	; 8
     71e:	cd 90       	ld	r12, X+
     720:	dd 90       	ld	r13, X+
     722:	ed 90       	ld	r14, X+
     724:	fc 90       	ld	r15, X
     726:	1b 97       	sbiw	r26, 0x0b	; 11
     728:	c4 0c       	add	r12, r4
     72a:	d5 1c       	adc	r13, r5
     72c:	e6 1c       	adc	r14, r6
     72e:	f7 1c       	adc	r15, r7
    f64 K[2];
    K[0] = Kalman->P[0][0] / S;
     730:	c3 01       	movw	r24, r6
     732:	b2 01       	movw	r22, r4
     734:	a7 01       	movw	r20, r14
     736:	96 01       	movw	r18, r12
     738:	0e 94 2f 0b 	call	0x165e	; 0x165e <__divmodsi4>
     73c:	02 2f       	mov	r16, r18
     73e:	13 2f       	mov	r17, r19
     740:	4a 8f       	std	Y+26, r20	; 0x1a
     742:	59 8f       	std	Y+25, r21	; 0x19
    K[1] = Kalman->P[1][0] / S;
     744:	69 85       	ldd	r22, Y+9	; 0x09
     746:	7a 85       	ldd	r23, Y+10	; 0x0a
     748:	8b 85       	ldd	r24, Y+11	; 0x0b
     74a:	9c 85       	ldd	r25, Y+12	; 0x0c
     74c:	a7 01       	movw	r20, r14
     74e:	96 01       	movw	r18, r12
     750:	0e 94 2f 0b 	call	0x165e	; 0x165e <__divmodsi4>
     754:	f2 2e       	mov	r15, r18
     756:	e3 2e       	mov	r14, r19
     758:	d4 2e       	mov	r13, r20
     75a:	c5 2e       	mov	r12, r21

    f64 y = newAngle - Kalman->angle;
     75c:	8d 88       	ldd	r8, Y+21	; 0x15
     75e:	9e 88       	ldd	r9, Y+22	; 0x16
     760:	af 88       	ldd	r10, Y+23	; 0x17
     762:	b8 8c       	ldd	r11, Y+24	; 0x18
     764:	29 81       	ldd	r18, Y+1	; 0x01
     766:	3a 81       	ldd	r19, Y+2	; 0x02
     768:	4b 81       	ldd	r20, Y+3	; 0x03
     76a:	5c 81       	ldd	r21, Y+4	; 0x04
     76c:	82 1a       	sub	r8, r18
     76e:	93 0a       	sbc	r9, r19
     770:	a4 0a       	sbc	r10, r20
     772:	b5 0a       	sbc	r11, r21
    Kalman->angle += K[0] * y;
     774:	60 2f       	mov	r22, r16
     776:	71 2f       	mov	r23, r17
     778:	8a 8d       	ldd	r24, Y+26	; 0x1a
     77a:	99 8d       	ldd	r25, Y+25	; 0x19
     77c:	a5 01       	movw	r20, r10
     77e:	94 01       	movw	r18, r8
     780:	0e 94 10 0b 	call	0x1620	; 0x1620 <__mulsi3>
     784:	dc 01       	movw	r26, r24
     786:	cb 01       	movw	r24, r22
     788:	29 81       	ldd	r18, Y+1	; 0x01
     78a:	3a 81       	ldd	r19, Y+2	; 0x02
     78c:	4b 81       	ldd	r20, Y+3	; 0x03
     78e:	5c 81       	ldd	r21, Y+4	; 0x04
     790:	28 0f       	add	r18, r24
     792:	39 1f       	adc	r19, r25
     794:	4a 1f       	adc	r20, r26
     796:	5b 1f       	adc	r21, r27
     798:	29 83       	std	Y+1, r18	; 0x01
     79a:	3a 83       	std	Y+2, r19	; 0x02
     79c:	4b 83       	std	Y+3, r20	; 0x03
     79e:	5c 83       	std	Y+4, r21	; 0x04
     7a0:	d1 01       	movw	r26, r2
     7a2:	1c 96       	adiw	r26, 0x0c	; 12
     7a4:	2d 93       	st	X+, r18
     7a6:	3d 93       	st	X+, r19
     7a8:	4d 93       	st	X+, r20
     7aa:	5c 93       	st	X, r21
     7ac:	1f 97       	sbiw	r26, 0x0f	; 15
    Kalman->bias += K[1] * y;
     7ae:	6f 2d       	mov	r22, r15
     7b0:	7e 2d       	mov	r23, r14
     7b2:	8d 2d       	mov	r24, r13
     7b4:	9c 2d       	mov	r25, r12
     7b6:	a5 01       	movw	r20, r10
     7b8:	94 01       	movw	r18, r8
     7ba:	0e 94 10 0b 	call	0x1620	; 0x1620 <__mulsi3>
     7be:	dc 01       	movw	r26, r24
     7c0:	cb 01       	movw	r24, r22
     7c2:	29 89       	ldd	r18, Y+17	; 0x11
     7c4:	3a 89       	ldd	r19, Y+18	; 0x12
     7c6:	4b 89       	ldd	r20, Y+19	; 0x13
     7c8:	5c 89       	ldd	r21, Y+20	; 0x14
     7ca:	82 0f       	add	r24, r18
     7cc:	93 1f       	adc	r25, r19
     7ce:	a4 1f       	adc	r26, r20
     7d0:	b5 1f       	adc	r27, r21
     7d2:	f1 01       	movw	r30, r2
     7d4:	80 8b       	std	Z+16, r24	; 0x10
     7d6:	91 8b       	std	Z+17, r25	; 0x11
     7d8:	a2 8b       	std	Z+18, r26	; 0x12
     7da:	b3 8b       	std	Z+19, r27	; 0x13

    f64 P00_temp = Kalman->P[0][0];
    f64 P01_temp = Kalman->P[0][1];

    Kalman->P[0][0] -= K[0] * P00_temp;
     7dc:	c3 01       	movw	r24, r6
     7de:	b2 01       	movw	r22, r4
     7e0:	20 2f       	mov	r18, r16
     7e2:	31 2f       	mov	r19, r17
     7e4:	4a 8d       	ldd	r20, Y+26	; 0x1a
     7e6:	59 8d       	ldd	r21, Y+25	; 0x19
     7e8:	0e 94 10 0b 	call	0x1620	; 0x1620 <__mulsi3>
     7ec:	dc 01       	movw	r26, r24
     7ee:	cb 01       	movw	r24, r22
     7f0:	a3 01       	movw	r20, r6
     7f2:	92 01       	movw	r18, r4
     7f4:	28 1b       	sub	r18, r24
     7f6:	39 0b       	sbc	r19, r25
     7f8:	4a 0b       	sbc	r20, r26
     7fa:	5b 0b       	sbc	r21, r27
     7fc:	f1 01       	movw	r30, r2
     7fe:	24 8b       	std	Z+20, r18	; 0x14
     800:	35 8b       	std	Z+21, r19	; 0x15
     802:	46 8b       	std	Z+22, r20	; 0x16
     804:	57 8b       	std	Z+23, r21	; 0x17
    Kalman->P[0][1] -= K[0] * P01_temp;
     806:	6d 81       	ldd	r22, Y+5	; 0x05
     808:	7e 81       	ldd	r23, Y+6	; 0x06
     80a:	8f 81       	ldd	r24, Y+7	; 0x07
     80c:	98 85       	ldd	r25, Y+8	; 0x08
     80e:	20 2f       	mov	r18, r16
     810:	31 2f       	mov	r19, r17
     812:	4a 8d       	ldd	r20, Y+26	; 0x1a
     814:	59 8d       	ldd	r21, Y+25	; 0x19
     816:	0e 94 10 0b 	call	0x1620	; 0x1620 <__mulsi3>
     81a:	dc 01       	movw	r26, r24
     81c:	cb 01       	movw	r24, r22
     81e:	0d 81       	ldd	r16, Y+5	; 0x05
     820:	1e 81       	ldd	r17, Y+6	; 0x06
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	08 1b       	sub	r16, r24
     828:	19 0b       	sbc	r17, r25
     82a:	2a 0b       	sbc	r18, r26
     82c:	3b 0b       	sbc	r19, r27
     82e:	f1 01       	movw	r30, r2
     830:	00 8f       	std	Z+24, r16	; 0x18
     832:	11 8f       	std	Z+25, r17	; 0x19
     834:	22 8f       	std	Z+26, r18	; 0x1a
     836:	33 8f       	std	Z+27, r19	; 0x1b
    Kalman->P[1][0] -= K[1] * P00_temp;
     838:	c3 01       	movw	r24, r6
     83a:	b2 01       	movw	r22, r4
     83c:	2f 2d       	mov	r18, r15
     83e:	3e 2d       	mov	r19, r14
     840:	4d 2d       	mov	r20, r13
     842:	5c 2d       	mov	r21, r12
     844:	0e 94 10 0b 	call	0x1620	; 0x1620 <__mulsi3>
     848:	dc 01       	movw	r26, r24
     84a:	cb 01       	movw	r24, r22
     84c:	09 85       	ldd	r16, Y+9	; 0x09
     84e:	1a 85       	ldd	r17, Y+10	; 0x0a
     850:	2b 85       	ldd	r18, Y+11	; 0x0b
     852:	3c 85       	ldd	r19, Y+12	; 0x0c
     854:	08 1b       	sub	r16, r24
     856:	19 0b       	sbc	r17, r25
     858:	2a 0b       	sbc	r18, r26
     85a:	3b 0b       	sbc	r19, r27
     85c:	f1 01       	movw	r30, r2
     85e:	04 8f       	std	Z+28, r16	; 0x1c
     860:	15 8f       	std	Z+29, r17	; 0x1d
     862:	26 8f       	std	Z+30, r18	; 0x1e
     864:	37 8f       	std	Z+31, r19	; 0x1f
    Kalman->P[1][1] -= K[1] * P01_temp;
     866:	6d 81       	ldd	r22, Y+5	; 0x05
     868:	7e 81       	ldd	r23, Y+6	; 0x06
     86a:	8f 81       	ldd	r24, Y+7	; 0x07
     86c:	98 85       	ldd	r25, Y+8	; 0x08
     86e:	2f 2d       	mov	r18, r15
     870:	3e 2d       	mov	r19, r14
     872:	0e 94 10 0b 	call	0x1620	; 0x1620 <__mulsi3>
     876:	dc 01       	movw	r26, r24
     878:	cb 01       	movw	r24, r22
     87a:	0d 85       	ldd	r16, Y+13	; 0x0d
     87c:	1e 85       	ldd	r17, Y+14	; 0x0e
     87e:	2f 85       	ldd	r18, Y+15	; 0x0f
     880:	38 89       	ldd	r19, Y+16	; 0x10
     882:	08 1b       	sub	r16, r24
     884:	19 0b       	sbc	r17, r25
     886:	2a 0b       	sbc	r18, r26
     888:	3b 0b       	sbc	r19, r27
     88a:	f1 01       	movw	r30, r2
     88c:	00 a3       	lds	r16, 0x50
     88e:	11 a3       	lds	r17, 0x51
     890:	22 a3       	lds	r18, 0x52
     892:	33 a3       	lds	r19, 0x53

    return Kalman->angle;
}
     894:	69 81       	ldd	r22, Y+1	; 0x01
     896:	7a 81       	ldd	r23, Y+2	; 0x02
     898:	8b 81       	ldd	r24, Y+3	; 0x03
     89a:	9c 81       	ldd	r25, Y+4	; 0x04
     89c:	6a 96       	adiw	r28, 0x1a	; 26
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	f8 94       	cli
     8a2:	de bf       	out	0x3e, r29	; 62
     8a4:	0f be       	out	0x3f, r0	; 63
     8a6:	cd bf       	out	0x3d, r28	; 61
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	bf 90       	pop	r11
     8ba:	af 90       	pop	r10
     8bc:	9f 90       	pop	r9
     8be:	8f 90       	pop	r8
     8c0:	7f 90       	pop	r7
     8c2:	6f 90       	pop	r6
     8c4:	5f 90       	pop	r5
     8c6:	4f 90       	pop	r4
     8c8:	3f 90       	pop	r3
     8ca:	2f 90       	pop	r2
     8cc:	08 95       	ret

000008ce <MPU6050_Read_All>:
  * accelerometer, gyroscope, temperature, and Kalman filter angles. The function relies on a timer
  * (in this case, TIMER0_GetTick()) to calculate the time difference for the Kalman filter.
  */

void MPU6050_Read_All(MPU6050_t *DataStruct)
{
     8ce:	2f 92       	push	r2
     8d0:	3f 92       	push	r3
     8d2:	4f 92       	push	r4
     8d4:	5f 92       	push	r5
     8d6:	6f 92       	push	r6
     8d8:	7f 92       	push	r7
     8da:	8f 92       	push	r8
     8dc:	9f 92       	push	r9
     8de:	af 92       	push	r10
     8e0:	bf 92       	push	r11
     8e2:	cf 92       	push	r12
     8e4:	df 92       	push	r13
     8e6:	ef 92       	push	r14
     8e8:	ff 92       	push	r15
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	62 97       	sbiw	r28, 0x12	; 18
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	5c 01       	movw	r10, r24

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    //HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
    /* I2C READ FROM MEMORY WITH ADDRESS ACCEL_XOUT_H_REG THE OUTPUT IN Rec_Data */////////////////////////////////////////////////////////
	I2C_Mem_Read(MPU6050_ADDR, ACCEL_XOUT_H_REG, Rec_Data, 14);
     904:	80 ed       	ldi	r24, 0xD0	; 208
     906:	6b e3       	ldi	r22, 0x3B	; 59
     908:	ae 01       	movw	r20, r28
     90a:	4f 5f       	subi	r20, 0xFF	; 255
     90c:	5f 4f       	sbci	r21, 0xFF	; 255
     90e:	2e e0       	ldi	r18, 0x0E	; 14
     910:	0e 94 fe 06 	call	0xdfc	; 0xdfc <I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (s16) (Rec_Data[0] << 8 | Rec_Data[1]);
     914:	99 81       	ldd	r25, Y+1	; 0x01
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	4a 81       	ldd	r20, Y+2	; 0x02
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	48 2b       	or	r20, r24
     91e:	59 2b       	or	r21, r25
     920:	f5 01       	movw	r30, r10
     922:	51 83       	std	Z+1, r21	; 0x01
     924:	40 83       	st	Z, r20
    DataStruct->Accel_Y_RAW = (s16) (Rec_Data[2] << 8 | Rec_Data[3]);
     926:	9b 81       	ldd	r25, Y+3	; 0x03
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	6c 81       	ldd	r22, Y+4	; 0x04
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	8c 01       	movw	r16, r24
     930:	06 2b       	or	r16, r22
     932:	17 2b       	or	r17, r23
     934:	13 83       	std	Z+3, r17	; 0x03
     936:	02 83       	std	Z+2, r16	; 0x02
    DataStruct->Accel_Z_RAW = (s16) (Rec_Data[4] << 8 | Rec_Data[5]);
     938:	9d 81       	ldd	r25, Y+5	; 0x05
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	6e 81       	ldd	r22, Y+6	; 0x06
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	6c 01       	movw	r12, r24
     942:	c6 2a       	or	r12, r22
     944:	d7 2a       	or	r13, r23
     946:	d5 82       	std	Z+5, r13	; 0x05
     948:	c4 82       	std	Z+4, r12	; 0x04
    temp = (s16) (Rec_Data[6] << 8 | Rec_Data[7]);
     94a:	3f 81       	ldd	r19, Y+7	; 0x07
     94c:	20 e0       	ldi	r18, 0x00	; 0
     94e:	88 85       	ldd	r24, Y+8	; 0x08
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	79 01       	movw	r14, r18
     954:	e8 2a       	or	r14, r24
     956:	f9 2a       	or	r15, r25
    DataStruct->Gyro_X_RAW = (s16) (Rec_Data[8] << 8 | Rec_Data[9]);
     958:	39 85       	ldd	r19, Y+9	; 0x09
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	8a 85       	ldd	r24, Y+10	; 0x0a
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	49 01       	movw	r8, r18
     962:	88 2a       	or	r8, r24
     964:	99 2a       	or	r9, r25
     966:	93 8a       	std	Z+19, r9	; 0x13
     968:	82 8a       	std	Z+18, r8	; 0x12
    DataStruct->Gyro_Y_RAW = (s16) (Rec_Data[10] << 8 | Rec_Data[11]);
     96a:	3b 85       	ldd	r19, Y+11	; 0x0b
     96c:	20 e0       	ldi	r18, 0x00	; 0
     96e:	8c 85       	ldd	r24, Y+12	; 0x0c
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	19 01       	movw	r2, r18
     974:	28 2a       	or	r2, r24
     976:	39 2a       	or	r3, r25
     978:	35 8a       	std	Z+21, r3	; 0x15
     97a:	24 8a       	std	Z+20, r2	; 0x14
    DataStruct->Gyro_Z_RAW = (s16) (Rec_Data[12] << 8 | Rec_Data[13]);
     97c:	3d 85       	ldd	r19, Y+13	; 0x0d
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	8e 85       	ldd	r24, Y+14	; 0x0e
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	29 01       	movw	r4, r18
     986:	48 2a       	or	r4, r24
     988:	59 2a       	or	r5, r25
     98a:	57 8a       	std	Z+23, r5	; 0x17
     98c:	46 8a       	std	Z+22, r4	; 0x16

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
     98e:	ba 01       	movw	r22, r20
     990:	88 27       	eor	r24, r24
     992:	77 fd       	sbrc	r23, 7
     994:	80 95       	com	r24
     996:	98 2f       	mov	r25, r24
     998:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	40 e8       	ldi	r20, 0x80	; 128
     9a2:	58 e3       	ldi	r21, 0x38	; 56
     9a4:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__mulsf3>
     9a8:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixsfsi>
     9ac:	dc 01       	movw	r26, r24
     9ae:	cb 01       	movw	r24, r22
     9b0:	f5 01       	movw	r30, r10
     9b2:	86 83       	std	Z+6, r24	; 0x06
     9b4:	97 83       	std	Z+7, r25	; 0x07
     9b6:	a0 87       	std	Z+8, r26	; 0x08
     9b8:	b1 87       	std	Z+9, r27	; 0x09
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
     9ba:	b8 01       	movw	r22, r16
     9bc:	88 27       	eor	r24, r24
     9be:	77 fd       	sbrc	r23, 7
     9c0:	80 95       	com	r24
     9c2:	98 2f       	mov	r25, r24
     9c4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 e8       	ldi	r20, 0x80	; 128
     9ce:	58 e3       	ldi	r21, 0x38	; 56
     9d0:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__mulsf3>
     9d4:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixsfsi>
     9d8:	dc 01       	movw	r26, r24
     9da:	cb 01       	movw	r24, r22
     9dc:	f5 01       	movw	r30, r10
     9de:	82 87       	std	Z+10, r24	; 0x0a
     9e0:	93 87       	std	Z+11, r25	; 0x0b
     9e2:	a4 87       	std	Z+12, r26	; 0x0c
     9e4:	b5 87       	std	Z+13, r27	; 0x0d
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
     9e6:	b6 01       	movw	r22, r12
     9e8:	88 27       	eor	r24, r24
     9ea:	77 fd       	sbrc	r23, 7
     9ec:	80 95       	com	r24
     9ee:	98 2f       	mov	r25, r24
     9f0:	22 e5       	ldi	r18, 0x52	; 82
     9f2:	38 e3       	ldi	r19, 0x38	; 56
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	50 e0       	ldi	r21, 0x00	; 0
     9f8:	0e 94 2f 0b 	call	0x165e	; 0x165e <__divmodsi4>
     9fc:	f5 01       	movw	r30, r10
     9fe:	26 87       	std	Z+14, r18	; 0x0e
     a00:	37 87       	std	Z+15, r19	; 0x0f
     a02:	40 8b       	std	Z+16, r20	; 0x10
     a04:	51 8b       	std	Z+17, r21	; 0x11
    DataStruct->Temperature = (f32) ((s16) temp / (f32) 340.0 + (f32) 36.53);
     a06:	b7 01       	movw	r22, r14
     a08:	88 27       	eor	r24, r24
     a0a:	77 fd       	sbrc	r23, 7
     a0c:	80 95       	com	r24
     a0e:	98 2f       	mov	r25, r24
     a10:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	4a ea       	ldi	r20, 0xAA	; 170
     a1a:	53 e4       	ldi	r21, 0x43	; 67
     a1c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__divsf3>
     a20:	28 eb       	ldi	r18, 0xB8	; 184
     a22:	3e e1       	ldi	r19, 0x1E	; 30
     a24:	42 e1       	ldi	r20, 0x12	; 18
     a26:	52 e4       	ldi	r21, 0x42	; 66
     a28:	0e 94 0e 08 	call	0x101c	; 0x101c <__addsf3>
     a2c:	dc 01       	movw	r26, r24
     a2e:	cb 01       	movw	r24, r22
     a30:	f5 01       	movw	r30, r10
     a32:	84 a3       	lds	r24, 0x54
     a34:	95 a3       	lds	r25, 0x55
     a36:	a6 a3       	lds	r26, 0x56
     a38:	b7 a3       	lds	r27, 0x57
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
     a3a:	b4 01       	movw	r22, r8
     a3c:	88 27       	eor	r24, r24
     a3e:	77 fd       	sbrc	r23, 7
     a40:	80 95       	com	r24
     a42:	98 2f       	mov	r25, r24
     a44:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	43 e0       	ldi	r20, 0x03	; 3
     a4e:	53 e4       	ldi	r21, 0x43	; 67
     a50:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__divsf3>
     a54:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixsfsi>
     a58:	dc 01       	movw	r26, r24
     a5a:	cb 01       	movw	r24, r22
     a5c:	f5 01       	movw	r30, r10
     a5e:	80 8f       	std	Z+24, r24	; 0x18
     a60:	91 8f       	std	Z+25, r25	; 0x19
     a62:	a2 8f       	std	Z+26, r26	; 0x1a
     a64:	b3 8f       	std	Z+27, r27	; 0x1b
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
     a66:	b1 01       	movw	r22, r2
     a68:	88 27       	eor	r24, r24
     a6a:	77 fd       	sbrc	r23, 7
     a6c:	80 95       	com	r24
     a6e:	98 2f       	mov	r25, r24
     a70:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     a74:	20 e0       	ldi	r18, 0x00	; 0
     a76:	30 e0       	ldi	r19, 0x00	; 0
     a78:	43 e0       	ldi	r20, 0x03	; 3
     a7a:	53 e4       	ldi	r21, 0x43	; 67
     a7c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__divsf3>
     a80:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixsfsi>
     a84:	dc 01       	movw	r26, r24
     a86:	cb 01       	movw	r24, r22
     a88:	f5 01       	movw	r30, r10
     a8a:	84 8f       	std	Z+28, r24	; 0x1c
     a8c:	95 8f       	std	Z+29, r25	; 0x1d
     a8e:	a6 8f       	std	Z+30, r26	; 0x1e
     a90:	b7 8f       	std	Z+31, r27	; 0x1f
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
     a92:	b2 01       	movw	r22, r4
     a94:	88 27       	eor	r24, r24
     a96:	77 fd       	sbrc	r23, 7
     a98:	80 95       	com	r24
     a9a:	98 2f       	mov	r25, r24
     a9c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	43 e0       	ldi	r20, 0x03	; 3
     aa6:	53 e4       	ldi	r21, 0x43	; 67
     aa8:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__divsf3>
     aac:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixsfsi>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	f5 01       	movw	r30, r10
     ab6:	80 a3       	lds	r24, 0x50
     ab8:	91 a3       	lds	r25, 0x51
     aba:	a2 a3       	lds	r26, 0x52
     abc:	b3 a3       	lds	r27, 0x53

    // Kalman angle solve
    /* using Timer0 to get a tick value in Seconds */
    f64 dt = (f64) (TIMER0_GetTick() - timer);
     abe:	0e 94 bf 07 	call	0xf7e	; 0xf7e <TIMER0_GetTick>
     ac2:	ab 01       	movw	r20, r22
     ac4:	bc 01       	movw	r22, r24
     ac6:	80 91 c4 00 	lds	r24, 0x00C4
     aca:	90 91 c5 00 	lds	r25, 0x00C5
     ace:	a0 e0       	ldi	r26, 0x00	; 0
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	8a 01       	movw	r16, r20
     ad4:	9b 01       	movw	r18, r22
     ad6:	08 1b       	sub	r16, r24
     ad8:	19 0b       	sbc	r17, r25
     ada:	2a 0b       	sbc	r18, r26
     adc:	3b 0b       	sbc	r19, r27
     ade:	0f 87       	std	Y+15, r16	; 0x0f
     ae0:	18 8b       	std	Y+16, r17	; 0x10
     ae2:	29 8b       	std	Y+17, r18	; 0x11
     ae4:	3a 8b       	std	Y+18, r19	; 0x12
    timer = TIMER0_GetTick();
     ae6:	0e 94 bf 07 	call	0xf7e	; 0xf7e <TIMER0_GetTick>
     aea:	dc 01       	movw	r26, r24
     aec:	cb 01       	movw	r24, r22
     aee:	90 93 c5 00 	sts	0x00C5, r25
     af2:	80 93 c4 00 	sts	0x00C4, r24
    f64 roll;
    f64 roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
     af6:	f5 01       	movw	r30, r10
     af8:	80 80       	ld	r8, Z
     afa:	91 80       	ldd	r9, Z+1	; 0x01
     afc:	24 80       	ldd	r2, Z+4	; 0x04
     afe:	35 80       	ldd	r3, Z+5	; 0x05
     b00:	88 9c       	mul	r8, r8
     b02:	b0 01       	movw	r22, r0
     b04:	89 9c       	mul	r8, r9
     b06:	70 0d       	add	r23, r0
     b08:	98 9c       	mul	r9, r8
     b0a:	70 0d       	add	r23, r0
     b0c:	11 24       	eor	r1, r1
     b0e:	22 9c       	mul	r2, r2
     b10:	c0 01       	movw	r24, r0
     b12:	23 9c       	mul	r2, r3
     b14:	90 0d       	add	r25, r0
     b16:	32 9c       	mul	r3, r2
     b18:	90 0d       	add	r25, r0
     b1a:	11 24       	eor	r1, r1
     b1c:	68 0f       	add	r22, r24
     b1e:	79 1f       	adc	r23, r25
    // Kalman angle solve
    /* using Timer0 to get a tick value in Seconds */
    f64 dt = (f64) (TIMER0_GetTick() - timer);
    timer = TIMER0_GetTick();
    f64 roll;
    f64 roll_sqrt = sqrt(
     b20:	88 27       	eor	r24, r24
     b22:	77 fd       	sbrc	r23, 7
     b24:	80 95       	com	r24
     b26:	98 2f       	mov	r25, r24
     b28:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     b2c:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sqrt>
     b30:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixsfsi>
     b34:	c6 2e       	mov	r12, r22
     b36:	f7 2e       	mov	r15, r23
     b38:	08 2f       	mov	r16, r24
     b3a:	19 2f       	mov	r17, r25
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
    if (roll_sqrt != 0.0) {
     b3c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	a9 01       	movw	r20, r18
     b46:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__cmpsf2>
     b4a:	88 23       	and	r24, r24
     b4c:	01 f1       	breq	.+64     	; 0xb8e <MPU6050_Read_All+0x2c0>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
     b4e:	f5 01       	movw	r30, r10
     b50:	62 81       	ldd	r22, Z+2	; 0x02
     b52:	73 81       	ldd	r23, Z+3	; 0x03
     b54:	88 27       	eor	r24, r24
     b56:	77 fd       	sbrc	r23, 7
     b58:	80 95       	com	r24
     b5a:	98 2f       	mov	r25, r24
     b5c:	2c 2d       	mov	r18, r12
     b5e:	3f 2d       	mov	r19, r15
     b60:	40 2f       	mov	r20, r16
     b62:	51 2f       	mov	r21, r17
     b64:	0e 94 2f 0b 	call	0x165e	; 0x165e <__divmodsi4>
     b68:	ca 01       	movw	r24, r20
     b6a:	b9 01       	movw	r22, r18
     b6c:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     b70:	0e 94 ac 08 	call	0x1158	; 0x1158 <atan>
     b74:	21 ee       	ldi	r18, 0xE1	; 225
     b76:	3e e2       	ldi	r19, 0x2E	; 46
     b78:	45 e6       	ldi	r20, 0x65	; 101
     b7a:	52 e4       	ldi	r21, 0x42	; 66
     b7c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__mulsf3>
     b80:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixsfsi>
     b84:	46 2e       	mov	r4, r22
     b86:	57 2e       	mov	r5, r23
     b88:	68 2e       	mov	r6, r24
     b8a:	79 2e       	mov	r7, r25
     b8c:	03 c0       	rjmp	.+6      	; 0xb94 <MPU6050_Read_All+0x2c6>
    } else {
        roll = 0.0;
     b8e:	44 24       	eor	r4, r4
     b90:	55 24       	eor	r5, r5
     b92:	32 01       	movw	r6, r4
    }
    f64 pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
     b94:	66 27       	eor	r22, r22
     b96:	77 27       	eor	r23, r23
     b98:	68 19       	sub	r22, r8
     b9a:	79 09       	sbc	r23, r9
     b9c:	88 27       	eor	r24, r24
     b9e:	77 fd       	sbrc	r23, 7
     ba0:	80 95       	com	r24
     ba2:	98 2f       	mov	r25, r24
     ba4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     ba8:	6b 01       	movw	r12, r22
     baa:	7c 01       	movw	r14, r24
     bac:	b1 01       	movw	r22, r2
     bae:	88 27       	eor	r24, r24
     bb0:	77 fd       	sbrc	r23, 7
     bb2:	80 95       	com	r24
     bb4:	98 2f       	mov	r25, r24
     bb6:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     bba:	9b 01       	movw	r18, r22
     bbc:	ac 01       	movw	r20, r24
     bbe:	c7 01       	movw	r24, r14
     bc0:	b6 01       	movw	r22, r12
     bc2:	0e 94 81 08 	call	0x1102	; 0x1102 <atan2>
     bc6:	21 ee       	ldi	r18, 0xE1	; 225
     bc8:	3e e2       	ldi	r19, 0x2E	; 46
     bca:	45 e6       	ldi	r20, 0x65	; 101
     bcc:	52 e4       	ldi	r21, 0x42	; 66
     bce:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__mulsf3>
     bd2:	0e 94 40 09 	call	0x1280	; 0x1280 <__fixsfsi>
     bd6:	46 2f       	mov	r20, r22
     bd8:	57 2f       	mov	r21, r23
     bda:	68 2f       	mov	r22, r24
     bdc:	79 2f       	mov	r23, r25
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
     bde:	46 3a       	cpi	r20, 0xA6	; 166
     be0:	ff ef       	ldi	r31, 0xFF	; 255
     be2:	5f 07       	cpc	r21, r31
     be4:	ff ef       	ldi	r31, 0xFF	; 255
     be6:	6f 07       	cpc	r22, r31
     be8:	ff ef       	ldi	r31, 0xFF	; 255
     bea:	7f 07       	cpc	r23, r31
     bec:	54 f4       	brge	.+20     	; 0xc02 <MPU6050_Read_All+0x334>
     bee:	f5 01       	movw	r30, r10
     bf0:	84 a5       	lds	r24, 0x64
     bf2:	95 a5       	lds	r25, 0x65
     bf4:	a6 a5       	lds	r26, 0x66
     bf6:	b7 a5       	lds	r27, 0x67
     bf8:	8b 35       	cpi	r24, 0x5B	; 91
     bfa:	91 05       	cpc	r25, r1
     bfc:	a1 05       	cpc	r26, r1
     bfe:	b1 05       	cpc	r27, r1
     c00:	94 f4       	brge	.+36     	; 0xc26 <MPU6050_Read_All+0x358>
     c02:	4b 35       	cpi	r20, 0x5B	; 91
     c04:	51 05       	cpc	r21, r1
     c06:	61 05       	cpc	r22, r1
     c08:	71 05       	cpc	r23, r1
     c0a:	dc f0       	brlt	.+54     	; 0xc42 <MPU6050_Read_All+0x374>
     c0c:	f5 01       	movw	r30, r10
     c0e:	84 a5       	lds	r24, 0x64
     c10:	95 a5       	lds	r25, 0x65
     c12:	a6 a5       	lds	r26, 0x66
     c14:	b7 a5       	lds	r27, 0x67
     c16:	86 3a       	cpi	r24, 0xA6	; 166
     c18:	ff ef       	ldi	r31, 0xFF	; 255
     c1a:	9f 07       	cpc	r25, r31
     c1c:	ff ef       	ldi	r31, 0xFF	; 255
     c1e:	af 07       	cpc	r26, r31
     c20:	ff ef       	ldi	r31, 0xFF	; 255
     c22:	bf 07       	cpc	r27, r31
     c24:	74 f4       	brge	.+28     	; 0xc42 <MPU6050_Read_All+0x374>
        KalmanY.angle = pitch;
     c26:	40 93 7c 00 	sts	0x007C, r20
     c2a:	50 93 7d 00 	sts	0x007D, r21
     c2e:	60 93 7e 00 	sts	0x007E, r22
     c32:	70 93 7f 00 	sts	0x007F, r23
        DataStruct->KalmanAngleY = pitch;
     c36:	f5 01       	movw	r30, r10
     c38:	44 a7       	lds	r20, 0x74
     c3a:	55 a7       	lds	r21, 0x75
     c3c:	66 a7       	lds	r22, 0x76
     c3e:	77 a7       	lds	r23, 0x77
     c40:	14 c0       	rjmp	.+40     	; 0xc6a <MPU6050_Read_All+0x39c>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
     c42:	f5 01       	movw	r30, r10
     c44:	04 8d       	ldd	r16, Z+28	; 0x1c
     c46:	15 8d       	ldd	r17, Z+29	; 0x1d
     c48:	26 8d       	ldd	r18, Z+30	; 0x1e
     c4a:	37 8d       	ldd	r19, Z+31	; 0x1f
     c4c:	80 e7       	ldi	r24, 0x70	; 112
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	cf 84       	ldd	r12, Y+15	; 0x0f
     c52:	d8 88       	ldd	r13, Y+16	; 0x10
     c54:	e9 88       	ldd	r14, Y+17	; 0x11
     c56:	fa 88       	ldd	r15, Y+18	; 0x12
     c58:	0e 94 c5 02 	call	0x58a	; 0x58a <Kalman_getAngle>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	f5 01       	movw	r30, r10
     c62:	84 a7       	lds	r24, 0x74
     c64:	95 a7       	lds	r25, 0x75
     c66:	a6 a7       	lds	r26, 0x76
     c68:	b7 a7       	lds	r27, 0x77
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
     c6a:	f5 01       	movw	r30, r10
     c6c:	64 a5       	lds	r22, 0x64
     c6e:	75 a5       	lds	r23, 0x65
     c70:	86 a5       	lds	r24, 0x66
     c72:	97 a5       	lds	r25, 0x67
     c74:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     c78:	9f 77       	andi	r25, 0x7F	; 127
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	44 eb       	ldi	r20, 0xB4	; 180
     c80:	52 e4       	ldi	r21, 0x42	; 66
     c82:	0e 94 48 0a 	call	0x1490	; 0x1490 <__gesf2>
     c86:	18 16       	cp	r1, r24
     c88:	84 f4       	brge	.+32     	; 0xcaa <MPU6050_Read_All+0x3dc>
        DataStruct->Gx = -DataStruct->Gx;
     c8a:	f5 01       	movw	r30, r10
     c8c:	80 8d       	ldd	r24, Z+24	; 0x18
     c8e:	91 8d       	ldd	r25, Z+25	; 0x19
     c90:	a2 8d       	ldd	r26, Z+26	; 0x1a
     c92:	b3 8d       	ldd	r27, Z+27	; 0x1b
     c94:	b0 95       	com	r27
     c96:	a0 95       	com	r26
     c98:	90 95       	com	r25
     c9a:	81 95       	neg	r24
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	af 4f       	sbci	r26, 0xFF	; 255
     ca0:	bf 4f       	sbci	r27, 0xFF	; 255
     ca2:	80 8f       	std	Z+24, r24	; 0x18
     ca4:	91 8f       	std	Z+25, r25	; 0x19
     ca6:	a2 8f       	std	Z+26, r26	; 0x1a
     ca8:	b3 8f       	std	Z+27, r27	; 0x1b
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
     caa:	f5 01       	movw	r30, r10
     cac:	04 8d       	ldd	r16, Z+28	; 0x1c
     cae:	15 8d       	ldd	r17, Z+29	; 0x1d
     cb0:	26 8d       	ldd	r18, Z+30	; 0x1e
     cb2:	37 8d       	ldd	r19, Z+31	; 0x1f
     cb4:	84 e9       	ldi	r24, 0x94	; 148
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	b3 01       	movw	r22, r6
     cba:	a2 01       	movw	r20, r4
     cbc:	cf 84       	ldd	r12, Y+15	; 0x0f
     cbe:	d8 88       	ldd	r13, Y+16	; 0x10
     cc0:	e9 88       	ldd	r14, Y+17	; 0x11
     cc2:	fa 88       	ldd	r15, Y+18	; 0x12
     cc4:	0e 94 c5 02 	call	0x58a	; 0x58a <Kalman_getAngle>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	f5 01       	movw	r30, r10
     cce:	80 a7       	lds	r24, 0x70
     cd0:	91 a7       	lds	r25, 0x71
     cd2:	a2 a7       	lds	r26, 0x72
     cd4:	b3 a7       	lds	r27, 0x73

}
     cd6:	62 96       	adiw	r28, 0x12	; 18
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	df 90       	pop	r13
     cf0:	cf 90       	pop	r12
     cf2:	bf 90       	pop	r11
     cf4:	af 90       	pop	r10
     cf6:	9f 90       	pop	r9
     cf8:	8f 90       	pop	r8
     cfa:	7f 90       	pop	r7
     cfc:	6f 90       	pop	r6
     cfe:	5f 90       	pop	r5
     d00:	4f 90       	pop	r4
     d02:	3f 90       	pop	r3
     d04:	2f 90       	pop	r2
     d06:	08 95       	ret

00000d08 <INT0_Init>:

#include "EXTI0.h"

void INT0_Init(void)
{
	SREG  &= ~(1<<7);                   // Disable interrupts by clearing I-bit
     d08:	8f b7       	in	r24, 0x3f	; 63
     d0a:	8f 77       	andi	r24, 0x7F	; 127
     d0c:	8f bf       	out	0x3f, r24	; 63
	DDRD  &= (~(1<<PD2));               // Configure INT0/PD2 as input pin
     d0e:	8a 98       	cbi	0x11, 2	; 17
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
     d10:	8b b7       	in	r24, 0x3b	; 59
     d12:	80 64       	ori	r24, 0x40	; 64
     d14:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
     d16:	85 b7       	in	r24, 0x35	; 53
     d18:	83 60       	ori	r24, 0x03	; 3
     d1a:	85 bf       	out	0x35, r24	; 53
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
     d1c:	8f b7       	in	r24, 0x3f	; 63
     d1e:	80 68       	ori	r24, 0x80	; 128
     d20:	8f bf       	out	0x3f, r24	; 63
     d22:	08 95       	ret

00000d24 <INT1_Init>:
#include "EXTI1.h"

/* External INT1 enable and configuration function */
void INT1_Init(void)
{
	SREG  &= ~(1<<7);      // Disable interrupts by clearing I-bit
     d24:	8f b7       	in	r24, 0x3f	; 63
     d26:	8f 77       	andi	r24, 0x7F	; 127
     d28:	8f bf       	out	0x3f, r24	; 63
	DDRD  &= (~(1<<PD3));  // Configure INT1/PD3 as input pin
     d2a:	8b 98       	cbi	0x11, 3	; 17
	PORTD |= (1<<PD3);     // Enable the internal pull up resistor at PD3 pin
     d2c:	93 9a       	sbi	0x12, 3	; 18
	GICR  |= (1<<INT1);    // Enable external interrupt pin INT1
     d2e:	8b b7       	in	r24, 0x3b	; 59
     d30:	80 68       	ori	r24, 0x80	; 128
     d32:	8b bf       	out	0x3b, r24	; 59
	// Trigger INT1 with the falling edge
	MCUCR |= (1<<ISC11);
     d34:	85 b7       	in	r24, 0x35	; 53
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1<<ISC10);
     d3a:	85 b7       	in	r24, 0x35	; 53
     d3c:	8b 7f       	andi	r24, 0xFB	; 251
     d3e:	85 bf       	out	0x35, r24	; 53
	SREG  |= (1<<7);       // Enable interrupts by setting I-bit
     d40:	8f b7       	in	r24, 0x3f	; 63
     d42:	80 68       	ori	r24, 0x80	; 128
     d44:	8f bf       	out	0x3f, r24	; 63
}
     d46:	08 95       	ret

00000d48 <TWI_init>:
#include "i2c.h"

void TWI_init(void)
{
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	80 b9       	out	0x00, r24	; 0
	TWSR = 0x00;
     d4c:	11 b8       	out	0x01, r1	; 1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
     d4e:	82 b9       	out	0x02, r24	; 2
	
    TWCR = (1<<TWEN); /* enable TWI */
     d50:	84 e0       	ldi	r24, 0x04	; 4
     d52:	86 bf       	out	0x36, r24	; 54
}
     d54:	08 95       	ret

00000d56 <TWI_start>:
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     d56:	84 ea       	ldi	r24, 0xA4	; 164
     d58:	86 bf       	out	0x36, r24	; 54
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d5a:	06 b6       	in	r0, 0x36	; 54
     d5c:	07 fe       	sbrs	r0, 7
     d5e:	fd cf       	rjmp	.-6      	; 0xd5a <TWI_start+0x4>
}
     d60:	08 95       	ret

00000d62 <TWI_stop>:
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     d62:	84 e9       	ldi	r24, 0x94	; 148
     d64:	86 bf       	out	0x36, r24	; 54
}
     d66:	08 95       	ret

00000d68 <TWI_write>:

void TWI_write(u8 data)
{
    /* Put data On TWI data Register */
    TWDR = data;
     d68:	83 b9       	out	0x03, r24	; 3
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     d6a:	84 e8       	ldi	r24, 0x84	; 132
     d6c:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d6e:	06 b6       	in	r0, 0x36	; 54
     d70:	07 fe       	sbrs	r0, 7
     d72:	fd cf       	rjmp	.-6      	; 0xd6e <TWI_write+0x6>
}
     d74:	08 95       	ret

00000d76 <TWI_readWithACK>:
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     d76:	84 ec       	ldi	r24, 0xC4	; 196
     d78:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d7a:	06 b6       	in	r0, 0x36	; 54
     d7c:	07 fe       	sbrs	r0, 7
     d7e:	fd cf       	rjmp	.-6      	; 0xd7a <TWI_readWithACK+0x4>
    /* Read Data */
    return TWDR;
     d80:	83 b1       	in	r24, 0x03	; 3
}
     d82:	08 95       	ret

00000d84 <TWI_readWithNACK>:
{
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     d84:	84 e8       	ldi	r24, 0x84	; 132
     d86:	86 bf       	out	0x36, r24	; 54
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     d88:	06 b6       	in	r0, 0x36	; 54
     d8a:	07 fe       	sbrs	r0, 7
     d8c:	fd cf       	rjmp	.-6      	; 0xd88 <TWI_readWithNACK+0x4>
    /* Read Data */
    return TWDR;
     d8e:	83 b1       	in	r24, 0x03	; 3
}
     d90:	08 95       	ret

00000d92 <TWI_getStatus>:

u8 TWI_getStatus(void)
{
    u8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     d92:	81 b1       	in	r24, 0x01	; 1
    return status;
}
     d94:	88 7f       	andi	r24, 0xF8	; 248
     d96:	08 95       	ret

00000d98 <I2C_Mem_Write>:



u8 I2C_Mem_Write(u8 DeviceAdd, u8 MemAddress, u8 *pData)
{
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	18 2f       	mov	r17, r24
     da2:	06 2f       	mov	r16, r22
     da4:	ea 01       	movw	r28, r20
	/* Generate Start */
	TWI_start();
     da6:	0e 94 ab 06 	call	0xd56	; 0xd56 <TWI_start>
	if (TWI_getStatus() != TW_START)
     daa:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_getStatus>
     dae:	88 30       	cpi	r24, 0x08	; 8
     db0:	c9 f4       	brne	.+50     	; 0xde4 <I2C_Mem_Write+0x4c>
	return ERROR;
	
	// Send Slave Address
	TWI_write(DeviceAdd);
     db2:	81 2f       	mov	r24, r17
     db4:	0e 94 b4 06 	call	0xd68	; 0xd68 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     db8:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_getStatus>
     dbc:	88 31       	cpi	r24, 0x18	; 24
     dbe:	a1 f4       	brne	.+40     	; 0xde8 <I2C_Mem_Write+0x50>
	return ERROR;
	
	// Send Memory Address
	TWI_write(MemAddress);
     dc0:	80 2f       	mov	r24, r16
     dc2:	0e 94 b4 06 	call	0xd68	; 0xd68 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     dc6:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_getStatus>
     dca:	88 32       	cpi	r24, 0x28	; 40
     dcc:	79 f4       	brne	.+30     	; 0xdec <I2C_Mem_Write+0x54>
	return ERROR;

	// Send Data
	TWI_write(*pData);
     dce:	88 81       	ld	r24, Y
     dd0:	0e 94 b4 06 	call	0xd68	; 0xd68 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     dd4:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_getStatus>
     dd8:	88 32       	cpi	r24, 0x28	; 40
     dda:	51 f4       	brne	.+20     	; 0xdf0 <I2C_Mem_Write+0x58>
	return ERROR;

	/* Send the Stop Bit */
	TWI_stop();
     ddc:	0e 94 b1 06 	call	0xd62	; 0xd62 <TWI_stop>
	
	return SUCCESS;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	07 c0       	rjmp	.+14     	; 0xdf2 <I2C_Mem_Write+0x5a>
u8 I2C_Mem_Write(u8 DeviceAdd, u8 MemAddress, u8 *pData)
{
	/* Generate Start */
	TWI_start();
	if (TWI_getStatus() != TW_START)
	return ERROR;
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <I2C_Mem_Write+0x5a>
	
	// Send Slave Address
	TWI_write(DeviceAdd);
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
	return ERROR;
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <I2C_Mem_Write+0x5a>
	
	// Send Memory Address
	TWI_write(MemAddress);
	if (TWI_getStatus() != TW_MT_DATA_ACK)
	return ERROR;
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	01 c0       	rjmp	.+2      	; 0xdf2 <I2C_Mem_Write+0x5a>

	// Send Data
	TWI_write(*pData);
	if (TWI_getStatus() != TW_MT_DATA_ACK)
	return ERROR;
     df0:	80 e0       	ldi	r24, 0x00	; 0

	/* Send the Stop Bit */
	TWI_stop();
	
	return SUCCESS;
}
     df2:	df 91       	pop	r29
     df4:	cf 91       	pop	r28
     df6:	1f 91       	pop	r17
     df8:	0f 91       	pop	r16
     dfa:	08 95       	ret

00000dfc <I2C_Mem_Read>:



u8 I2C_Mem_Read(u8 DeviceAdd, u8 MemAddress, u8 *pData, u8 size)
{
     dfc:	af 92       	push	r10
     dfe:	bf 92       	push	r11
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14
     e06:	ff 92       	push	r15
     e08:	1f 93       	push	r17
     e0a:	cf 93       	push	r28
     e0c:	df 93       	push	r29
     e0e:	c8 2f       	mov	r28, r24
     e10:	d6 2f       	mov	r29, r22
     e12:	7a 01       	movw	r14, r20
     e14:	12 2f       	mov	r17, r18
	/* Generate Start */
	TWI_start();
     e16:	0e 94 ab 06 	call	0xd56	; 0xd56 <TWI_start>
	if (TWI_getStatus() != TW_START)
     e1a:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_getStatus>
     e1e:	88 30       	cpi	r24, 0x08	; 8
     e20:	e1 f5       	brne	.+120    	; 0xe9a <I2C_Mem_Read+0x9e>
	return ERROR; // Error handling, or return an error code

	// Send Slave Address with Write Bit
	TWI_write(DeviceAdd);
     e22:	8c 2f       	mov	r24, r28
     e24:	0e 94 b4 06 	call	0xd68	; 0xd68 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     e28:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_getStatus>
     e2c:	88 31       	cpi	r24, 0x18	; 24
     e2e:	b9 f5       	brne	.+110    	; 0xe9e <I2C_Mem_Read+0xa2>
	return ERROR; // Error handling, or return an error code

	// Send Memory Address
	TWI_write(MemAddress);
     e30:	8d 2f       	mov	r24, r29
     e32:	0e 94 b4 06 	call	0xd68	; 0xd68 <TWI_write>
	if (TWI_getStatus() != TW_MT_DATA_ACK)
     e36:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_getStatus>
     e3a:	88 32       	cpi	r24, 0x28	; 40
     e3c:	91 f5       	brne	.+100    	; 0xea2 <I2C_Mem_Read+0xa6>
	return ERROR; // Error handling, or return an error code

	// Generate Repeated Start
	TWI_start();
     e3e:	0e 94 ab 06 	call	0xd56	; 0xd56 <TWI_start>
	if (TWI_getStatus() != TW_REP_START)
     e42:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_getStatus>
     e46:	80 31       	cpi	r24, 0x10	; 16
     e48:	71 f5       	brne	.+92     	; 0xea6 <I2C_Mem_Read+0xaa>
	return ERROR; // Error handling, or return an error code

	// Send Slave Address with Read Bit
	TWI_write(DeviceAdd | 0x01); // Read mode
     e4a:	8c 2f       	mov	r24, r28
     e4c:	81 60       	ori	r24, 0x01	; 1
     e4e:	0e 94 b4 06 	call	0xd68	; 0xd68 <TWI_write>
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     e52:	0e 94 c9 06 	call	0xd92	; 0xd92 <TWI_getStatus>
     e56:	80 34       	cpi	r24, 0x40	; 64
     e58:	41 f5       	brne	.+80     	; 0xeaa <I2C_Mem_Read+0xae>
	return ERROR; // Error handling, or return an error code

	// Read Data
	for (int i = 0; i < size - 1; ++i) {
     e5a:	c1 2f       	mov	r28, r17
     e5c:	d0 e0       	ldi	r29, 0x00	; 0
     e5e:	21 97       	sbiw	r28, 0x01	; 1
     e60:	1c 16       	cp	r1, r28
     e62:	1d 06       	cpc	r1, r29
     e64:	74 f4       	brge	.+28     	; 0xe82 <I2C_Mem_Read+0x86>
     e66:	57 01       	movw	r10, r14
     e68:	cc 24       	eor	r12, r12
     e6a:	dd 24       	eor	r13, r13
		pData[i] = TWI_readWithACK();
     e6c:	0e 94 bb 06 	call	0xd76	; 0xd76 <TWI_readWithACK>
     e70:	f5 01       	movw	r30, r10
     e72:	81 93       	st	Z+, r24
     e74:	5f 01       	movw	r10, r30
	TWI_write(DeviceAdd | 0x01); // Read mode
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
	return ERROR; // Error handling, or return an error code

	// Read Data
	for (int i = 0; i < size - 1; ++i) {
     e76:	08 94       	sec
     e78:	c1 1c       	adc	r12, r1
     e7a:	d1 1c       	adc	r13, r1
     e7c:	cc 16       	cp	r12, r28
     e7e:	dd 06       	cpc	r13, r29
     e80:	ac f3       	brlt	.-22     	; 0xe6c <I2C_Mem_Read+0x70>
		pData[i] = TWI_readWithACK();
	}
	pData[size - 1] = TWI_readWithNACK(); // Read last byte with NACK
     e82:	c1 2f       	mov	r28, r17
     e84:	d0 e0       	ldi	r29, 0x00	; 0
     e86:	21 97       	sbiw	r28, 0x01	; 1
     e88:	ce 0d       	add	r28, r14
     e8a:	df 1d       	adc	r29, r15
     e8c:	0e 94 c2 06 	call	0xd84	; 0xd84 <TWI_readWithNACK>
     e90:	88 83       	st	Y, r24

	/* Send the Stop Bit */
	TWI_stop();
     e92:	0e 94 b1 06 	call	0xd62	; 0xd62 <TWI_stop>
	
	return SUCCESS;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	09 c0       	rjmp	.+18     	; 0xeac <I2C_Mem_Read+0xb0>
u8 I2C_Mem_Read(u8 DeviceAdd, u8 MemAddress, u8 *pData, u8 size)
{
	/* Generate Start */
	TWI_start();
	if (TWI_getStatus() != TW_START)
	return ERROR; // Error handling, or return an error code
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	07 c0       	rjmp	.+14     	; 0xeac <I2C_Mem_Read+0xb0>

	// Send Slave Address with Write Bit
	TWI_write(DeviceAdd);
	if (TWI_getStatus() != TW_MT_SLA_W_ACK)
	return ERROR; // Error handling, or return an error code
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <I2C_Mem_Read+0xb0>

	// Send Memory Address
	TWI_write(MemAddress);
	if (TWI_getStatus() != TW_MT_DATA_ACK)
	return ERROR; // Error handling, or return an error code
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	03 c0       	rjmp	.+6      	; 0xeac <I2C_Mem_Read+0xb0>

	// Generate Repeated Start
	TWI_start();
	if (TWI_getStatus() != TW_REP_START)
	return ERROR; // Error handling, or return an error code
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <I2C_Mem_Read+0xb0>

	// Send Slave Address with Read Bit
	TWI_write(DeviceAdd | 0x01); // Read mode
	if (TWI_getStatus() != TW_MT_SLA_R_ACK)
	return ERROR; // Error handling, or return an error code
     eaa:	80 e0       	ldi	r24, 0x00	; 0

	/* Send the Stop Bit */
	TWI_stop();
	
	return SUCCESS;
}
     eac:	df 91       	pop	r29
     eae:	cf 91       	pop	r28
     eb0:	1f 91       	pop	r17
     eb2:	ff 90       	pop	r15
     eb4:	ef 90       	pop	r14
     eb6:	df 90       	pop	r13
     eb8:	cf 90       	pop	r12
     eba:	bf 90       	pop	r11
     ebc:	af 90       	pop	r10
     ebe:	08 95       	ret

00000ec0 <Timer2_PWM_init>:
/*									TIMER2_PWM	                        */
/************************************************************************/

void Timer2_PWM_init()
{
	TCNT2 = 0; // Set Timer Initial Value to 0
     ec0:	14 bc       	out	0x24, r1	; 36

	OCR2  = 0; //Set Compare value
     ec2:	13 bc       	out	0x23, r1	; 35

	DDRD  = DDRD | (1<<PD7); // Configure PD7/OC2 as output pin --> pin where the PWM signal is generated from MC
     ec4:	8f 9a       	sbi	0x11, 7	; 17
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM21=1 & WGM20=1
	 * 3. Clear OC2 when match occurs (non inverted mode) COM20=0 & COM21=1
	 * 4. clock = F_CPU/8 CS20=0 CS21=1 CS22=0
	 */
	TCCR2 = (1<<WGM20) | (1<<WGM21) | (1<<COM21) | (1<<CS21);
     ec6:	8a e6       	ldi	r24, 0x6A	; 106
     ec8:	85 bd       	out	0x25, r24	; 37
}
     eca:	08 95       	ret

00000ecc <Timer2_PWM_SetDuty>:


void Timer2_PWM_SetDuty(u8 setDutyCycle)
{
	
	OCR2  = (setDutyCycle * 2.55); //Set Compare value
     ecc:	68 2f       	mov	r22, r24
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     ed8:	23 e3       	ldi	r18, 0x33	; 51
     eda:	33 e3       	ldi	r19, 0x33	; 51
     edc:	43 e2       	ldi	r20, 0x23	; 35
     ede:	50 e4       	ldi	r21, 0x40	; 64
     ee0:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__mulsf3>
     ee4:	0e 94 45 09 	call	0x128a	; 0x128a <__fixunssfsi>
     ee8:	63 bd       	out	0x23, r22	; 35
}
     eea:	08 95       	ret

00000eec <Timer2_PWM_Stop>:


void Timer2_PWM_Stop()
{
	OCR2  = 0;
     eec:	13 bc       	out	0x23, r1	; 35
}
     eee:	08 95       	ret

00000ef0 <Timer2_PWM_Dec>:


void Timer2_PWM_Dec()
{
	u8 temp = OCR2;
     ef0:	83 b5       	in	r24, 0x23	; 35
	
	temp -= 5;
     ef2:	85 50       	subi	r24, 0x05	; 5
	
	OCR2 = temp;
     ef4:	83 bd       	out	0x23, r24	; 35
}
     ef6:	08 95       	ret

00000ef8 <Timer1A_PWM_init>:
/************************************************************************/


void Timer1A_PWM_init()
{
	TCNT1 = 0; // Set Timer Initial Value to 0
     ef8:	1d bc       	out	0x2d, r1	; 45
     efa:	1c bc       	out	0x2c, r1	; 44

	OCR1A  = 0; //Set Compare value
     efc:	1b bc       	out	0x2b, r1	; 43
     efe:	1a bc       	out	0x2a, r1	; 42

	DDRD  = DDRD | (1<<PD5); // Configure PD5/OC1A as output pin --> pin where the PWM signal is generated from MC
     f00:	8d 9a       	sbi	0x11, 5	; 17
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM21=1 & WGM20=1
	 * 3. Clear OC2 when match occurs (non inverted mode) COM20=0 & COM21=1
	 * 4. clock = F_CPU/8 CS20=0 CS21=1 CS22=0
	 */
	TCCR1A =(1<<WGM11) | (1<<COM1A1);
     f02:	82 e8       	ldi	r24, 0x82	; 130
     f04:	8f bd       	out	0x2f, r24	; 47
	
	TCCR1B = (1<<WGM12)| (1<<WGM13)| (1<<CS11);
     f06:	8a e1       	ldi	r24, 0x1A	; 26
     f08:	8e bd       	out	0x2e, r24	; 46
}
     f0a:	08 95       	ret

00000f0c <Timer1A_PWM_SetDuty>:


void Timer1A_PWM_SetDuty(u8 setDutyCycle)
{
	OCR1A  = (setDutyCycle * 655.35); //Set Compare value
     f0c:	68 2f       	mov	r22, r24
     f0e:	70 e0       	ldi	r23, 0x00	; 0
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__floatsisf>
     f18:	26 e6       	ldi	r18, 0x66	; 102
     f1a:	36 ed       	ldi	r19, 0xD6	; 214
     f1c:	43 e2       	ldi	r20, 0x23	; 35
     f1e:	54 e4       	ldi	r21, 0x44	; 68
     f20:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__mulsf3>
     f24:	0e 94 45 09 	call	0x128a	; 0x128a <__fixunssfsi>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	9b bd       	out	0x2b, r25	; 43
     f2e:	8a bd       	out	0x2a, r24	; 42
}
     f30:	08 95       	ret

00000f32 <Timer1A_PWM_Stop>:

void Timer1A_PWM_Stop()
{
	OCR1A  = 0;
     f32:	1b bc       	out	0x2b, r1	; 43
     f34:	1a bc       	out	0x2a, r1	; 42
}
     f36:	08 95       	ret

00000f38 <Timer1A_PWM_Dec>:

void Timer1A_PWM_Dec()
{
	u16 temp = OCR1A;
     f38:	8a b5       	in	r24, 0x2a	; 42
     f3a:	9b b5       	in	r25, 0x2b	; 43
	
	temp -= 10;
     f3c:	0a 97       	sbiw	r24, 0x0a	; 10
	
	OCR1A = temp;
     f3e:	9b bd       	out	0x2b, r25	; 43
     f40:	8a bd       	out	0x2a, r24	; 42
     f42:	08 95       	ret

00000f44 <TIMER0_init_CTC_mode>:

f64 Tick = 0;

void TIMER0_init_CTC_mode()
{
	TCNT0 = 0;    // Set Timer initial value to 0
     f44:	12 be       	out	0x32, r1	; 50
	OCR0  = 250; // Set Compare Value
     f46:	8a ef       	ldi	r24, 0xFA	; 250
     f48:	8c bf       	out	0x3c, r24	; 60
	TIMSK |= (1<<OCIE0); // Enable Timer0 Compare Interrupt
     f4a:	89 b7       	in	r24, 0x39	; 57
     f4c:	82 60       	ori	r24, 0x02	; 2
     f4e:	89 bf       	out	0x39, r24	; 57
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0 
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS02) | (1<<CS00);
     f50:	8d e8       	ldi	r24, 0x8D	; 141
     f52:	83 bf       	out	0x33, r24	; 51
}
     f54:	08 95       	ret

00000f56 <TIMER0_IncTick>:



void TIMER0_IncTick()
{
	Tick++;
     f56:	80 91 b8 00 	lds	r24, 0x00B8
     f5a:	90 91 b9 00 	lds	r25, 0x00B9
     f5e:	a0 91 ba 00 	lds	r26, 0x00BA
     f62:	b0 91 bb 00 	lds	r27, 0x00BB
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	a1 1d       	adc	r26, r1
     f6a:	b1 1d       	adc	r27, r1
     f6c:	80 93 b8 00 	sts	0x00B8, r24
     f70:	90 93 b9 00 	sts	0x00B9, r25
     f74:	a0 93 ba 00 	sts	0x00BA, r26
     f78:	b0 93 bb 00 	sts	0x00BB, r27
}
     f7c:	08 95       	ret

00000f7e <TIMER0_GetTick>:



f64 TIMER0_GetTick()
{
	return Tick;
     f7e:	60 91 b8 00 	lds	r22, 0x00B8
     f82:	70 91 b9 00 	lds	r23, 0x00B9
     f86:	80 91 ba 00 	lds	r24, 0x00BA
     f8a:	90 91 bb 00 	lds	r25, 0x00BB
     f8e:	08 95       	ret

00000f90 <UART_init>:
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN) | (1<<RXCIE);
     f90:	88 e9       	ldi	r24, 0x98	; 152
     f92:	8a b9       	out	0x0a, r24	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
     f94:	86 e8       	ldi	r24, 0x86	; 134
     f96:	80 bd       	out	0x20, r24	; 32
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
     f98:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
     f9a:	87 e6       	ldi	r24, 0x67	; 103
     f9c:	89 b9       	out	0x09, r24	; 9
}
     f9e:	08 95       	ret

00000fa0 <UART_sendByte>:
	
void UART_sendByte(const u8 data)
{
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     fa0:	5d 9b       	sbis	0x0b, 5	; 11
     fa2:	fe cf       	rjmp	.-4      	; 0xfa0 <UART_sendByte>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
     fa4:	8c b9       	out	0x0c, r24	; 12
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
     fa6:	08 95       	ret

00000fa8 <UART_recieveByte>:

u8 UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     fa8:	5f 9b       	sbis	0x0b, 7	; 11
     faa:	fe cf       	rjmp	.-4      	; 0xfa8 <UART_recieveByte>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
     fac:	8c b1       	in	r24, 0x0c	; 12
}
     fae:	08 95       	ret

00000fb0 <UART_sendString>:

void UART_sendString(const u8 *Str)
{
     fb0:	0f 93       	push	r16
     fb2:	1f 93       	push	r17
     fb4:	cf 93       	push	r28
     fb6:	8c 01       	movw	r16, r24
	u8 i = 0;
	while(Str[i] != '\0')
     fb8:	fc 01       	movw	r30, r24
     fba:	80 81       	ld	r24, Z
     fbc:	88 23       	and	r24, r24
     fbe:	51 f0       	breq	.+20     	; 0xfd4 <UART_sendString+0x24>
    return UDR;		
}

void UART_sendString(const u8 *Str)
{
	u8 i = 0;
     fc0:	c0 e0       	ldi	r28, 0x00	; 0
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     fc2:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <UART_sendByte>
		i++;
     fc6:	cf 5f       	subi	r28, 0xFF	; 255
}

void UART_sendString(const u8 *Str)
{
	u8 i = 0;
	while(Str[i] != '\0')
     fc8:	f8 01       	movw	r30, r16
     fca:	ec 0f       	add	r30, r28
     fcc:	f1 1d       	adc	r31, r1
     fce:	80 81       	ld	r24, Z
     fd0:	88 23       	and	r24, r24
     fd2:	b9 f7       	brne	.-18     	; 0xfc2 <UART_sendString+0x12>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	08 95       	ret

00000fdc <UART_receiveString>:

void UART_receiveString(u8 *Str)
{
     fdc:	ff 92       	push	r15
     fde:	0f 93       	push	r16
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	8c 01       	movw	r16, r24
	u8 i = 0;
	Str[i] = UART_recieveByte();
     fe8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <UART_recieveByte>
     fec:	f8 01       	movw	r30, r16
     fee:	80 83       	st	Z, r24
	while(Str[i] != '#')
     ff0:	83 32       	cpi	r24, 0x23	; 35
     ff2:	59 f0       	breq	.+22     	; 0x100a <UART_receiveString+0x2e>
	*******************************************************************/
}

void UART_receiveString(u8 *Str)
{
	u8 i = 0;
     ff4:	ff 24       	eor	r15, r15
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
	{
		i++;
     ff6:	f3 94       	inc	r15
		Str[i] = UART_recieveByte();
     ff8:	e8 01       	movw	r28, r16
     ffa:	cf 0d       	add	r28, r15
     ffc:	d1 1d       	adc	r29, r1
     ffe:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <UART_recieveByte>
    1002:	88 83       	st	Y, r24

void UART_receiveString(u8 *Str)
{
	u8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    1004:	83 32       	cpi	r24, 0x23	; 35
    1006:	b9 f7       	brne	.-18     	; 0xff6 <UART_receiveString+0x1a>
    1008:	01 c0       	rjmp	.+2      	; 0x100c <UART_receiveString+0x30>
    100a:	e8 01       	movw	r28, r16
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    100c:	18 82       	st	Y, r1
}
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	08 95       	ret

0000101a <__subsf3>:
    101a:	50 58       	subi	r21, 0x80	; 128

0000101c <__addsf3>:
    101c:	bb 27       	eor	r27, r27
    101e:	aa 27       	eor	r26, r26
    1020:	0e d0       	rcall	.+28     	; 0x103e <__addsf3x>
    1022:	fc c1       	rjmp	.+1016   	; 0x141c <__fp_round>
    1024:	ed d1       	rcall	.+986    	; 0x1400 <__fp_pscA>
    1026:	30 f0       	brcs	.+12     	; 0x1034 <__addsf3+0x18>
    1028:	f2 d1       	rcall	.+996    	; 0x140e <__fp_pscB>
    102a:	20 f0       	brcs	.+8      	; 0x1034 <__addsf3+0x18>
    102c:	31 f4       	brne	.+12     	; 0x103a <__addsf3+0x1e>
    102e:	9f 3f       	cpi	r25, 0xFF	; 255
    1030:	11 f4       	brne	.+4      	; 0x1036 <__addsf3+0x1a>
    1032:	1e f4       	brtc	.+6      	; 0x103a <__addsf3+0x1e>
    1034:	bd c1       	rjmp	.+890    	; 0x13b0 <__fp_nan>
    1036:	0e f4       	brtc	.+2      	; 0x103a <__addsf3+0x1e>
    1038:	e0 95       	com	r30
    103a:	e7 fb       	bst	r30, 7
    103c:	b3 c1       	rjmp	.+870    	; 0x13a4 <__fp_inf>

0000103e <__addsf3x>:
    103e:	e9 2f       	mov	r30, r25
    1040:	fe d1       	rcall	.+1020   	; 0x143e <__fp_split3>
    1042:	80 f3       	brcs	.-32     	; 0x1024 <__addsf3+0x8>
    1044:	ba 17       	cp	r27, r26
    1046:	62 07       	cpc	r22, r18
    1048:	73 07       	cpc	r23, r19
    104a:	84 07       	cpc	r24, r20
    104c:	95 07       	cpc	r25, r21
    104e:	18 f0       	brcs	.+6      	; 0x1056 <__addsf3x+0x18>
    1050:	71 f4       	brne	.+28     	; 0x106e <__addsf3x+0x30>
    1052:	9e f5       	brtc	.+102    	; 0x10ba <__addsf3x+0x7c>
    1054:	16 c2       	rjmp	.+1068   	; 0x1482 <__fp_zero>
    1056:	0e f4       	brtc	.+2      	; 0x105a <__addsf3x+0x1c>
    1058:	e0 95       	com	r30
    105a:	0b 2e       	mov	r0, r27
    105c:	ba 2f       	mov	r27, r26
    105e:	a0 2d       	mov	r26, r0
    1060:	0b 01       	movw	r0, r22
    1062:	b9 01       	movw	r22, r18
    1064:	90 01       	movw	r18, r0
    1066:	0c 01       	movw	r0, r24
    1068:	ca 01       	movw	r24, r20
    106a:	a0 01       	movw	r20, r0
    106c:	11 24       	eor	r1, r1
    106e:	ff 27       	eor	r31, r31
    1070:	59 1b       	sub	r21, r25
    1072:	99 f0       	breq	.+38     	; 0x109a <__addsf3x+0x5c>
    1074:	59 3f       	cpi	r21, 0xF9	; 249
    1076:	50 f4       	brcc	.+20     	; 0x108c <__addsf3x+0x4e>
    1078:	50 3e       	cpi	r21, 0xE0	; 224
    107a:	68 f1       	brcs	.+90     	; 0x10d6 <__addsf3x+0x98>
    107c:	1a 16       	cp	r1, r26
    107e:	f0 40       	sbci	r31, 0x00	; 0
    1080:	a2 2f       	mov	r26, r18
    1082:	23 2f       	mov	r18, r19
    1084:	34 2f       	mov	r19, r20
    1086:	44 27       	eor	r20, r20
    1088:	58 5f       	subi	r21, 0xF8	; 248
    108a:	f3 cf       	rjmp	.-26     	; 0x1072 <__addsf3x+0x34>
    108c:	46 95       	lsr	r20
    108e:	37 95       	ror	r19
    1090:	27 95       	ror	r18
    1092:	a7 95       	ror	r26
    1094:	f0 40       	sbci	r31, 0x00	; 0
    1096:	53 95       	inc	r21
    1098:	c9 f7       	brne	.-14     	; 0x108c <__addsf3x+0x4e>
    109a:	7e f4       	brtc	.+30     	; 0x10ba <__addsf3x+0x7c>
    109c:	1f 16       	cp	r1, r31
    109e:	ba 0b       	sbc	r27, r26
    10a0:	62 0b       	sbc	r22, r18
    10a2:	73 0b       	sbc	r23, r19
    10a4:	84 0b       	sbc	r24, r20
    10a6:	ba f0       	brmi	.+46     	; 0x10d6 <__addsf3x+0x98>
    10a8:	91 50       	subi	r25, 0x01	; 1
    10aa:	a1 f0       	breq	.+40     	; 0x10d4 <__addsf3x+0x96>
    10ac:	ff 0f       	add	r31, r31
    10ae:	bb 1f       	adc	r27, r27
    10b0:	66 1f       	adc	r22, r22
    10b2:	77 1f       	adc	r23, r23
    10b4:	88 1f       	adc	r24, r24
    10b6:	c2 f7       	brpl	.-16     	; 0x10a8 <__addsf3x+0x6a>
    10b8:	0e c0       	rjmp	.+28     	; 0x10d6 <__addsf3x+0x98>
    10ba:	ba 0f       	add	r27, r26
    10bc:	62 1f       	adc	r22, r18
    10be:	73 1f       	adc	r23, r19
    10c0:	84 1f       	adc	r24, r20
    10c2:	48 f4       	brcc	.+18     	; 0x10d6 <__addsf3x+0x98>
    10c4:	87 95       	ror	r24
    10c6:	77 95       	ror	r23
    10c8:	67 95       	ror	r22
    10ca:	b7 95       	ror	r27
    10cc:	f7 95       	ror	r31
    10ce:	9e 3f       	cpi	r25, 0xFE	; 254
    10d0:	08 f0       	brcs	.+2      	; 0x10d4 <__addsf3x+0x96>
    10d2:	b3 cf       	rjmp	.-154    	; 0x103a <__addsf3+0x1e>
    10d4:	93 95       	inc	r25
    10d6:	88 0f       	add	r24, r24
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <__addsf3x+0x9e>
    10da:	99 27       	eor	r25, r25
    10dc:	ee 0f       	add	r30, r30
    10de:	97 95       	ror	r25
    10e0:	87 95       	ror	r24
    10e2:	08 95       	ret
    10e4:	8d d1       	rcall	.+794    	; 0x1400 <__fp_pscA>
    10e6:	58 f0       	brcs	.+22     	; 0x10fe <__addsf3x+0xc0>
    10e8:	80 e8       	ldi	r24, 0x80	; 128
    10ea:	91 e0       	ldi	r25, 0x01	; 1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <__addsf3x+0xb2>
    10ee:	9e ef       	ldi	r25, 0xFE	; 254
    10f0:	8e d1       	rcall	.+796    	; 0x140e <__fp_pscB>
    10f2:	28 f0       	brcs	.+10     	; 0x10fe <__addsf3x+0xc0>
    10f4:	40 e8       	ldi	r20, 0x80	; 128
    10f6:	51 e0       	ldi	r21, 0x01	; 1
    10f8:	59 f4       	brne	.+22     	; 0x1110 <atan2+0xe>
    10fa:	5e ef       	ldi	r21, 0xFE	; 254
    10fc:	09 c0       	rjmp	.+18     	; 0x1110 <atan2+0xe>
    10fe:	58 c1       	rjmp	.+688    	; 0x13b0 <__fp_nan>
    1100:	c0 c1       	rjmp	.+896    	; 0x1482 <__fp_zero>

00001102 <atan2>:
    1102:	e9 2f       	mov	r30, r25
    1104:	e0 78       	andi	r30, 0x80	; 128
    1106:	9b d1       	rcall	.+822    	; 0x143e <__fp_split3>
    1108:	68 f3       	brcs	.-38     	; 0x10e4 <__addsf3x+0xa6>
    110a:	09 2e       	mov	r0, r25
    110c:	05 2a       	or	r0, r21
    110e:	c1 f3       	breq	.-16     	; 0x1100 <__addsf3x+0xc2>
    1110:	26 17       	cp	r18, r22
    1112:	37 07       	cpc	r19, r23
    1114:	48 07       	cpc	r20, r24
    1116:	59 07       	cpc	r21, r25
    1118:	38 f0       	brcs	.+14     	; 0x1128 <atan2+0x26>
    111a:	0e 2e       	mov	r0, r30
    111c:	07 f8       	bld	r0, 7
    111e:	e0 25       	eor	r30, r0
    1120:	69 f0       	breq	.+26     	; 0x113c <atan2+0x3a>
    1122:	e0 25       	eor	r30, r0
    1124:	e0 64       	ori	r30, 0x40	; 64
    1126:	0a c0       	rjmp	.+20     	; 0x113c <atan2+0x3a>
    1128:	ef 63       	ori	r30, 0x3F	; 63
    112a:	07 f8       	bld	r0, 7
    112c:	00 94       	com	r0
    112e:	07 fa       	bst	r0, 7
    1130:	db 01       	movw	r26, r22
    1132:	b9 01       	movw	r22, r18
    1134:	9d 01       	movw	r18, r26
    1136:	dc 01       	movw	r26, r24
    1138:	ca 01       	movw	r24, r20
    113a:	ad 01       	movw	r20, r26
    113c:	ef 93       	push	r30
    113e:	47 d0       	rcall	.+142    	; 0x11ce <__divsf3_pse>
    1140:	6d d1       	rcall	.+730    	; 0x141c <__fp_round>
    1142:	0a d0       	rcall	.+20     	; 0x1158 <atan>
    1144:	5f 91       	pop	r21
    1146:	55 23       	and	r21, r21
    1148:	31 f0       	breq	.+12     	; 0x1156 <atan2+0x54>
    114a:	2b ed       	ldi	r18, 0xDB	; 219
    114c:	3f e0       	ldi	r19, 0x0F	; 15
    114e:	49 e4       	ldi	r20, 0x49	; 73
    1150:	50 fd       	sbrc	r21, 0
    1152:	49 ec       	ldi	r20, 0xC9	; 201
    1154:	63 cf       	rjmp	.-314    	; 0x101c <__addsf3>
    1156:	08 95       	ret

00001158 <atan>:
    1158:	df 93       	push	r29
    115a:	dd 27       	eor	r29, r29
    115c:	b9 2f       	mov	r27, r25
    115e:	bf 77       	andi	r27, 0x7F	; 127
    1160:	40 e8       	ldi	r20, 0x80	; 128
    1162:	5f e3       	ldi	r21, 0x3F	; 63
    1164:	16 16       	cp	r1, r22
    1166:	17 06       	cpc	r1, r23
    1168:	48 07       	cpc	r20, r24
    116a:	5b 07       	cpc	r21, r27
    116c:	10 f4       	brcc	.+4      	; 0x1172 <atan+0x1a>
    116e:	d9 2f       	mov	r29, r25
    1170:	93 d1       	rcall	.+806    	; 0x1498 <inverse>
    1172:	9f 93       	push	r25
    1174:	8f 93       	push	r24
    1176:	7f 93       	push	r23
    1178:	6f 93       	push	r22
    117a:	3a d2       	rcall	.+1140   	; 0x15f0 <square>
    117c:	e4 e5       	ldi	r30, 0x54	; 84
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	1a d1       	rcall	.+564    	; 0x13b6 <__fp_powser>
    1182:	4c d1       	rcall	.+664    	; 0x141c <__fp_round>
    1184:	2f 91       	pop	r18
    1186:	3f 91       	pop	r19
    1188:	4f 91       	pop	r20
    118a:	5f 91       	pop	r21
    118c:	98 d1       	rcall	.+816    	; 0x14be <__mulsf3x>
    118e:	dd 23       	and	r29, r29
    1190:	49 f0       	breq	.+18     	; 0x11a4 <atan+0x4c>
    1192:	90 58       	subi	r25, 0x80	; 128
    1194:	a2 ea       	ldi	r26, 0xA2	; 162
    1196:	2a ed       	ldi	r18, 0xDA	; 218
    1198:	3f e0       	ldi	r19, 0x0F	; 15
    119a:	49 ec       	ldi	r20, 0xC9	; 201
    119c:	5f e3       	ldi	r21, 0x3F	; 63
    119e:	d0 78       	andi	r29, 0x80	; 128
    11a0:	5d 27       	eor	r21, r29
    11a2:	4d df       	rcall	.-358    	; 0x103e <__addsf3x>
    11a4:	df 91       	pop	r29
    11a6:	3a c1       	rjmp	.+628    	; 0x141c <__fp_round>

000011a8 <__cmpsf2>:
    11a8:	d9 d0       	rcall	.+434    	; 0x135c <__fp_cmp>
    11aa:	08 f4       	brcc	.+2      	; 0x11ae <__cmpsf2+0x6>
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	08 95       	ret

000011b0 <__divsf3>:
    11b0:	0c d0       	rcall	.+24     	; 0x11ca <__divsf3x>
    11b2:	34 c1       	rjmp	.+616    	; 0x141c <__fp_round>
    11b4:	2c d1       	rcall	.+600    	; 0x140e <__fp_pscB>
    11b6:	40 f0       	brcs	.+16     	; 0x11c8 <__divsf3+0x18>
    11b8:	23 d1       	rcall	.+582    	; 0x1400 <__fp_pscA>
    11ba:	30 f0       	brcs	.+12     	; 0x11c8 <__divsf3+0x18>
    11bc:	21 f4       	brne	.+8      	; 0x11c6 <__divsf3+0x16>
    11be:	5f 3f       	cpi	r21, 0xFF	; 255
    11c0:	19 f0       	breq	.+6      	; 0x11c8 <__divsf3+0x18>
    11c2:	f0 c0       	rjmp	.+480    	; 0x13a4 <__fp_inf>
    11c4:	51 11       	cpse	r21, r1
    11c6:	5e c1       	rjmp	.+700    	; 0x1484 <__fp_szero>
    11c8:	f3 c0       	rjmp	.+486    	; 0x13b0 <__fp_nan>

000011ca <__divsf3x>:
    11ca:	39 d1       	rcall	.+626    	; 0x143e <__fp_split3>
    11cc:	98 f3       	brcs	.-26     	; 0x11b4 <__divsf3+0x4>

000011ce <__divsf3_pse>:
    11ce:	99 23       	and	r25, r25
    11d0:	c9 f3       	breq	.-14     	; 0x11c4 <__divsf3+0x14>
    11d2:	55 23       	and	r21, r21
    11d4:	b1 f3       	breq	.-20     	; 0x11c2 <__divsf3+0x12>
    11d6:	95 1b       	sub	r25, r21
    11d8:	55 0b       	sbc	r21, r21
    11da:	bb 27       	eor	r27, r27
    11dc:	aa 27       	eor	r26, r26
    11de:	62 17       	cp	r22, r18
    11e0:	73 07       	cpc	r23, r19
    11e2:	84 07       	cpc	r24, r20
    11e4:	38 f0       	brcs	.+14     	; 0x11f4 <__divsf3_pse+0x26>
    11e6:	9f 5f       	subi	r25, 0xFF	; 255
    11e8:	5f 4f       	sbci	r21, 0xFF	; 255
    11ea:	22 0f       	add	r18, r18
    11ec:	33 1f       	adc	r19, r19
    11ee:	44 1f       	adc	r20, r20
    11f0:	aa 1f       	adc	r26, r26
    11f2:	a9 f3       	breq	.-22     	; 0x11de <__divsf3_pse+0x10>
    11f4:	33 d0       	rcall	.+102    	; 0x125c <__divsf3_pse+0x8e>
    11f6:	0e 2e       	mov	r0, r30
    11f8:	3a f0       	brmi	.+14     	; 0x1208 <__divsf3_pse+0x3a>
    11fa:	e0 e8       	ldi	r30, 0x80	; 128
    11fc:	30 d0       	rcall	.+96     	; 0x125e <__divsf3_pse+0x90>
    11fe:	91 50       	subi	r25, 0x01	; 1
    1200:	50 40       	sbci	r21, 0x00	; 0
    1202:	e6 95       	lsr	r30
    1204:	00 1c       	adc	r0, r0
    1206:	ca f7       	brpl	.-14     	; 0x11fa <__divsf3_pse+0x2c>
    1208:	29 d0       	rcall	.+82     	; 0x125c <__divsf3_pse+0x8e>
    120a:	fe 2f       	mov	r31, r30
    120c:	27 d0       	rcall	.+78     	; 0x125c <__divsf3_pse+0x8e>
    120e:	66 0f       	add	r22, r22
    1210:	77 1f       	adc	r23, r23
    1212:	88 1f       	adc	r24, r24
    1214:	bb 1f       	adc	r27, r27
    1216:	26 17       	cp	r18, r22
    1218:	37 07       	cpc	r19, r23
    121a:	48 07       	cpc	r20, r24
    121c:	ab 07       	cpc	r26, r27
    121e:	b0 e8       	ldi	r27, 0x80	; 128
    1220:	09 f0       	breq	.+2      	; 0x1224 <__divsf3_pse+0x56>
    1222:	bb 0b       	sbc	r27, r27
    1224:	80 2d       	mov	r24, r0
    1226:	bf 01       	movw	r22, r30
    1228:	ff 27       	eor	r31, r31
    122a:	93 58       	subi	r25, 0x83	; 131
    122c:	5f 4f       	sbci	r21, 0xFF	; 255
    122e:	2a f0       	brmi	.+10     	; 0x123a <__divsf3_pse+0x6c>
    1230:	9e 3f       	cpi	r25, 0xFE	; 254
    1232:	51 05       	cpc	r21, r1
    1234:	68 f0       	brcs	.+26     	; 0x1250 <__divsf3_pse+0x82>
    1236:	b6 c0       	rjmp	.+364    	; 0x13a4 <__fp_inf>
    1238:	25 c1       	rjmp	.+586    	; 0x1484 <__fp_szero>
    123a:	5f 3f       	cpi	r21, 0xFF	; 255
    123c:	ec f3       	brlt	.-6      	; 0x1238 <__divsf3_pse+0x6a>
    123e:	98 3e       	cpi	r25, 0xE8	; 232
    1240:	dc f3       	brlt	.-10     	; 0x1238 <__divsf3_pse+0x6a>
    1242:	86 95       	lsr	r24
    1244:	77 95       	ror	r23
    1246:	67 95       	ror	r22
    1248:	b7 95       	ror	r27
    124a:	f7 95       	ror	r31
    124c:	9f 5f       	subi	r25, 0xFF	; 255
    124e:	c9 f7       	brne	.-14     	; 0x1242 <__divsf3_pse+0x74>
    1250:	88 0f       	add	r24, r24
    1252:	91 1d       	adc	r25, r1
    1254:	96 95       	lsr	r25
    1256:	87 95       	ror	r24
    1258:	97 f9       	bld	r25, 7
    125a:	08 95       	ret
    125c:	e1 e0       	ldi	r30, 0x01	; 1
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	bb 1f       	adc	r27, r27
    1266:	62 17       	cp	r22, r18
    1268:	73 07       	cpc	r23, r19
    126a:	84 07       	cpc	r24, r20
    126c:	ba 07       	cpc	r27, r26
    126e:	20 f0       	brcs	.+8      	; 0x1278 <__divsf3_pse+0xaa>
    1270:	62 1b       	sub	r22, r18
    1272:	73 0b       	sbc	r23, r19
    1274:	84 0b       	sbc	r24, r20
    1276:	ba 0b       	sbc	r27, r26
    1278:	ee 1f       	adc	r30, r30
    127a:	88 f7       	brcc	.-30     	; 0x125e <__divsf3_pse+0x90>
    127c:	e0 95       	com	r30
    127e:	08 95       	ret

00001280 <__fixsfsi>:
    1280:	04 d0       	rcall	.+8      	; 0x128a <__fixunssfsi>
    1282:	68 94       	set
    1284:	b1 11       	cpse	r27, r1
    1286:	fe c0       	rjmp	.+508    	; 0x1484 <__fp_szero>
    1288:	08 95       	ret

0000128a <__fixunssfsi>:
    128a:	e1 d0       	rcall	.+450    	; 0x144e <__fp_splitA>
    128c:	88 f0       	brcs	.+34     	; 0x12b0 <__fixunssfsi+0x26>
    128e:	9f 57       	subi	r25, 0x7F	; 127
    1290:	90 f0       	brcs	.+36     	; 0x12b6 <__fixunssfsi+0x2c>
    1292:	b9 2f       	mov	r27, r25
    1294:	99 27       	eor	r25, r25
    1296:	b7 51       	subi	r27, 0x17	; 23
    1298:	a0 f0       	brcs	.+40     	; 0x12c2 <__fixunssfsi+0x38>
    129a:	d1 f0       	breq	.+52     	; 0x12d0 <__fixunssfsi+0x46>
    129c:	66 0f       	add	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	88 1f       	adc	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	1a f0       	brmi	.+6      	; 0x12ac <__fixunssfsi+0x22>
    12a6:	ba 95       	dec	r27
    12a8:	c9 f7       	brne	.-14     	; 0x129c <__fixunssfsi+0x12>
    12aa:	12 c0       	rjmp	.+36     	; 0x12d0 <__fixunssfsi+0x46>
    12ac:	b1 30       	cpi	r27, 0x01	; 1
    12ae:	81 f0       	breq	.+32     	; 0x12d0 <__fixunssfsi+0x46>
    12b0:	e8 d0       	rcall	.+464    	; 0x1482 <__fp_zero>
    12b2:	b1 e0       	ldi	r27, 0x01	; 1
    12b4:	08 95       	ret
    12b6:	e5 c0       	rjmp	.+458    	; 0x1482 <__fp_zero>
    12b8:	67 2f       	mov	r22, r23
    12ba:	78 2f       	mov	r23, r24
    12bc:	88 27       	eor	r24, r24
    12be:	b8 5f       	subi	r27, 0xF8	; 248
    12c0:	39 f0       	breq	.+14     	; 0x12d0 <__fixunssfsi+0x46>
    12c2:	b9 3f       	cpi	r27, 0xF9	; 249
    12c4:	cc f3       	brlt	.-14     	; 0x12b8 <__fixunssfsi+0x2e>
    12c6:	86 95       	lsr	r24
    12c8:	77 95       	ror	r23
    12ca:	67 95       	ror	r22
    12cc:	b3 95       	inc	r27
    12ce:	d9 f7       	brne	.-10     	; 0x12c6 <__fixunssfsi+0x3c>
    12d0:	3e f4       	brtc	.+14     	; 0x12e0 <__fixunssfsi+0x56>
    12d2:	90 95       	com	r25
    12d4:	80 95       	com	r24
    12d6:	70 95       	com	r23
    12d8:	61 95       	neg	r22
    12da:	7f 4f       	sbci	r23, 0xFF	; 255
    12dc:	8f 4f       	sbci	r24, 0xFF	; 255
    12de:	9f 4f       	sbci	r25, 0xFF	; 255
    12e0:	08 95       	ret

000012e2 <__floatunsisf>:
    12e2:	e8 94       	clt
    12e4:	09 c0       	rjmp	.+18     	; 0x12f8 <__floatsisf+0x12>

000012e6 <__floatsisf>:
    12e6:	97 fb       	bst	r25, 7
    12e8:	3e f4       	brtc	.+14     	; 0x12f8 <__floatsisf+0x12>
    12ea:	90 95       	com	r25
    12ec:	80 95       	com	r24
    12ee:	70 95       	com	r23
    12f0:	61 95       	neg	r22
    12f2:	7f 4f       	sbci	r23, 0xFF	; 255
    12f4:	8f 4f       	sbci	r24, 0xFF	; 255
    12f6:	9f 4f       	sbci	r25, 0xFF	; 255
    12f8:	99 23       	and	r25, r25
    12fa:	a9 f0       	breq	.+42     	; 0x1326 <__floatsisf+0x40>
    12fc:	f9 2f       	mov	r31, r25
    12fe:	96 e9       	ldi	r25, 0x96	; 150
    1300:	bb 27       	eor	r27, r27
    1302:	93 95       	inc	r25
    1304:	f6 95       	lsr	r31
    1306:	87 95       	ror	r24
    1308:	77 95       	ror	r23
    130a:	67 95       	ror	r22
    130c:	b7 95       	ror	r27
    130e:	f1 11       	cpse	r31, r1
    1310:	f8 cf       	rjmp	.-16     	; 0x1302 <__floatsisf+0x1c>
    1312:	fa f4       	brpl	.+62     	; 0x1352 <__floatsisf+0x6c>
    1314:	bb 0f       	add	r27, r27
    1316:	11 f4       	brne	.+4      	; 0x131c <__floatsisf+0x36>
    1318:	60 ff       	sbrs	r22, 0
    131a:	1b c0       	rjmp	.+54     	; 0x1352 <__floatsisf+0x6c>
    131c:	6f 5f       	subi	r22, 0xFF	; 255
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	8f 4f       	sbci	r24, 0xFF	; 255
    1322:	9f 4f       	sbci	r25, 0xFF	; 255
    1324:	16 c0       	rjmp	.+44     	; 0x1352 <__floatsisf+0x6c>
    1326:	88 23       	and	r24, r24
    1328:	11 f0       	breq	.+4      	; 0x132e <__floatsisf+0x48>
    132a:	96 e9       	ldi	r25, 0x96	; 150
    132c:	11 c0       	rjmp	.+34     	; 0x1350 <__floatsisf+0x6a>
    132e:	77 23       	and	r23, r23
    1330:	21 f0       	breq	.+8      	; 0x133a <__floatsisf+0x54>
    1332:	9e e8       	ldi	r25, 0x8E	; 142
    1334:	87 2f       	mov	r24, r23
    1336:	76 2f       	mov	r23, r22
    1338:	05 c0       	rjmp	.+10     	; 0x1344 <__floatsisf+0x5e>
    133a:	66 23       	and	r22, r22
    133c:	71 f0       	breq	.+28     	; 0x135a <__floatsisf+0x74>
    133e:	96 e8       	ldi	r25, 0x86	; 134
    1340:	86 2f       	mov	r24, r22
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	2a f0       	brmi	.+10     	; 0x1352 <__floatsisf+0x6c>
    1348:	9a 95       	dec	r25
    134a:	66 0f       	add	r22, r22
    134c:	77 1f       	adc	r23, r23
    134e:	88 1f       	adc	r24, r24
    1350:	da f7       	brpl	.-10     	; 0x1348 <__floatsisf+0x62>
    1352:	88 0f       	add	r24, r24
    1354:	96 95       	lsr	r25
    1356:	87 95       	ror	r24
    1358:	97 f9       	bld	r25, 7
    135a:	08 95       	ret

0000135c <__fp_cmp>:
    135c:	99 0f       	add	r25, r25
    135e:	00 08       	sbc	r0, r0
    1360:	55 0f       	add	r21, r21
    1362:	aa 0b       	sbc	r26, r26
    1364:	e0 e8       	ldi	r30, 0x80	; 128
    1366:	fe ef       	ldi	r31, 0xFE	; 254
    1368:	16 16       	cp	r1, r22
    136a:	17 06       	cpc	r1, r23
    136c:	e8 07       	cpc	r30, r24
    136e:	f9 07       	cpc	r31, r25
    1370:	c0 f0       	brcs	.+48     	; 0x13a2 <__fp_cmp+0x46>
    1372:	12 16       	cp	r1, r18
    1374:	13 06       	cpc	r1, r19
    1376:	e4 07       	cpc	r30, r20
    1378:	f5 07       	cpc	r31, r21
    137a:	98 f0       	brcs	.+38     	; 0x13a2 <__fp_cmp+0x46>
    137c:	62 1b       	sub	r22, r18
    137e:	73 0b       	sbc	r23, r19
    1380:	84 0b       	sbc	r24, r20
    1382:	95 0b       	sbc	r25, r21
    1384:	39 f4       	brne	.+14     	; 0x1394 <__fp_cmp+0x38>
    1386:	0a 26       	eor	r0, r26
    1388:	61 f0       	breq	.+24     	; 0x13a2 <__fp_cmp+0x46>
    138a:	23 2b       	or	r18, r19
    138c:	24 2b       	or	r18, r20
    138e:	25 2b       	or	r18, r21
    1390:	21 f4       	brne	.+8      	; 0x139a <__fp_cmp+0x3e>
    1392:	08 95       	ret
    1394:	0a 26       	eor	r0, r26
    1396:	09 f4       	brne	.+2      	; 0x139a <__fp_cmp+0x3e>
    1398:	a1 40       	sbci	r26, 0x01	; 1
    139a:	a6 95       	lsr	r26
    139c:	8f ef       	ldi	r24, 0xFF	; 255
    139e:	81 1d       	adc	r24, r1
    13a0:	81 1d       	adc	r24, r1
    13a2:	08 95       	ret

000013a4 <__fp_inf>:
    13a4:	97 f9       	bld	r25, 7
    13a6:	9f 67       	ori	r25, 0x7F	; 127
    13a8:	80 e8       	ldi	r24, 0x80	; 128
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	08 95       	ret

000013b0 <__fp_nan>:
    13b0:	9f ef       	ldi	r25, 0xFF	; 255
    13b2:	80 ec       	ldi	r24, 0xC0	; 192
    13b4:	08 95       	ret

000013b6 <__fp_powser>:
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	1f 93       	push	r17
    13bc:	0f 93       	push	r16
    13be:	ff 92       	push	r15
    13c0:	ef 92       	push	r14
    13c2:	df 92       	push	r13
    13c4:	7b 01       	movw	r14, r22
    13c6:	8c 01       	movw	r16, r24
    13c8:	68 94       	set
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <__fp_powser+0x20>
    13cc:	da 2e       	mov	r13, r26
    13ce:	ef 01       	movw	r28, r30
    13d0:	76 d0       	rcall	.+236    	; 0x14be <__mulsf3x>
    13d2:	fe 01       	movw	r30, r28
    13d4:	e8 94       	clt
    13d6:	a5 91       	lpm	r26, Z+
    13d8:	25 91       	lpm	r18, Z+
    13da:	35 91       	lpm	r19, Z+
    13dc:	45 91       	lpm	r20, Z+
    13de:	55 91       	lpm	r21, Z+
    13e0:	ae f3       	brts	.-22     	; 0x13cc <__fp_powser+0x16>
    13e2:	ef 01       	movw	r28, r30
    13e4:	2c de       	rcall	.-936    	; 0x103e <__addsf3x>
    13e6:	fe 01       	movw	r30, r28
    13e8:	97 01       	movw	r18, r14
    13ea:	a8 01       	movw	r20, r16
    13ec:	da 94       	dec	r13
    13ee:	79 f7       	brne	.-34     	; 0x13ce <__fp_powser+0x18>
    13f0:	df 90       	pop	r13
    13f2:	ef 90       	pop	r14
    13f4:	ff 90       	pop	r15
    13f6:	0f 91       	pop	r16
    13f8:	1f 91       	pop	r17
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <__fp_pscA>:
    1400:	00 24       	eor	r0, r0
    1402:	0a 94       	dec	r0
    1404:	16 16       	cp	r1, r22
    1406:	17 06       	cpc	r1, r23
    1408:	18 06       	cpc	r1, r24
    140a:	09 06       	cpc	r0, r25
    140c:	08 95       	ret

0000140e <__fp_pscB>:
    140e:	00 24       	eor	r0, r0
    1410:	0a 94       	dec	r0
    1412:	12 16       	cp	r1, r18
    1414:	13 06       	cpc	r1, r19
    1416:	14 06       	cpc	r1, r20
    1418:	05 06       	cpc	r0, r21
    141a:	08 95       	ret

0000141c <__fp_round>:
    141c:	09 2e       	mov	r0, r25
    141e:	03 94       	inc	r0
    1420:	00 0c       	add	r0, r0
    1422:	11 f4       	brne	.+4      	; 0x1428 <__fp_round+0xc>
    1424:	88 23       	and	r24, r24
    1426:	52 f0       	brmi	.+20     	; 0x143c <__fp_round+0x20>
    1428:	bb 0f       	add	r27, r27
    142a:	40 f4       	brcc	.+16     	; 0x143c <__fp_round+0x20>
    142c:	bf 2b       	or	r27, r31
    142e:	11 f4       	brne	.+4      	; 0x1434 <__fp_round+0x18>
    1430:	60 ff       	sbrs	r22, 0
    1432:	04 c0       	rjmp	.+8      	; 0x143c <__fp_round+0x20>
    1434:	6f 5f       	subi	r22, 0xFF	; 255
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	8f 4f       	sbci	r24, 0xFF	; 255
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	08 95       	ret

0000143e <__fp_split3>:
    143e:	57 fd       	sbrc	r21, 7
    1440:	90 58       	subi	r25, 0x80	; 128
    1442:	44 0f       	add	r20, r20
    1444:	55 1f       	adc	r21, r21
    1446:	59 f0       	breq	.+22     	; 0x145e <__fp_splitA+0x10>
    1448:	5f 3f       	cpi	r21, 0xFF	; 255
    144a:	71 f0       	breq	.+28     	; 0x1468 <__fp_splitA+0x1a>
    144c:	47 95       	ror	r20

0000144e <__fp_splitA>:
    144e:	88 0f       	add	r24, r24
    1450:	97 fb       	bst	r25, 7
    1452:	99 1f       	adc	r25, r25
    1454:	61 f0       	breq	.+24     	; 0x146e <__fp_splitA+0x20>
    1456:	9f 3f       	cpi	r25, 0xFF	; 255
    1458:	79 f0       	breq	.+30     	; 0x1478 <__fp_splitA+0x2a>
    145a:	87 95       	ror	r24
    145c:	08 95       	ret
    145e:	12 16       	cp	r1, r18
    1460:	13 06       	cpc	r1, r19
    1462:	14 06       	cpc	r1, r20
    1464:	55 1f       	adc	r21, r21
    1466:	f2 cf       	rjmp	.-28     	; 0x144c <__fp_split3+0xe>
    1468:	46 95       	lsr	r20
    146a:	f1 df       	rcall	.-30     	; 0x144e <__fp_splitA>
    146c:	08 c0       	rjmp	.+16     	; 0x147e <__fp_splitA+0x30>
    146e:	16 16       	cp	r1, r22
    1470:	17 06       	cpc	r1, r23
    1472:	18 06       	cpc	r1, r24
    1474:	99 1f       	adc	r25, r25
    1476:	f1 cf       	rjmp	.-30     	; 0x145a <__fp_splitA+0xc>
    1478:	86 95       	lsr	r24
    147a:	71 05       	cpc	r23, r1
    147c:	61 05       	cpc	r22, r1
    147e:	08 94       	sec
    1480:	08 95       	ret

00001482 <__fp_zero>:
    1482:	e8 94       	clt

00001484 <__fp_szero>:
    1484:	bb 27       	eor	r27, r27
    1486:	66 27       	eor	r22, r22
    1488:	77 27       	eor	r23, r23
    148a:	cb 01       	movw	r24, r22
    148c:	97 f9       	bld	r25, 7
    148e:	08 95       	ret

00001490 <__gesf2>:
    1490:	65 df       	rcall	.-310    	; 0x135c <__fp_cmp>
    1492:	08 f4       	brcc	.+2      	; 0x1496 <__gesf2+0x6>
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	08 95       	ret

00001498 <inverse>:
    1498:	9b 01       	movw	r18, r22
    149a:	ac 01       	movw	r20, r24
    149c:	60 e0       	ldi	r22, 0x00	; 0
    149e:	70 e0       	ldi	r23, 0x00	; 0
    14a0:	80 e8       	ldi	r24, 0x80	; 128
    14a2:	9f e3       	ldi	r25, 0x3F	; 63
    14a4:	85 ce       	rjmp	.-758    	; 0x11b0 <__divsf3>

000014a6 <__mulsf3>:
    14a6:	0b d0       	rcall	.+22     	; 0x14be <__mulsf3x>
    14a8:	b9 cf       	rjmp	.-142    	; 0x141c <__fp_round>
    14aa:	aa df       	rcall	.-172    	; 0x1400 <__fp_pscA>
    14ac:	28 f0       	brcs	.+10     	; 0x14b8 <__mulsf3+0x12>
    14ae:	af df       	rcall	.-162    	; 0x140e <__fp_pscB>
    14b0:	18 f0       	brcs	.+6      	; 0x14b8 <__mulsf3+0x12>
    14b2:	95 23       	and	r25, r21
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <__mulsf3+0x12>
    14b6:	76 cf       	rjmp	.-276    	; 0x13a4 <__fp_inf>
    14b8:	7b cf       	rjmp	.-266    	; 0x13b0 <__fp_nan>
    14ba:	11 24       	eor	r1, r1
    14bc:	e3 cf       	rjmp	.-58     	; 0x1484 <__fp_szero>

000014be <__mulsf3x>:
    14be:	bf df       	rcall	.-130    	; 0x143e <__fp_split3>
    14c0:	a0 f3       	brcs	.-24     	; 0x14aa <__mulsf3+0x4>

000014c2 <__mulsf3_pse>:
    14c2:	95 9f       	mul	r25, r21
    14c4:	d1 f3       	breq	.-12     	; 0x14ba <__mulsf3+0x14>
    14c6:	95 0f       	add	r25, r21
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	55 1f       	adc	r21, r21
    14cc:	62 9f       	mul	r22, r18
    14ce:	f0 01       	movw	r30, r0
    14d0:	72 9f       	mul	r23, r18
    14d2:	bb 27       	eor	r27, r27
    14d4:	f0 0d       	add	r31, r0
    14d6:	b1 1d       	adc	r27, r1
    14d8:	63 9f       	mul	r22, r19
    14da:	aa 27       	eor	r26, r26
    14dc:	f0 0d       	add	r31, r0
    14de:	b1 1d       	adc	r27, r1
    14e0:	aa 1f       	adc	r26, r26
    14e2:	64 9f       	mul	r22, r20
    14e4:	66 27       	eor	r22, r22
    14e6:	b0 0d       	add	r27, r0
    14e8:	a1 1d       	adc	r26, r1
    14ea:	66 1f       	adc	r22, r22
    14ec:	82 9f       	mul	r24, r18
    14ee:	22 27       	eor	r18, r18
    14f0:	b0 0d       	add	r27, r0
    14f2:	a1 1d       	adc	r26, r1
    14f4:	62 1f       	adc	r22, r18
    14f6:	73 9f       	mul	r23, r19
    14f8:	b0 0d       	add	r27, r0
    14fa:	a1 1d       	adc	r26, r1
    14fc:	62 1f       	adc	r22, r18
    14fe:	83 9f       	mul	r24, r19
    1500:	a0 0d       	add	r26, r0
    1502:	61 1d       	adc	r22, r1
    1504:	22 1f       	adc	r18, r18
    1506:	74 9f       	mul	r23, r20
    1508:	33 27       	eor	r19, r19
    150a:	a0 0d       	add	r26, r0
    150c:	61 1d       	adc	r22, r1
    150e:	23 1f       	adc	r18, r19
    1510:	84 9f       	mul	r24, r20
    1512:	60 0d       	add	r22, r0
    1514:	21 1d       	adc	r18, r1
    1516:	82 2f       	mov	r24, r18
    1518:	76 2f       	mov	r23, r22
    151a:	6a 2f       	mov	r22, r26
    151c:	11 24       	eor	r1, r1
    151e:	9f 57       	subi	r25, 0x7F	; 127
    1520:	50 40       	sbci	r21, 0x00	; 0
    1522:	8a f0       	brmi	.+34     	; 0x1546 <__mulsf3_pse+0x84>
    1524:	e1 f0       	breq	.+56     	; 0x155e <__mulsf3_pse+0x9c>
    1526:	88 23       	and	r24, r24
    1528:	4a f0       	brmi	.+18     	; 0x153c <__mulsf3_pse+0x7a>
    152a:	ee 0f       	add	r30, r30
    152c:	ff 1f       	adc	r31, r31
    152e:	bb 1f       	adc	r27, r27
    1530:	66 1f       	adc	r22, r22
    1532:	77 1f       	adc	r23, r23
    1534:	88 1f       	adc	r24, r24
    1536:	91 50       	subi	r25, 0x01	; 1
    1538:	50 40       	sbci	r21, 0x00	; 0
    153a:	a9 f7       	brne	.-22     	; 0x1526 <__mulsf3_pse+0x64>
    153c:	9e 3f       	cpi	r25, 0xFE	; 254
    153e:	51 05       	cpc	r21, r1
    1540:	70 f0       	brcs	.+28     	; 0x155e <__mulsf3_pse+0x9c>
    1542:	30 cf       	rjmp	.-416    	; 0x13a4 <__fp_inf>
    1544:	9f cf       	rjmp	.-194    	; 0x1484 <__fp_szero>
    1546:	5f 3f       	cpi	r21, 0xFF	; 255
    1548:	ec f3       	brlt	.-6      	; 0x1544 <__mulsf3_pse+0x82>
    154a:	98 3e       	cpi	r25, 0xE8	; 232
    154c:	dc f3       	brlt	.-10     	; 0x1544 <__mulsf3_pse+0x82>
    154e:	86 95       	lsr	r24
    1550:	77 95       	ror	r23
    1552:	67 95       	ror	r22
    1554:	b7 95       	ror	r27
    1556:	f7 95       	ror	r31
    1558:	e7 95       	ror	r30
    155a:	9f 5f       	subi	r25, 0xFF	; 255
    155c:	c1 f7       	brne	.-16     	; 0x154e <__mulsf3_pse+0x8c>
    155e:	fe 2b       	or	r31, r30
    1560:	88 0f       	add	r24, r24
    1562:	91 1d       	adc	r25, r1
    1564:	96 95       	lsr	r25
    1566:	87 95       	ror	r24
    1568:	97 f9       	bld	r25, 7
    156a:	08 95       	ret
    156c:	11 f4       	brne	.+4      	; 0x1572 <__mulsf3_pse+0xb0>
    156e:	0e f4       	brtc	.+2      	; 0x1572 <__mulsf3_pse+0xb0>
    1570:	1f cf       	rjmp	.-450    	; 0x13b0 <__fp_nan>
    1572:	41 c0       	rjmp	.+130    	; 0x15f6 <__fp_mpack>

00001574 <sqrt>:
    1574:	6c df       	rcall	.-296    	; 0x144e <__fp_splitA>
    1576:	d0 f3       	brcs	.-12     	; 0x156c <__mulsf3_pse+0xaa>
    1578:	99 23       	and	r25, r25
    157a:	d9 f3       	breq	.-10     	; 0x1572 <__mulsf3_pse+0xb0>
    157c:	ce f3       	brts	.-14     	; 0x1570 <__mulsf3_pse+0xae>
    157e:	9f 57       	subi	r25, 0x7F	; 127
    1580:	55 0b       	sbc	r21, r21
    1582:	87 ff       	sbrs	r24, 7
    1584:	46 d0       	rcall	.+140    	; 0x1612 <__fp_norm2>
    1586:	00 24       	eor	r0, r0
    1588:	a0 e6       	ldi	r26, 0x60	; 96
    158a:	40 ea       	ldi	r20, 0xA0	; 160
    158c:	90 01       	movw	r18, r0
    158e:	80 58       	subi	r24, 0x80	; 128
    1590:	56 95       	lsr	r21
    1592:	97 95       	ror	r25
    1594:	28 f4       	brcc	.+10     	; 0x15a0 <sqrt+0x2c>
    1596:	80 5c       	subi	r24, 0xC0	; 192
    1598:	66 0f       	add	r22, r22
    159a:	77 1f       	adc	r23, r23
    159c:	88 1f       	adc	r24, r24
    159e:	20 f0       	brcs	.+8      	; 0x15a8 <sqrt+0x34>
    15a0:	26 17       	cp	r18, r22
    15a2:	37 07       	cpc	r19, r23
    15a4:	48 07       	cpc	r20, r24
    15a6:	30 f4       	brcc	.+12     	; 0x15b4 <sqrt+0x40>
    15a8:	62 1b       	sub	r22, r18
    15aa:	73 0b       	sbc	r23, r19
    15ac:	84 0b       	sbc	r24, r20
    15ae:	20 29       	or	r18, r0
    15b0:	31 29       	or	r19, r1
    15b2:	4a 2b       	or	r20, r26
    15b4:	a6 95       	lsr	r26
    15b6:	17 94       	ror	r1
    15b8:	07 94       	ror	r0
    15ba:	20 25       	eor	r18, r0
    15bc:	31 25       	eor	r19, r1
    15be:	4a 27       	eor	r20, r26
    15c0:	58 f7       	brcc	.-42     	; 0x1598 <sqrt+0x24>
    15c2:	66 0f       	add	r22, r22
    15c4:	77 1f       	adc	r23, r23
    15c6:	88 1f       	adc	r24, r24
    15c8:	20 f0       	brcs	.+8      	; 0x15d2 <sqrt+0x5e>
    15ca:	26 17       	cp	r18, r22
    15cc:	37 07       	cpc	r19, r23
    15ce:	48 07       	cpc	r20, r24
    15d0:	30 f4       	brcc	.+12     	; 0x15de <sqrt+0x6a>
    15d2:	62 0b       	sbc	r22, r18
    15d4:	73 0b       	sbc	r23, r19
    15d6:	84 0b       	sbc	r24, r20
    15d8:	20 0d       	add	r18, r0
    15da:	31 1d       	adc	r19, r1
    15dc:	41 1d       	adc	r20, r1
    15de:	a0 95       	com	r26
    15e0:	81 f7       	brne	.-32     	; 0x15c2 <sqrt+0x4e>
    15e2:	b9 01       	movw	r22, r18
    15e4:	84 2f       	mov	r24, r20
    15e6:	91 58       	subi	r25, 0x81	; 129
    15e8:	88 0f       	add	r24, r24
    15ea:	96 95       	lsr	r25
    15ec:	87 95       	ror	r24
    15ee:	08 95       	ret

000015f0 <square>:
    15f0:	9b 01       	movw	r18, r22
    15f2:	ac 01       	movw	r20, r24
    15f4:	58 cf       	rjmp	.-336    	; 0x14a6 <__mulsf3>

000015f6 <__fp_mpack>:
    15f6:	9f 3f       	cpi	r25, 0xFF	; 255
    15f8:	31 f0       	breq	.+12     	; 0x1606 <__fp_mpack_finite+0xc>

000015fa <__fp_mpack_finite>:
    15fa:	91 50       	subi	r25, 0x01	; 1
    15fc:	20 f4       	brcc	.+8      	; 0x1606 <__fp_mpack_finite+0xc>
    15fe:	87 95       	ror	r24
    1600:	77 95       	ror	r23
    1602:	67 95       	ror	r22
    1604:	b7 95       	ror	r27
    1606:	88 0f       	add	r24, r24
    1608:	91 1d       	adc	r25, r1
    160a:	96 95       	lsr	r25
    160c:	87 95       	ror	r24
    160e:	97 f9       	bld	r25, 7
    1610:	08 95       	ret

00001612 <__fp_norm2>:
    1612:	91 50       	subi	r25, 0x01	; 1
    1614:	50 40       	sbci	r21, 0x00	; 0
    1616:	66 0f       	add	r22, r22
    1618:	77 1f       	adc	r23, r23
    161a:	88 1f       	adc	r24, r24
    161c:	d2 f7       	brpl	.-12     	; 0x1612 <__fp_norm2>
    161e:	08 95       	ret

00001620 <__mulsi3>:
    1620:	62 9f       	mul	r22, r18
    1622:	d0 01       	movw	r26, r0
    1624:	73 9f       	mul	r23, r19
    1626:	f0 01       	movw	r30, r0
    1628:	82 9f       	mul	r24, r18
    162a:	e0 0d       	add	r30, r0
    162c:	f1 1d       	adc	r31, r1
    162e:	64 9f       	mul	r22, r20
    1630:	e0 0d       	add	r30, r0
    1632:	f1 1d       	adc	r31, r1
    1634:	92 9f       	mul	r25, r18
    1636:	f0 0d       	add	r31, r0
    1638:	83 9f       	mul	r24, r19
    163a:	f0 0d       	add	r31, r0
    163c:	74 9f       	mul	r23, r20
    163e:	f0 0d       	add	r31, r0
    1640:	65 9f       	mul	r22, r21
    1642:	f0 0d       	add	r31, r0
    1644:	99 27       	eor	r25, r25
    1646:	72 9f       	mul	r23, r18
    1648:	b0 0d       	add	r27, r0
    164a:	e1 1d       	adc	r30, r1
    164c:	f9 1f       	adc	r31, r25
    164e:	63 9f       	mul	r22, r19
    1650:	b0 0d       	add	r27, r0
    1652:	e1 1d       	adc	r30, r1
    1654:	f9 1f       	adc	r31, r25
    1656:	bd 01       	movw	r22, r26
    1658:	cf 01       	movw	r24, r30
    165a:	11 24       	eor	r1, r1
    165c:	08 95       	ret

0000165e <__divmodsi4>:
    165e:	97 fb       	bst	r25, 7
    1660:	09 2e       	mov	r0, r25
    1662:	05 26       	eor	r0, r21
    1664:	0e d0       	rcall	.+28     	; 0x1682 <__divmodsi4_neg1>
    1666:	57 fd       	sbrc	r21, 7
    1668:	04 d0       	rcall	.+8      	; 0x1672 <__divmodsi4_neg2>
    166a:	14 d0       	rcall	.+40     	; 0x1694 <__udivmodsi4>
    166c:	0a d0       	rcall	.+20     	; 0x1682 <__divmodsi4_neg1>
    166e:	00 1c       	adc	r0, r0
    1670:	38 f4       	brcc	.+14     	; 0x1680 <__divmodsi4_exit>

00001672 <__divmodsi4_neg2>:
    1672:	50 95       	com	r21
    1674:	40 95       	com	r20
    1676:	30 95       	com	r19
    1678:	21 95       	neg	r18
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	4f 4f       	sbci	r20, 0xFF	; 255
    167e:	5f 4f       	sbci	r21, 0xFF	; 255

00001680 <__divmodsi4_exit>:
    1680:	08 95       	ret

00001682 <__divmodsi4_neg1>:
    1682:	f6 f7       	brtc	.-4      	; 0x1680 <__divmodsi4_exit>
    1684:	90 95       	com	r25
    1686:	80 95       	com	r24
    1688:	70 95       	com	r23
    168a:	61 95       	neg	r22
    168c:	7f 4f       	sbci	r23, 0xFF	; 255
    168e:	8f 4f       	sbci	r24, 0xFF	; 255
    1690:	9f 4f       	sbci	r25, 0xFF	; 255
    1692:	08 95       	ret

00001694 <__udivmodsi4>:
    1694:	a1 e2       	ldi	r26, 0x21	; 33
    1696:	1a 2e       	mov	r1, r26
    1698:	aa 1b       	sub	r26, r26
    169a:	bb 1b       	sub	r27, r27
    169c:	fd 01       	movw	r30, r26
    169e:	0d c0       	rjmp	.+26     	; 0x16ba <__udivmodsi4_ep>

000016a0 <__udivmodsi4_loop>:
    16a0:	aa 1f       	adc	r26, r26
    16a2:	bb 1f       	adc	r27, r27
    16a4:	ee 1f       	adc	r30, r30
    16a6:	ff 1f       	adc	r31, r31
    16a8:	a2 17       	cp	r26, r18
    16aa:	b3 07       	cpc	r27, r19
    16ac:	e4 07       	cpc	r30, r20
    16ae:	f5 07       	cpc	r31, r21
    16b0:	20 f0       	brcs	.+8      	; 0x16ba <__udivmodsi4_ep>
    16b2:	a2 1b       	sub	r26, r18
    16b4:	b3 0b       	sbc	r27, r19
    16b6:	e4 0b       	sbc	r30, r20
    16b8:	f5 0b       	sbc	r31, r21

000016ba <__udivmodsi4_ep>:
    16ba:	66 1f       	adc	r22, r22
    16bc:	77 1f       	adc	r23, r23
    16be:	88 1f       	adc	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	1a 94       	dec	r1
    16c4:	69 f7       	brne	.-38     	; 0x16a0 <__udivmodsi4_loop>
    16c6:	60 95       	com	r22
    16c8:	70 95       	com	r23
    16ca:	80 95       	com	r24
    16cc:	90 95       	com	r25
    16ce:	9b 01       	movw	r18, r22
    16d0:	ac 01       	movw	r20, r24
    16d2:	bd 01       	movw	r22, r26
    16d4:	cf 01       	movw	r24, r30
    16d6:	08 95       	ret

000016d8 <_exit>:
    16d8:	f8 94       	cli

000016da <__stop_program>:
    16da:	ff cf       	rjmp	.-2      	; 0x16da <__stop_program>
